{"ast":null,"code":"import React,{useState}from'react';import Button from'./Button';import'./PrintButton.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const PrintButton=_ref=>{let{data,title,type='default',onValidate=null,validateText='Validate & Print',printText='Print',className='',disabled=false,showValidateOption=false}=_ref;const[isPrinting,setIsPrinting]=useState(false);const[showPrintOptions,setShowPrintOptions]=useState(false);const handlePrint=async function(){let validateFirst=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(validateFirst&&onValidate){try{await onValidate();}catch(error){console.error('Validation failed:',error);return;}}setIsPrinting(true);try{// Create print content\nconst printContent=generatePrintContent(data,title,type);// Open print window\nconst printWindow=window.open('','_blank','width=800,height=600');printWindow.document.write(printContent);printWindow.document.close();// Wait for content to load then print\nprintWindow.onload=()=>{printWindow.focus();printWindow.print();printWindow.close();};}catch(error){console.error('Print error:',error);alert('Failed to print. Please try again.');}finally{setIsPrinting(false);setShowPrintOptions(false);}};const generatePrintContent=(data,title,type)=>{const currentDate=new Date().toLocaleDateString();const currentTime=new Date().toLocaleTimeString();const printTimestamp=new Date().toISOString();const printId=data.print_id||\"PRINT-\".concat(Date.now(),\"-\").concat(Math.random().toString(36).substr(2,9));let content=\"\\n      <!DOCTYPE html>\\n      <html>\\n      <head>\\n        <title>\".concat(title,\"</title>\\n        <style>\\n          body { \\n            font-family: Arial, sans-serif; \\n            margin: 20px; \\n            color: #333;\\n            line-height: 1.4;\\n          }\\n          .header { \\n            text-align: center; \\n            border-bottom: 2px solid #333; \\n            padding-bottom: 10px; \\n            margin-bottom: 20px; \\n          }\\n          .header h1 { \\n            margin: 0; \\n            color: #2c3e50; \\n            font-size: 24px;\\n          }\\n          .header .date { \\n            color: #666; \\n            font-size: 14px; \\n            margin-top: 5px;\\n          }\\n          .header .print-info { \\n            color: #888; \\n            font-size: 12px; \\n            margin-top: 3px;\\n            font-family: monospace;\\n          }\\n          .info-section { \\n            margin-bottom: 20px; \\n            padding: 15px; \\n            background: #f8f9fa; \\n            border-radius: 5px; \\n          }\\n          .info-section h3 { \\n            margin: 0 0 10px 0; \\n            color: #2c3e50; \\n            font-size: 16px;\\n          }\\n          .info-row { \\n            display: flex; \\n            justify-content: space-between; \\n            margin-bottom: 5px; \\n          }\\n          .info-label { \\n            font-weight: bold; \\n            color: #555; \\n          }\\n          .info-value { \\n            color: #333; \\n          }\\n          table { \\n            width: 100%; \\n            border-collapse: collapse; \\n            margin-top: 10px; \\n          }\\n          th, td { \\n            border: 1px solid #ddd; \\n            padding: 8px; \\n            text-align: left; \\n          }\\n          th { \\n            background-color: #f2f2f2; \\n            font-weight: bold; \\n            color: #2c3e50;\\n          }\\n          .total-row { \\n            font-weight: bold; \\n            background-color: #e9ecef; \\n          }\\n          .footer { \\n            margin-top: 30px; \\n            text-align: center; \\n            color: #666; \\n            font-size: 12px; \\n            border-top: 1px solid #ddd; \\n            padding-top: 10px; \\n          }\\n          @media print {\\n            body { margin: 0; }\\n            .no-print { display: none; }\\n          }\\n        </style>\\n      </head>\\n      <body>\\n        <div class=\\\"header\\\">\\n          <h1>\").concat(title,\"</h1>\\n          <div class=\\\"date\\\">Generated on \").concat(currentDate,\" at \").concat(currentTime,\"</div>\\n          <div class=\\\"print-info\\\">Print ID: \").concat(printId,\" | Timestamp: \").concat(printTimestamp,\"</div>\\n        </div>\\n    \");// Add type-specific content\nswitch(type){case'inventory':content+=generateInventoryContent(data);break;case'purchase_order':content+=generatePurchaseOrderContent(data);break;case'delivery':content+=generateDeliveryContent(data);break;case'sale':content+=generateSaleContent(data);break;case'sales_history':content+=generateSalesHistoryContent(data);break;default:content+=generateDefaultContent(data);}content+=\"\\n        <div class=\\\"footer\\\">\\n          <p>Generated by Beverage Management System</p>\\n          <p>Print ID: \".concat(printId,\" | Generated: \").concat(printTimestamp,\"</p>\\n          <p>Document Type: \").concat(type.toUpperCase(),\" | User: \").concat(data.user_name||'System',\"</p>\\n        </div>\\n      </body>\\n      </html>\\n    \");return content;};const generateInventoryContent=data=>{return\"\\n      <div class=\\\"info-section\\\">\\n        <h3>Inventory Summary</h3>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Total Products:</span>\\n          <span class=\\\"info-value\\\">\".concat(data.length,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Low Stock Items:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.filter(item=>item.is_low_stock).length,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Out of Stock Items:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.filter(item=>item.is_out_of_stock).length,\"</span>\\n        </div>\\n      </div>\\n      \\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Product Name</th>\\n            <th>SKU</th>\\n            <th>Category</th>\\n            <th>Stock Quantity</th>\\n            <th>Unit</th>\\n            <th>Price</th>\\n            <th>Status</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          \").concat(data.map(item=>\"\\n            <tr>\\n              <td>\".concat(item.name,\"</td>\\n              <td>\").concat(item.sku,\"</td>\\n              <td>\").concat(item.category_name||'N/A',\"</td>\\n              <td>\").concat(item.stock_quantity,\"</td>\\n              <td>\").concat(item.unit,\"</td>\\n              <td>$\").concat(parseFloat(item.price).toFixed(2),\"</td>\\n              <td>\\n                \").concat(item.is_out_of_stock?'Out of Stock':item.is_low_stock?'Low Stock':'In Stock',\"\\n              </td>\\n            </tr>\\n          \")).join(''),\"\\n        </tbody>\\n      </table>\\n    \");};const generatePurchaseOrderContent=data=>{return\"\\n      <div class=\\\"info-section\\\">\\n        <h3>Purchase Order Details</h3>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Order Number:</span>\\n          <span class=\\\"info-value\\\">\".concat(data.order_number,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Supplier:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.supplier_name,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Order Date:</span>\\n          <span class=\\\"info-value\\\">\").concat(new Date(data.order_date).toLocaleDateString(),\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Status:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.status,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Total Amount:</span>\\n          <span class=\\\"info-value\\\">$\").concat(parseFloat(data.total_amount).toFixed(2),\"</span>\\n        </div>\\n      </div>\\n      \\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Product</th>\\n            <th>SKU</th>\\n            <th>Quantity</th>\\n            <th>Unit</th>\\n            <th>Unit Cost</th>\\n            <th>Total Cost</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          \").concat(data.items.map(item=>\"\\n            <tr>\\n              <td>\".concat(item.product_name,\"</td>\\n              <td>\").concat(item.product_sku,\"</td>\\n              <td>\").concat(item.quantity,\"</td>\\n              <td>\").concat(item.unit_name,\"</td>\\n              <td>$\").concat(parseFloat(item.unit_cost).toFixed(2),\"</td>\\n              <td>$\").concat(parseFloat(item.total_cost).toFixed(2),\"</td>\\n            </tr>\\n          \")).join(''),\"\\n        </tbody>\\n        <tfoot>\\n          <tr class=\\\"total-row\\\">\\n            <td colspan=\\\"5\\\">Total:</td>\\n            <td>$\").concat(parseFloat(data.total_amount).toFixed(2),\"</td>\\n          </tr>\\n        </tfoot>\\n      </table>\\n    \");};const generateDeliveryContent=data=>{return\"\\n      <div class=\\\"info-section\\\">\\n        <h3>Delivery Details</h3>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Delivery Number:</span>\\n          <span class=\\\"info-value\\\">\".concat(data.delivery_number,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Purchase Order:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.purchase_order_number,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Supplier:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.supplier_name,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Delivery Date:</span>\\n          <span class=\\\"info-value\\\">\").concat(new Date(data.delivery_date).toLocaleDateString(),\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Status:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.status,\"</span>\\n        </div>\\n      </div>\\n      \\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Product</th>\\n            <th>SKU</th>\\n            <th>Ordered Qty</th>\\n            <th>Delivered Qty</th>\\n            <th>Unit</th>\\n            <th>Status</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          \").concat(data.items.map(item=>\"\\n            <tr>\\n              <td>\".concat(item.product_name,\"</td>\\n              <td>\").concat(item.product_sku,\"</td>\\n              <td>\").concat(item.ordered_quantity,\"</td>\\n              <td>\").concat(item.delivered_quantity,\"</td>\\n              <td>\").concat(item.unit_name,\"</td>\\n              <td>\").concat(item.status,\"</td>\\n            </tr>\\n          \")).join(''),\"\\n        </tbody>\\n      </table>\\n    \");};const generateSaleContent=data=>{return\"\\n      <div class=\\\"info-section\\\">\\n        <h3>Sale Details</h3>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Sale Number:</span>\\n          <span class=\\\"info-value\\\">\".concat(data.sale_number,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Customer:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.customer_name||'Walk-in Customer',\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Sale Date:</span>\\n          <span class=\\\"info-value\\\">\").concat(new Date(data.created_at).toLocaleDateString(),\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Status:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.status,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Total Amount:</span>\\n          <span class=\\\"info-value\\\">$\").concat(parseFloat(data.total_amount).toFixed(2),\"</span>\\n        </div>\\n      </div>\\n      \\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Product</th>\\n            <th>SKU</th>\\n            <th>Quantity</th>\\n            <th>Unit</th>\\n            <th>Unit Price</th>\\n            <th>Total Price</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          \").concat(data.items.map(item=>\"\\n            <tr>\\n              <td>\".concat(item.product_name,\"</td>\\n              <td>\").concat(item.product_sku,\"</td>\\n              <td>\").concat(item.quantity,\"</td>\\n              <td>\").concat(item.unit_name,\"</td>\\n              <td>$\").concat(parseFloat(item.unit_price).toFixed(2),\"</td>\\n              <td>$\").concat(parseFloat(item.total_price).toFixed(2),\"</td>\\n            </tr>\\n          \")).join(''),\"\\n        </tbody>\\n        <tfoot>\\n          <tr class=\\\"total-row\\\">\\n            <td colspan=\\\"5\\\">Total:</td>\\n            <td>$\").concat(parseFloat(data.total_amount).toFixed(2),\"</td>\\n          </tr>\\n        </tfoot>\\n      </table>\\n    \");};const generateSalesHistoryContent=data=>{return\"\\n      <div class=\\\"info-section\\\">\\n        <h3>Sales History Summary</h3>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Total Sales:</span>\\n          <span class=\\\"info-value\\\">\".concat(data.length,\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Total Revenue:</span>\\n          <span class=\\\"info-value\\\">$\").concat(data.reduce((sum,sale)=>sum+parseFloat(sale.total_amount),0).toFixed(2),\"</span>\\n        </div>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Date Range:</span>\\n          <span class=\\\"info-value\\\">\").concat(data.length>0?\"\".concat(new Date(data[data.length-1].created_at).toLocaleDateString(),\" - \").concat(new Date(data[0].created_at).toLocaleDateString()):'No data',\"</span>\\n        </div>\\n      </div>\\n      \\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Sale Number</th>\\n            <th>Customer</th>\\n            <th>Date</th>\\n            <th>Items</th>\\n            <th>Total Amount</th>\\n            <th>Status</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          \").concat(data.map(sale=>\"\\n            <tr>\\n              <td>\".concat(sale.sale_number,\"</td>\\n              <td>\").concat(sale.customer_name||'Walk-in',\"</td>\\n              <td>\").concat(new Date(sale.created_at).toLocaleDateString(),\"</td>\\n              <td>\").concat(sale.items_count||0,\"</td>\\n              <td>$\").concat(parseFloat(sale.total_amount).toFixed(2),\"</td>\\n              <td>\").concat(sale.status,\"</td>\\n            </tr>\\n          \")).join(''),\"\\n        </tbody>\\n      </table>\\n    \");};const generateDefaultContent=data=>{return\"\\n      <div class=\\\"info-section\\\">\\n        <h3>Data Summary</h3>\\n        <div class=\\\"info-row\\\">\\n          <span class=\\\"info-label\\\">Total Items:</span>\\n          <span class=\\\"info-value\\\">\".concat(Array.isArray(data)?data.length:1,\"</span>\\n        </div>\\n      </div>\\n      \\n      <pre style=\\\"white-space: pre-wrap; font-family: Arial, sans-serif;\\\">\\n        \").concat(JSON.stringify(data,null,2),\"\\n      </pre>\\n    \");};if(showValidateOption&&onValidate){return/*#__PURE__*/_jsxs(\"div\",{className:\"print-button-container \".concat(className),children:[/*#__PURE__*/_jsx(Button,{variant:\"outline\",size:\"small\",onClick:()=>setShowPrintOptions(!showPrintOptions),disabled:disabled,children:isPrinting?'Printing...':'Print Options'}),showPrintOptions&&/*#__PURE__*/_jsxs(\"div\",{className:\"print-options\",children:[/*#__PURE__*/_jsx(Button,{variant:\"primary\",size:\"small\",onClick:()=>handlePrint(false),disabled:disabled||isPrinting,children:printText}),/*#__PURE__*/_jsx(Button,{variant:\"success\",size:\"small\",onClick:()=>handlePrint(true),disabled:disabled||isPrinting,children:validateText})]})]});}return/*#__PURE__*/_jsx(Button,{variant:\"outline\",size:\"small\",onClick:()=>handlePrint(false),disabled:disabled||isPrinting,className:className,children:isPrinting?'Printing...':printText});};export default PrintButton;","map":{"version":3,"names":["React","useState","Button","jsx","_jsx","jsxs","_jsxs","PrintButton","_ref","data","title","type","onValidate","validateText","printText","className","disabled","showValidateOption","isPrinting","setIsPrinting","showPrintOptions","setShowPrintOptions","handlePrint","validateFirst","arguments","length","undefined","error","console","printContent","generatePrintContent","printWindow","window","open","document","write","close","onload","focus","print","alert","currentDate","Date","toLocaleDateString","currentTime","toLocaleTimeString","printTimestamp","toISOString","printId","print_id","concat","now","Math","random","toString","substr","content","generateInventoryContent","generatePurchaseOrderContent","generateDeliveryContent","generateSaleContent","generateSalesHistoryContent","generateDefaultContent","toUpperCase","user_name","filter","item","is_low_stock","is_out_of_stock","map","name","sku","category_name","stock_quantity","unit","parseFloat","price","toFixed","join","order_number","supplier_name","order_date","status","total_amount","items","product_name","product_sku","quantity","unit_name","unit_cost","total_cost","delivery_number","purchase_order_number","delivery_date","ordered_quantity","delivered_quantity","sale_number","customer_name","created_at","unit_price","total_price","reduce","sum","sale","items_count","Array","isArray","JSON","stringify","children","variant","size","onClick"],"sources":["/home/el-ifran/WareHouse_Manager/beverage_management_system/src/components/PrintButton.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Button from './Button';\nimport './PrintButton.css';\n\nconst PrintButton = ({ \n  data, \n  title, \n  type = 'default', \n  onValidate = null, \n  validateText = 'Validate & Print',\n  printText = 'Print',\n  className = '',\n  disabled = false,\n  showValidateOption = false\n}) => {\n  const [isPrinting, setIsPrinting] = useState(false);\n  const [showPrintOptions, setShowPrintOptions] = useState(false);\n\n  const handlePrint = async (validateFirst = false) => {\n    if (validateFirst && onValidate) {\n      try {\n        await onValidate();\n      } catch (error) {\n        console.error('Validation failed:', error);\n        return;\n      }\n    }\n\n    setIsPrinting(true);\n    \n    try {\n      // Create print content\n      const printContent = generatePrintContent(data, title, type);\n      \n      // Open print window\n      const printWindow = window.open('', '_blank', 'width=800,height=600');\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      \n      // Wait for content to load then print\n      printWindow.onload = () => {\n        printWindow.focus();\n        printWindow.print();\n        printWindow.close();\n      };\n      \n    } catch (error) {\n      console.error('Print error:', error);\n      alert('Failed to print. Please try again.');\n    } finally {\n      setIsPrinting(false);\n      setShowPrintOptions(false);\n    }\n  };\n\n  const generatePrintContent = (data, title, type) => {\n    const currentDate = new Date().toLocaleDateString();\n    const currentTime = new Date().toLocaleTimeString();\n    const printTimestamp = new Date().toISOString();\n    const printId = data.print_id || `PRINT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    let content = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>${title}</title>\n        <style>\n          body { \n            font-family: Arial, sans-serif; \n            margin: 20px; \n            color: #333;\n            line-height: 1.4;\n          }\n          .header { \n            text-align: center; \n            border-bottom: 2px solid #333; \n            padding-bottom: 10px; \n            margin-bottom: 20px; \n          }\n          .header h1 { \n            margin: 0; \n            color: #2c3e50; \n            font-size: 24px;\n          }\n          .header .date { \n            color: #666; \n            font-size: 14px; \n            margin-top: 5px;\n          }\n          .header .print-info { \n            color: #888; \n            font-size: 12px; \n            margin-top: 3px;\n            font-family: monospace;\n          }\n          .info-section { \n            margin-bottom: 20px; \n            padding: 15px; \n            background: #f8f9fa; \n            border-radius: 5px; \n          }\n          .info-section h3 { \n            margin: 0 0 10px 0; \n            color: #2c3e50; \n            font-size: 16px;\n          }\n          .info-row { \n            display: flex; \n            justify-content: space-between; \n            margin-bottom: 5px; \n          }\n          .info-label { \n            font-weight: bold; \n            color: #555; \n          }\n          .info-value { \n            color: #333; \n          }\n          table { \n            width: 100%; \n            border-collapse: collapse; \n            margin-top: 10px; \n          }\n          th, td { \n            border: 1px solid #ddd; \n            padding: 8px; \n            text-align: left; \n          }\n          th { \n            background-color: #f2f2f2; \n            font-weight: bold; \n            color: #2c3e50;\n          }\n          .total-row { \n            font-weight: bold; \n            background-color: #e9ecef; \n          }\n          .footer { \n            margin-top: 30px; \n            text-align: center; \n            color: #666; \n            font-size: 12px; \n            border-top: 1px solid #ddd; \n            padding-top: 10px; \n          }\n          @media print {\n            body { margin: 0; }\n            .no-print { display: none; }\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>${title}</h1>\n          <div class=\"date\">Generated on ${currentDate} at ${currentTime}</div>\n          <div class=\"print-info\">Print ID: ${printId} | Timestamp: ${printTimestamp}</div>\n        </div>\n    `;\n\n    // Add type-specific content\n    switch (type) {\n      case 'inventory':\n        content += generateInventoryContent(data);\n        break;\n      case 'purchase_order':\n        content += generatePurchaseOrderContent(data);\n        break;\n      case 'delivery':\n        content += generateDeliveryContent(data);\n        break;\n      case 'sale':\n        content += generateSaleContent(data);\n        break;\n      case 'sales_history':\n        content += generateSalesHistoryContent(data);\n        break;\n      default:\n        content += generateDefaultContent(data);\n    }\n\n    content += `\n        <div class=\"footer\">\n          <p>Generated by Beverage Management System</p>\n          <p>Print ID: ${printId} | Generated: ${printTimestamp}</p>\n          <p>Document Type: ${type.toUpperCase()} | User: ${data.user_name || 'System'}</p>\n        </div>\n      </body>\n      </html>\n    `;\n\n    return content;\n  };\n\n  const generateInventoryContent = (data) => {\n    return `\n      <div class=\"info-section\">\n        <h3>Inventory Summary</h3>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Total Products:</span>\n          <span class=\"info-value\">${data.length}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Low Stock Items:</span>\n          <span class=\"info-value\">${data.filter(item => item.is_low_stock).length}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Out of Stock Items:</span>\n          <span class=\"info-value\">${data.filter(item => item.is_out_of_stock).length}</span>\n        </div>\n      </div>\n      \n      <table>\n        <thead>\n          <tr>\n            <th>Product Name</th>\n            <th>SKU</th>\n            <th>Category</th>\n            <th>Stock Quantity</th>\n            <th>Unit</th>\n            <th>Price</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.map(item => `\n            <tr>\n              <td>${item.name}</td>\n              <td>${item.sku}</td>\n              <td>${item.category_name || 'N/A'}</td>\n              <td>${item.stock_quantity}</td>\n              <td>${item.unit}</td>\n              <td>$${parseFloat(item.price).toFixed(2)}</td>\n              <td>\n                ${item.is_out_of_stock ? 'Out of Stock' : \n                  item.is_low_stock ? 'Low Stock' : 'In Stock'}\n              </td>\n            </tr>\n          `).join('')}\n        </tbody>\n      </table>\n    `;\n  };\n\n  const generatePurchaseOrderContent = (data) => {\n    return `\n      <div class=\"info-section\">\n        <h3>Purchase Order Details</h3>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Order Number:</span>\n          <span class=\"info-value\">${data.order_number}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Supplier:</span>\n          <span class=\"info-value\">${data.supplier_name}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Order Date:</span>\n          <span class=\"info-value\">${new Date(data.order_date).toLocaleDateString()}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Status:</span>\n          <span class=\"info-value\">${data.status}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Total Amount:</span>\n          <span class=\"info-value\">$${parseFloat(data.total_amount).toFixed(2)}</span>\n        </div>\n      </div>\n      \n      <table>\n        <thead>\n          <tr>\n            <th>Product</th>\n            <th>SKU</th>\n            <th>Quantity</th>\n            <th>Unit</th>\n            <th>Unit Cost</th>\n            <th>Total Cost</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.items.map(item => `\n            <tr>\n              <td>${item.product_name}</td>\n              <td>${item.product_sku}</td>\n              <td>${item.quantity}</td>\n              <td>${item.unit_name}</td>\n              <td>$${parseFloat(item.unit_cost).toFixed(2)}</td>\n              <td>$${parseFloat(item.total_cost).toFixed(2)}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n        <tfoot>\n          <tr class=\"total-row\">\n            <td colspan=\"5\">Total:</td>\n            <td>$${parseFloat(data.total_amount).toFixed(2)}</td>\n          </tr>\n        </tfoot>\n      </table>\n    `;\n  };\n\n  const generateDeliveryContent = (data) => {\n    return `\n      <div class=\"info-section\">\n        <h3>Delivery Details</h3>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Delivery Number:</span>\n          <span class=\"info-value\">${data.delivery_number}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Purchase Order:</span>\n          <span class=\"info-value\">${data.purchase_order_number}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Supplier:</span>\n          <span class=\"info-value\">${data.supplier_name}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Delivery Date:</span>\n          <span class=\"info-value\">${new Date(data.delivery_date).toLocaleDateString()}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Status:</span>\n          <span class=\"info-value\">${data.status}</span>\n        </div>\n      </div>\n      \n      <table>\n        <thead>\n          <tr>\n            <th>Product</th>\n            <th>SKU</th>\n            <th>Ordered Qty</th>\n            <th>Delivered Qty</th>\n            <th>Unit</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.items.map(item => `\n            <tr>\n              <td>${item.product_name}</td>\n              <td>${item.product_sku}</td>\n              <td>${item.ordered_quantity}</td>\n              <td>${item.delivered_quantity}</td>\n              <td>${item.unit_name}</td>\n              <td>${item.status}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n      </table>\n    `;\n  };\n\n  const generateSaleContent = (data) => {\n    return `\n      <div class=\"info-section\">\n        <h3>Sale Details</h3>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Sale Number:</span>\n          <span class=\"info-value\">${data.sale_number}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Customer:</span>\n          <span class=\"info-value\">${data.customer_name || 'Walk-in Customer'}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Sale Date:</span>\n          <span class=\"info-value\">${new Date(data.created_at).toLocaleDateString()}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Status:</span>\n          <span class=\"info-value\">${data.status}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Total Amount:</span>\n          <span class=\"info-value\">$${parseFloat(data.total_amount).toFixed(2)}</span>\n        </div>\n      </div>\n      \n      <table>\n        <thead>\n          <tr>\n            <th>Product</th>\n            <th>SKU</th>\n            <th>Quantity</th>\n            <th>Unit</th>\n            <th>Unit Price</th>\n            <th>Total Price</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.items.map(item => `\n            <tr>\n              <td>${item.product_name}</td>\n              <td>${item.product_sku}</td>\n              <td>${item.quantity}</td>\n              <td>${item.unit_name}</td>\n              <td>$${parseFloat(item.unit_price).toFixed(2)}</td>\n              <td>$${parseFloat(item.total_price).toFixed(2)}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n        <tfoot>\n          <tr class=\"total-row\">\n            <td colspan=\"5\">Total:</td>\n            <td>$${parseFloat(data.total_amount).toFixed(2)}</td>\n          </tr>\n        </tfoot>\n      </table>\n    `;\n  };\n\n  const generateSalesHistoryContent = (data) => {\n    return `\n      <div class=\"info-section\">\n        <h3>Sales History Summary</h3>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Total Sales:</span>\n          <span class=\"info-value\">${data.length}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Total Revenue:</span>\n          <span class=\"info-value\">$${data.reduce((sum, sale) => sum + parseFloat(sale.total_amount), 0).toFixed(2)}</span>\n        </div>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Date Range:</span>\n          <span class=\"info-value\">${data.length > 0 ? \n            `${new Date(data[data.length - 1].created_at).toLocaleDateString()} - ${new Date(data[0].created_at).toLocaleDateString()}` : \n            'No data'}</span>\n        </div>\n      </div>\n      \n      <table>\n        <thead>\n          <tr>\n            <th>Sale Number</th>\n            <th>Customer</th>\n            <th>Date</th>\n            <th>Items</th>\n            <th>Total Amount</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.map(sale => `\n            <tr>\n              <td>${sale.sale_number}</td>\n              <td>${sale.customer_name || 'Walk-in'}</td>\n              <td>${new Date(sale.created_at).toLocaleDateString()}</td>\n              <td>${sale.items_count || 0}</td>\n              <td>$${parseFloat(sale.total_amount).toFixed(2)}</td>\n              <td>${sale.status}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n      </table>\n    `;\n  };\n\n  const generateDefaultContent = (data) => {\n    return `\n      <div class=\"info-section\">\n        <h3>Data Summary</h3>\n        <div class=\"info-row\">\n          <span class=\"info-label\">Total Items:</span>\n          <span class=\"info-value\">${Array.isArray(data) ? data.length : 1}</span>\n        </div>\n      </div>\n      \n      <pre style=\"white-space: pre-wrap; font-family: Arial, sans-serif;\">\n        ${JSON.stringify(data, null, 2)}\n      </pre>\n    `;\n  };\n\n  if (showValidateOption && onValidate) {\n    return (\n      <div className={`print-button-container ${className}`}>\n        <Button\n          variant=\"outline\"\n          size=\"small\"\n          onClick={() => setShowPrintOptions(!showPrintOptions)}\n          disabled={disabled}\n        >\n          {isPrinting ? 'Printing...' : 'Print Options'}\n        </Button>\n        \n        {showPrintOptions && (\n          <div className=\"print-options\">\n            <Button\n              variant=\"primary\"\n              size=\"small\"\n              onClick={() => handlePrint(false)}\n              disabled={disabled || isPrinting}\n            >\n              {printText}\n            </Button>\n            <Button\n              variant=\"success\"\n              size=\"small\"\n              onClick={() => handlePrint(true)}\n              disabled={disabled || isPrinting}\n            >\n              {validateText}\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"small\"\n      onClick={() => handlePrint(false)}\n      disabled={disabled || isPrinting}\n      className={className}\n    >\n      {isPrinting ? 'Printing...' : printText}\n    </Button>\n  );\n};\n\nexport default PrintButton;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B,MAAO,mBAAmB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3B,KAAM,CAAAC,WAAW,CAAGC,IAAA,EAUd,IAVe,CACnBC,IAAI,CACJC,KAAK,CACLC,IAAI,CAAG,SAAS,CAChBC,UAAU,CAAG,IAAI,CACjBC,YAAY,CAAG,kBAAkB,CACjCC,SAAS,CAAG,OAAO,CACnBC,SAAS,CAAG,EAAE,CACdC,QAAQ,CAAG,KAAK,CAChBC,kBAAkB,CAAG,KACvB,CAAC,CAAAT,IAAA,CACC,KAAM,CAACU,UAAU,CAAEC,aAAa,CAAC,CAAGlB,QAAQ,CAAC,KAAK,CAAC,CACnD,KAAM,CAACmB,gBAAgB,CAAEC,mBAAmB,CAAC,CAAGpB,QAAQ,CAAC,KAAK,CAAC,CAE/D,KAAM,CAAAqB,WAAW,CAAG,cAAAA,CAAA,CAAiC,IAA1B,CAAAC,aAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,KAAK,CAC9C,GAAID,aAAa,EAAIX,UAAU,CAAE,CAC/B,GAAI,CACF,KAAM,CAAAA,UAAU,CAAC,CAAC,CACpB,CAAE,MAAOe,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAAC,CAC1C,OACF,CACF,CAEAR,aAAa,CAAC,IAAI,CAAC,CAEnB,GAAI,CACF;AACA,KAAM,CAAAU,YAAY,CAAGC,oBAAoB,CAACrB,IAAI,CAAEC,KAAK,CAAEC,IAAI,CAAC,CAE5D;AACA,KAAM,CAAAoB,WAAW,CAAGC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAE,QAAQ,CAAE,sBAAsB,CAAC,CACrEF,WAAW,CAACG,QAAQ,CAACC,KAAK,CAACN,YAAY,CAAC,CACxCE,WAAW,CAACG,QAAQ,CAACE,KAAK,CAAC,CAAC,CAE5B;AACAL,WAAW,CAACM,MAAM,CAAG,IAAM,CACzBN,WAAW,CAACO,KAAK,CAAC,CAAC,CACnBP,WAAW,CAACQ,KAAK,CAAC,CAAC,CACnBR,WAAW,CAACK,KAAK,CAAC,CAAC,CACrB,CAAC,CAEH,CAAE,MAAOT,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACpCa,KAAK,CAAC,oCAAoC,CAAC,CAC7C,CAAC,OAAS,CACRrB,aAAa,CAAC,KAAK,CAAC,CACpBE,mBAAmB,CAAC,KAAK,CAAC,CAC5B,CACF,CAAC,CAED,KAAM,CAAAS,oBAAoB,CAAGA,CAACrB,IAAI,CAAEC,KAAK,CAAEC,IAAI,GAAK,CAClD,KAAM,CAAA8B,WAAW,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CACnD,KAAM,CAAAC,WAAW,CAAG,GAAI,CAAAF,IAAI,CAAC,CAAC,CAACG,kBAAkB,CAAC,CAAC,CACnD,KAAM,CAAAC,cAAc,CAAG,GAAI,CAAAJ,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC,CAC/C,KAAM,CAAAC,OAAO,CAAGvC,IAAI,CAACwC,QAAQ,WAAAC,MAAA,CAAaR,IAAI,CAACS,GAAG,CAAC,CAAC,MAAAD,MAAA,CAAIE,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,CAEjG,GAAI,CAAAC,OAAO,wEAAAN,MAAA,CAIExC,KAAK,00EAAAwC,MAAA,CAwFNxC,KAAK,uDAAAwC,MAAA,CACsBT,WAAW,SAAAS,MAAA,CAAON,WAAW,2DAAAM,MAAA,CAC1BF,OAAO,mBAAAE,MAAA,CAAiBJ,cAAc,gCAE/E,CAED;AACA,OAAQnC,IAAI,EACV,IAAK,WAAW,CACd6C,OAAO,EAAIC,wBAAwB,CAAChD,IAAI,CAAC,CACzC,MACF,IAAK,gBAAgB,CACnB+C,OAAO,EAAIE,4BAA4B,CAACjD,IAAI,CAAC,CAC7C,MACF,IAAK,UAAU,CACb+C,OAAO,EAAIG,uBAAuB,CAAClD,IAAI,CAAC,CACxC,MACF,IAAK,MAAM,CACT+C,OAAO,EAAII,mBAAmB,CAACnD,IAAI,CAAC,CACpC,MACF,IAAK,eAAe,CAClB+C,OAAO,EAAIK,2BAA2B,CAACpD,IAAI,CAAC,CAC5C,MACF,QACE+C,OAAO,EAAIM,sBAAsB,CAACrD,IAAI,CAAC,CAC3C,CAEA+C,OAAO,wHAAAN,MAAA,CAGcF,OAAO,mBAAAE,MAAA,CAAiBJ,cAAc,uCAAAI,MAAA,CACjCvC,IAAI,CAACoD,WAAW,CAAC,CAAC,cAAAb,MAAA,CAAYzC,IAAI,CAACuD,SAAS,EAAI,QAAQ,4DAIjF,CAED,MAAO,CAAAR,OAAO,CAChB,CAAC,CAED,KAAM,CAAAC,wBAAwB,CAAIhD,IAAI,EAAK,CACzC,uNAAAyC,MAAA,CAKiCzC,IAAI,CAACgB,MAAM,mKAAAyB,MAAA,CAIXzC,IAAI,CAACwD,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACC,YAAY,CAAC,CAAC1C,MAAM,sKAAAyB,MAAA,CAI7CzC,IAAI,CAACwD,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACE,eAAe,CAAC,CAAC3C,MAAM,uXAAAyB,MAAA,CAiBzEzC,IAAI,CAAC4D,GAAG,CAACH,IAAI,2CAAAhB,MAAA,CAELgB,IAAI,CAACI,IAAI,8BAAApB,MAAA,CACTgB,IAAI,CAACK,GAAG,8BAAArB,MAAA,CACRgB,IAAI,CAACM,aAAa,EAAI,KAAK,8BAAAtB,MAAA,CAC3BgB,IAAI,CAACO,cAAc,8BAAAvB,MAAA,CACnBgB,IAAI,CAACQ,IAAI,+BAAAxB,MAAA,CACRyB,UAAU,CAACT,IAAI,CAACU,KAAK,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC,gDAAA3B,MAAA,CAEpCgB,IAAI,CAACE,eAAe,CAAG,cAAc,CACrCF,IAAI,CAACC,YAAY,CAAG,WAAW,CAAG,UAAU,wDAGnD,CAAC,CAACW,IAAI,CAAC,EAAE,CAAC,6CAInB,CAAC,CAED,KAAM,CAAApB,4BAA4B,CAAIjD,IAAI,EAAK,CAC7C,0NAAAyC,MAAA,CAKiCzC,IAAI,CAACsE,YAAY,4JAAA7B,MAAA,CAIjBzC,IAAI,CAACuE,aAAa,8JAAA9B,MAAA,CAIlB,GAAI,CAAAR,IAAI,CAACjC,IAAI,CAACwE,UAAU,CAAC,CAACtC,kBAAkB,CAAC,CAAC,0JAAAO,MAAA,CAI9CzC,IAAI,CAACyE,MAAM,iKAAAhC,MAAA,CAIVyB,UAAU,CAAClE,IAAI,CAAC0E,YAAY,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC,qVAAA3B,MAAA,CAgBlEzC,IAAI,CAAC2E,KAAK,CAACf,GAAG,CAACH,IAAI,2CAAAhB,MAAA,CAEXgB,IAAI,CAACmB,YAAY,8BAAAnC,MAAA,CACjBgB,IAAI,CAACoB,WAAW,8BAAApC,MAAA,CAChBgB,IAAI,CAACqB,QAAQ,8BAAArC,MAAA,CACbgB,IAAI,CAACsB,SAAS,+BAAAtC,MAAA,CACbyB,UAAU,CAACT,IAAI,CAACuB,SAAS,CAAC,CAACZ,OAAO,CAAC,CAAC,CAAC,+BAAA3B,MAAA,CACrCyB,UAAU,CAACT,IAAI,CAACwB,UAAU,CAAC,CAACb,OAAO,CAAC,CAAC,CAAC,wCAEhD,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,0IAAA5B,MAAA,CAKFyB,UAAU,CAAClE,IAAI,CAAC0E,YAAY,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC,mEAKzD,CAAC,CAED,KAAM,CAAAlB,uBAAuB,CAAIlD,IAAI,EAAK,CACxC,uNAAAyC,MAAA,CAKiCzC,IAAI,CAACkF,eAAe,kKAAAzC,MAAA,CAIpBzC,IAAI,CAACmF,qBAAqB,4JAAA1C,MAAA,CAI1BzC,IAAI,CAACuE,aAAa,iKAAA9B,MAAA,CAIlB,GAAI,CAAAR,IAAI,CAACjC,IAAI,CAACoF,aAAa,CAAC,CAAClD,kBAAkB,CAAC,CAAC,0JAAAO,MAAA,CAIjDzC,IAAI,CAACyE,MAAM,wVAAAhC,MAAA,CAgBpCzC,IAAI,CAAC2E,KAAK,CAACf,GAAG,CAACH,IAAI,2CAAAhB,MAAA,CAEXgB,IAAI,CAACmB,YAAY,8BAAAnC,MAAA,CACjBgB,IAAI,CAACoB,WAAW,8BAAApC,MAAA,CAChBgB,IAAI,CAAC4B,gBAAgB,8BAAA5C,MAAA,CACrBgB,IAAI,CAAC6B,kBAAkB,8BAAA7C,MAAA,CACvBgB,IAAI,CAACsB,SAAS,8BAAAtC,MAAA,CACdgB,IAAI,CAACgB,MAAM,wCAEpB,CAAC,CAACJ,IAAI,CAAC,EAAE,CAAC,6CAInB,CAAC,CAED,KAAM,CAAAlB,mBAAmB,CAAInD,IAAI,EAAK,CACpC,+MAAAyC,MAAA,CAKiCzC,IAAI,CAACuF,WAAW,4JAAA9C,MAAA,CAIhBzC,IAAI,CAACwF,aAAa,EAAI,kBAAkB,6JAAA/C,MAAA,CAIxC,GAAI,CAAAR,IAAI,CAACjC,IAAI,CAACyF,UAAU,CAAC,CAACvD,kBAAkB,CAAC,CAAC,0JAAAO,MAAA,CAI9CzC,IAAI,CAACyE,MAAM,iKAAAhC,MAAA,CAIVyB,UAAU,CAAClE,IAAI,CAAC0E,YAAY,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC,uVAAA3B,MAAA,CAgBlEzC,IAAI,CAAC2E,KAAK,CAACf,GAAG,CAACH,IAAI,2CAAAhB,MAAA,CAEXgB,IAAI,CAACmB,YAAY,8BAAAnC,MAAA,CACjBgB,IAAI,CAACoB,WAAW,8BAAApC,MAAA,CAChBgB,IAAI,CAACqB,QAAQ,8BAAArC,MAAA,CACbgB,IAAI,CAACsB,SAAS,+BAAAtC,MAAA,CACbyB,UAAU,CAACT,IAAI,CAACiC,UAAU,CAAC,CAACtB,OAAO,CAAC,CAAC,CAAC,+BAAA3B,MAAA,CACtCyB,UAAU,CAACT,IAAI,CAACkC,WAAW,CAAC,CAACvB,OAAO,CAAC,CAAC,CAAC,wCAEjD,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,0IAAA5B,MAAA,CAKFyB,UAAU,CAAClE,IAAI,CAAC0E,YAAY,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC,mEAKzD,CAAC,CAED,KAAM,CAAAhB,2BAA2B,CAAIpD,IAAI,EAAK,CAC5C,wNAAAyC,MAAA,CAKiCzC,IAAI,CAACgB,MAAM,kKAAAyB,MAAA,CAIVzC,IAAI,CAAC4F,MAAM,CAAC,CAACC,GAAG,CAAEC,IAAI,GAAKD,GAAG,CAAG3B,UAAU,CAAC4B,IAAI,CAACpB,YAAY,CAAC,CAAE,CAAC,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC,8JAAA3B,MAAA,CAI9EzC,IAAI,CAACgB,MAAM,CAAG,CAAC,IAAAyB,MAAA,CACrC,GAAI,CAAAR,IAAI,CAACjC,IAAI,CAACA,IAAI,CAACgB,MAAM,CAAG,CAAC,CAAC,CAACyE,UAAU,CAAC,CAACvD,kBAAkB,CAAC,CAAC,QAAAO,MAAA,CAAM,GAAI,CAAAR,IAAI,CAACjC,IAAI,CAAC,CAAC,CAAC,CAACyF,UAAU,CAAC,CAACvD,kBAAkB,CAAC,CAAC,EACzH,SAAS,0VAAAO,MAAA,CAgBTzC,IAAI,CAAC4D,GAAG,CAACkC,IAAI,2CAAArD,MAAA,CAELqD,IAAI,CAACP,WAAW,8BAAA9C,MAAA,CAChBqD,IAAI,CAACN,aAAa,EAAI,SAAS,8BAAA/C,MAAA,CAC/B,GAAI,CAAAR,IAAI,CAAC6D,IAAI,CAACL,UAAU,CAAC,CAACvD,kBAAkB,CAAC,CAAC,8BAAAO,MAAA,CAC9CqD,IAAI,CAACC,WAAW,EAAI,CAAC,+BAAAtD,MAAA,CACpByB,UAAU,CAAC4B,IAAI,CAACpB,YAAY,CAAC,CAACN,OAAO,CAAC,CAAC,CAAC,8BAAA3B,MAAA,CACzCqD,IAAI,CAACrB,MAAM,wCAEpB,CAAC,CAACJ,IAAI,CAAC,EAAE,CAAC,6CAInB,CAAC,CAED,KAAM,CAAAhB,sBAAsB,CAAIrD,IAAI,EAAK,CACvC,+MAAAyC,MAAA,CAKiCuD,KAAK,CAACC,OAAO,CAACjG,IAAI,CAAC,CAAGA,IAAI,CAACgB,MAAM,CAAG,CAAC,0IAAAyB,MAAA,CAKhEyD,IAAI,CAACC,SAAS,CAACnG,IAAI,CAAE,IAAI,CAAE,CAAC,CAAC,yBAGrC,CAAC,CAED,GAAIQ,kBAAkB,EAAIL,UAAU,CAAE,CACpC,mBACEN,KAAA,QAAKS,SAAS,2BAAAmC,MAAA,CAA4BnC,SAAS,CAAG,CAAA8F,QAAA,eACpDzG,IAAA,CAACF,MAAM,EACL4G,OAAO,CAAC,SAAS,CACjBC,IAAI,CAAC,OAAO,CACZC,OAAO,CAAEA,CAAA,GAAM3F,mBAAmB,CAAC,CAACD,gBAAgB,CAAE,CACtDJ,QAAQ,CAAEA,QAAS,CAAA6F,QAAA,CAElB3F,UAAU,CAAG,aAAa,CAAG,eAAe,CACvC,CAAC,CAERE,gBAAgB,eACfd,KAAA,QAAKS,SAAS,CAAC,eAAe,CAAA8F,QAAA,eAC5BzG,IAAA,CAACF,MAAM,EACL4G,OAAO,CAAC,SAAS,CACjBC,IAAI,CAAC,OAAO,CACZC,OAAO,CAAEA,CAAA,GAAM1F,WAAW,CAAC,KAAK,CAAE,CAClCN,QAAQ,CAAEA,QAAQ,EAAIE,UAAW,CAAA2F,QAAA,CAEhC/F,SAAS,CACJ,CAAC,cACTV,IAAA,CAACF,MAAM,EACL4G,OAAO,CAAC,SAAS,CACjBC,IAAI,CAAC,OAAO,CACZC,OAAO,CAAEA,CAAA,GAAM1F,WAAW,CAAC,IAAI,CAAE,CACjCN,QAAQ,CAAEA,QAAQ,EAAIE,UAAW,CAAA2F,QAAA,CAEhChG,YAAY,CACP,CAAC,EACN,CACN,EACE,CAAC,CAEV,CAEA,mBACET,IAAA,CAACF,MAAM,EACL4G,OAAO,CAAC,SAAS,CACjBC,IAAI,CAAC,OAAO,CACZC,OAAO,CAAEA,CAAA,GAAM1F,WAAW,CAAC,KAAK,CAAE,CAClCN,QAAQ,CAAEA,QAAQ,EAAIE,UAAW,CACjCH,SAAS,CAAEA,SAAU,CAAA8F,QAAA,CAEpB3F,UAAU,CAAG,aAAa,CAAGJ,SAAS,CACjC,CAAC,CAEb,CAAC,CAED,cAAe,CAAAP,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}