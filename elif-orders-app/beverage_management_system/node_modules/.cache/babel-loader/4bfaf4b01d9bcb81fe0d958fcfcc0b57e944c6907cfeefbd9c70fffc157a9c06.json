{"ast":null,"code":"var _jsxFileName = \"/home/el-ifran/WareHouse_Manager/beverage_management_system/src/pages/PrinterSettings.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport Button from '../components/Button';\nimport Table from '../components/Table';\nimport './PrinterSettings.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PrinterSettings = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [printers, setPrinters] = useState([]);\n  const [selectedPrinter, setSelectedPrinter] = useState(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'network',\n    // network, local, usb\n    ip_address: '',\n    port: '9100',\n    model: '',\n    location: '',\n    is_default: false,\n    is_active: true\n  });\n  const [availablePrinters, setAvailablePrinters] = useState([]);\n  const [detectingPrinters, setDetectingPrinters] = useState(false);\n  useEffect(() => {\n    if (user && user.role === 'admin') {\n      fetchPrinters();\n    }\n  }, [user]);\n  const fetchPrinters = async () => {\n    try {\n      setLoading(true);\n      // For now, we'll simulate printer data since we don't have a backend endpoint\n      // In a real implementation, this would call an API endpoint\n      const mockPrinters = [{\n        id: 1,\n        name: 'Office Printer HP',\n        type: 'network',\n        ip_address: '192.168.1.100',\n        port: '9100',\n        model: 'HP LaserJet Pro',\n        location: 'Office',\n        is_default: true,\n        is_active: true,\n        status: 'online',\n        last_used: new Date().toISOString()\n      }, {\n        id: 2,\n        name: 'Receipt Printer',\n        type: 'usb',\n        ip_address: '',\n        port: '',\n        model: 'Epson TM-T20',\n        location: 'Cash Register',\n        is_default: false,\n        is_active: true,\n        status: 'online',\n        last_used: new Date(Date.now() - 3600000).toISOString()\n      }, {\n        id: 3,\n        name: 'Warehouse Printer',\n        type: 'network',\n        ip_address: '192.168.1.101',\n        port: '9100',\n        model: 'Canon PIXMA',\n        location: 'Warehouse',\n        is_default: false,\n        is_active: false,\n        status: 'offline',\n        last_used: new Date(Date.now() - 86400000).toISOString()\n      }];\n      setPrinters(mockPrinters);\n      setSelectedPrinter(mockPrinters.find(p => p.is_default) || mockPrinters[0]);\n    } catch (err) {\n      setError('Failed to fetch printers');\n      console.error('Fetch printers error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAddPrinter = async () => {\n    try {\n      // In a real implementation, this would call an API endpoint\n      const newPrinter = {\n        id: Date.now(),\n        ...formData,\n        status: 'online',\n        last_used: new Date().toISOString()\n      };\n      setPrinters(prev => [...prev, newPrinter]);\n      setShowAddModal(false);\n      setFormData({\n        name: '',\n        type: 'network',\n        ip_address: '',\n        port: '9100',\n        model: '',\n        location: '',\n        is_default: false,\n        is_active: true\n      });\n    } catch (err) {\n      setError('Failed to add printer');\n      console.error('Add printer error:', err);\n    }\n  };\n  const handleUpdatePrinter = async (printerId, updates) => {\n    try {\n      setPrinters(prev => prev.map(printer => printer.id === printerId ? {\n        ...printer,\n        ...updates\n      } : printer));\n    } catch (err) {\n      setError('Failed to update printer');\n      console.error('Update printer error:', err);\n    }\n  };\n  const handleDeletePrinter = async printerId => {\n    if (window.confirm('Are you sure you want to delete this printer?')) {\n      try {\n        setPrinters(prev => prev.filter(printer => printer.id !== printerId));\n        if (selectedPrinter && selectedPrinter.id === printerId) {\n          setSelectedPrinter(printers.find(p => p.id !== printerId) || null);\n        }\n      } catch (err) {\n        setError('Failed to delete printer');\n        console.error('Delete printer error:', err);\n      }\n    }\n  };\n  const handleTestPrint = async printer => {\n    try {\n      // Create a test print document\n      const testContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>Printer Test</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; }\n            .info { margin: 20px 0; }\n            .success { color: green; font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Printer Test Document</h1>\n          </div>\n          <div class=\"info\">\n            <p><strong>Printer:</strong> ${printer.name}</p>\n            <p><strong>Type:</strong> ${printer.type}</p>\n            <p><strong>Model:</strong> ${printer.model}</p>\n            <p><strong>Location:</strong> ${printer.location}</p>\n            <p><strong>Test Date:</strong> ${new Date().toLocaleString()}</p>\n          </div>\n          <div class=\"success\">\n            <p>âœ… Printer test successful!</p>\n            <p>This document was sent to: ${printer.name}</p>\n          </div>\n        </body>\n        </html>\n      `;\n      const printWindow = window.open('', '_blank', 'width=600,height=400');\n      printWindow.document.write(testContent);\n      printWindow.document.close();\n      printWindow.onload = () => {\n        printWindow.focus();\n        printWindow.print();\n        printWindow.close();\n      };\n\n      // Update last used time\n      handleUpdatePrinter(printer.id, {\n        last_used: new Date().toISOString()\n      });\n    } catch (err) {\n      setError('Failed to test print');\n      console.error('Test print error:', err);\n    }\n  };\n  const detectSystemPrinters = async () => {\n    try {\n      setDetectingPrinters(true);\n\n      // Use the Web API to detect available printers\n      if ('navigator' in window && 'serviceWorker' in navigator) {\n        // Try to use the Web Printing API if available\n        try {\n          const printJob = await navigator.serviceWorker.ready;\n          // This is a placeholder - actual implementation would depend on browser support\n          console.log('Web Printing API available');\n        } catch (e) {\n          console.log('Web Printing API not available');\n        }\n      }\n\n      // For now, we'll simulate system printer detection\n      // In a real implementation, this would use system APIs or backend services\n      const systemPrinters = [{\n        name: 'Microsoft Print to PDF',\n        type: 'local',\n        model: 'PDF Printer',\n        location: 'Local System',\n        is_system: true\n      }, {\n        name: 'HP LaserJet Pro (Default)',\n        type: 'local',\n        model: 'HP LaserJet Pro',\n        location: 'Local System',\n        is_system: true\n      }, {\n        name: 'Canon PIXMA G3110',\n        type: 'usb',\n        model: 'Canon PIXMA G3110',\n        location: 'USB Port',\n        is_system: true\n      }, {\n        name: 'EPSON L3150',\n        type: 'network',\n        model: 'EPSON L3150',\n        ip_address: '192.168.1.150',\n        port: '9100',\n        location: 'Network',\n        is_system: true\n      }];\n      setAvailablePrinters(systemPrinters);\n\n      // Also try to detect network printers\n      await detectNetworkPrinters();\n    } catch (err) {\n      console.error('System printer detection error:', err);\n      setError('Failed to detect system printers');\n    } finally {\n      setDetectingPrinters(false);\n    }\n  };\n  const detectNetworkPrinters = async () => {\n    try {\n      // Simulate network printer detection\n      const networkPrinters = [{\n        name: 'Office Printer HP',\n        type: 'network',\n        model: 'HP LaserJet Pro',\n        ip_address: '192.168.1.100',\n        port: '9100',\n        location: 'Office Network',\n        is_system: true\n      }, {\n        name: 'Reception Canon',\n        type: 'network',\n        model: 'Canon PIXMA',\n        ip_address: '192.168.1.101',\n        port: '9100',\n        location: 'Reception Network',\n        is_system: true\n      }];\n      setAvailablePrinters(prev => [...prev, ...networkPrinters]);\n    } catch (err) {\n      console.error('Network printer detection error:', err);\n    }\n  };\n  const scanForPrinters = async () => {\n    try {\n      setLoading(true);\n      await detectSystemPrinters();\n      alert(`Found ${availablePrinters.length} available printer(s) on the system`);\n    } catch (err) {\n      setError('Failed to scan for printers');\n      console.error('Scan printers error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const printerColumns = [{\n    key: 'name',\n    label: 'Name'\n  }, {\n    key: 'type',\n    label: 'Type'\n  }, {\n    key: 'model',\n    label: 'Model'\n  }, {\n    key: 'location',\n    label: 'Location'\n  }, {\n    key: 'status',\n    label: 'Status',\n    render: value => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `status-badge ${value}`,\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)\n  }, {\n    key: 'is_default',\n    label: 'Default',\n    render: value => value ? 'Yes' : 'No'\n  }, {\n    key: 'is_active',\n    label: 'Active',\n    render: value => value ? 'Yes' : 'No'\n  }, {\n    key: 'actions',\n    label: 'Actions',\n    render: (_, item) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        variant: \"outline\",\n        onClick: () => handleTestPrint(item),\n        children: \"Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        variant: \"outline\",\n        onClick: () => {\n          setFormData({\n            name: item.name,\n            type: item.type,\n            ip_address: item.ip_address,\n            port: item.port,\n            model: item.model,\n            location: item.location,\n            is_default: item.is_default,\n            is_active: item.is_active\n          });\n          setShowAddModal(true);\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        variant: \"danger\",\n        onClick: () => handleDeletePrinter(item.id),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this)\n  }];\n  if ((user === null || user === void 0 ? void 0 : user.role) !== 'admin') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"printer-settings\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"access-denied\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Access Denied\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You don't have permission to access printer settings.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"printer-settings\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Printer Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Manage network and local printers for the system\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [error, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(''),\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"printer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-group\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setShowAddModal(true),\n          children: \"Add Printer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline\",\n          onClick: scanForPrinters,\n          disabled: loading,\n          children: loading ? 'Scanning...' : 'Scan Network'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-printer\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Default Printer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: (selectedPrinter === null || selectedPrinter === void 0 ? void 0 : selectedPrinter.id) || '',\n          onChange: e => {\n            const printer = printers.find(p => p.id === parseInt(e.target.value));\n            setSelectedPrinter(printer);\n            if (printer) {\n              handleUpdatePrinter(printer.id, {\n                is_default: true\n              });\n              // Remove default from other printers\n              printers.forEach(p => {\n                if (p.id !== printer.id && p.is_default) {\n                  handleUpdatePrinter(p.id, {\n                    is_default: false\n                  });\n                }\n              });\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Default Printer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this), printers.filter(p => p.is_active).map(printer => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: printer.id,\n            children: [printer.name, \" (\", printer.location, \")\"]\n          }, printer.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      data: printers,\n      columns: printerColumns,\n      loading: loading,\n      emptyMessage: \"No printers found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), showAddModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Add/Edit Printer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowAddModal(false),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Printer Name:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 437,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: formData.name,\n              onChange: e => setFormData({\n                ...formData,\n                name: e.target.value\n              }),\n              placeholder: \"Enter printer name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: formData.type,\n              onChange: e => setFormData({\n                ...formData,\n                type: e.target.value\n              }),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"network\",\n                children: \"Network Printer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"usb\",\n                children: \"USB Printer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"local\",\n                children: \"Local Printer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 15\n          }, this), formData.type === 'network' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"IP Address:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: formData.ip_address,\n                onChange: e => setFormData({\n                  ...formData,\n                  ip_address: e.target.value\n                }),\n                placeholder: \"192.168.1.100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Port:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: formData.port,\n                onChange: e => setFormData({\n                  ...formData,\n                  port: e.target.value\n                }),\n                placeholder: \"9100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Model:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: formData.model,\n              onChange: e => setFormData({\n                ...formData,\n                model: e.target.value\n              }),\n              placeholder: \"Enter printer model\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Location:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: formData.location,\n              onChange: e => setFormData({\n                ...formData,\n                location: e.target.value\n              }),\n              placeholder: \"Enter printer location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group checkbox-group\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: formData.is_default,\n                onChange: e => setFormData({\n                  ...formData,\n                  is_default: e.target.checked\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 19\n              }, this), \"Set as default printer\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group checkbox-group\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: formData.is_active,\n                onChange: e => setFormData({\n                  ...formData,\n                  is_active: e.target.checked\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 19\n              }, this), \"Active\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-footer\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline\",\n            onClick: () => setShowAddModal(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleAddPrinter,\n            children: \"Save Printer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 5\n  }, this);\n};\n_s(PrinterSettings, \"9ewdG4NsR2LaXA97H96af0ZkSOw=\", false, function () {\n  return [useAuth];\n});\n_c = PrinterSettings;\nexport default PrinterSettings;\nvar _c;\n$RefreshReg$(_c, \"PrinterSettings\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","Button","Table","jsxDEV","_jsxDEV","Fragment","_Fragment","PrinterSettings","_s","user","loading","setLoading","error","setError","printers","setPrinters","selectedPrinter","setSelectedPrinter","showAddModal","setShowAddModal","formData","setFormData","name","type","ip_address","port","model","location","is_default","is_active","availablePrinters","setAvailablePrinters","detectingPrinters","setDetectingPrinters","role","fetchPrinters","mockPrinters","id","status","last_used","Date","toISOString","now","find","p","err","console","handleAddPrinter","newPrinter","prev","handleUpdatePrinter","printerId","updates","map","printer","handleDeletePrinter","window","confirm","filter","handleTestPrint","testContent","toLocaleString","printWindow","open","document","write","close","onload","focus","print","detectSystemPrinters","navigator","printJob","serviceWorker","ready","log","e","systemPrinters","is_system","detectNetworkPrinters","networkPrinters","scanForPrinters","alert","length","printerColumns","key","label","render","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_","item","size","variant","onClick","disabled","onChange","parseInt","target","forEach","data","columns","emptyMessage","placeholder","checked","_c","$RefreshReg$"],"sources":["/home/el-ifran/WareHouse_Manager/beverage_management_system/src/pages/PrinterSettings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport Button from '../components/Button';\nimport Table from '../components/Table';\nimport './PrinterSettings.css';\n\nconst PrinterSettings = () => {\n  const { user } = useAuth();\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [printers, setPrinters] = useState([]);\n  const [selectedPrinter, setSelectedPrinter] = useState(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'network', // network, local, usb\n    ip_address: '',\n    port: '9100',\n    model: '',\n    location: '',\n    is_default: false,\n    is_active: true\n  });\n  const [availablePrinters, setAvailablePrinters] = useState([]);\n  const [detectingPrinters, setDetectingPrinters] = useState(false);\n\n  useEffect(() => {\n    if (user && user.role === 'admin') {\n      fetchPrinters();\n    }\n  }, [user]);\n\n  const fetchPrinters = async () => {\n    try {\n      setLoading(true);\n      // For now, we'll simulate printer data since we don't have a backend endpoint\n      // In a real implementation, this would call an API endpoint\n      const mockPrinters = [\n        {\n          id: 1,\n          name: 'Office Printer HP',\n          type: 'network',\n          ip_address: '192.168.1.100',\n          port: '9100',\n          model: 'HP LaserJet Pro',\n          location: 'Office',\n          is_default: true,\n          is_active: true,\n          status: 'online',\n          last_used: new Date().toISOString()\n        },\n        {\n          id: 2,\n          name: 'Receipt Printer',\n          type: 'usb',\n          ip_address: '',\n          port: '',\n          model: 'Epson TM-T20',\n          location: 'Cash Register',\n          is_default: false,\n          is_active: true,\n          status: 'online',\n          last_used: new Date(Date.now() - 3600000).toISOString()\n        },\n        {\n          id: 3,\n          name: 'Warehouse Printer',\n          type: 'network',\n          ip_address: '192.168.1.101',\n          port: '9100',\n          model: 'Canon PIXMA',\n          location: 'Warehouse',\n          is_default: false,\n          is_active: false,\n          status: 'offline',\n          last_used: new Date(Date.now() - 86400000).toISOString()\n        }\n      ];\n      \n      setPrinters(mockPrinters);\n      setSelectedPrinter(mockPrinters.find(p => p.is_default) || mockPrinters[0]);\n    } catch (err) {\n      setError('Failed to fetch printers');\n      console.error('Fetch printers error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddPrinter = async () => {\n    try {\n      // In a real implementation, this would call an API endpoint\n      const newPrinter = {\n        id: Date.now(),\n        ...formData,\n        status: 'online',\n        last_used: new Date().toISOString()\n      };\n      \n      setPrinters(prev => [...prev, newPrinter]);\n      setShowAddModal(false);\n      setFormData({\n        name: '',\n        type: 'network',\n        ip_address: '',\n        port: '9100',\n        model: '',\n        location: '',\n        is_default: false,\n        is_active: true\n      });\n    } catch (err) {\n      setError('Failed to add printer');\n      console.error('Add printer error:', err);\n    }\n  };\n\n  const handleUpdatePrinter = async (printerId, updates) => {\n    try {\n      setPrinters(prev => prev.map(printer => \n        printer.id === printerId ? { ...printer, ...updates } : printer\n      ));\n    } catch (err) {\n      setError('Failed to update printer');\n      console.error('Update printer error:', err);\n    }\n  };\n\n  const handleDeletePrinter = async (printerId) => {\n    if (window.confirm('Are you sure you want to delete this printer?')) {\n      try {\n        setPrinters(prev => prev.filter(printer => printer.id !== printerId));\n        if (selectedPrinter && selectedPrinter.id === printerId) {\n          setSelectedPrinter(printers.find(p => p.id !== printerId) || null);\n        }\n      } catch (err) {\n        setError('Failed to delete printer');\n        console.error('Delete printer error:', err);\n      }\n    }\n  };\n\n  const handleTestPrint = async (printer) => {\n    try {\n      // Create a test print document\n      const testContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>Printer Test</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; }\n            .info { margin: 20px 0; }\n            .success { color: green; font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Printer Test Document</h1>\n          </div>\n          <div class=\"info\">\n            <p><strong>Printer:</strong> ${printer.name}</p>\n            <p><strong>Type:</strong> ${printer.type}</p>\n            <p><strong>Model:</strong> ${printer.model}</p>\n            <p><strong>Location:</strong> ${printer.location}</p>\n            <p><strong>Test Date:</strong> ${new Date().toLocaleString()}</p>\n          </div>\n          <div class=\"success\">\n            <p>âœ… Printer test successful!</p>\n            <p>This document was sent to: ${printer.name}</p>\n          </div>\n        </body>\n        </html>\n      `;\n      \n      const printWindow = window.open('', '_blank', 'width=600,height=400');\n      printWindow.document.write(testContent);\n      printWindow.document.close();\n      \n      printWindow.onload = () => {\n        printWindow.focus();\n        printWindow.print();\n        printWindow.close();\n      };\n      \n      // Update last used time\n      handleUpdatePrinter(printer.id, { last_used: new Date().toISOString() });\n      \n    } catch (err) {\n      setError('Failed to test print');\n      console.error('Test print error:', err);\n    }\n  };\n\n  const detectSystemPrinters = async () => {\n    try {\n      setDetectingPrinters(true);\n      \n      // Use the Web API to detect available printers\n      if ('navigator' in window && 'serviceWorker' in navigator) {\n        // Try to use the Web Printing API if available\n        try {\n          const printJob = await navigator.serviceWorker.ready;\n          // This is a placeholder - actual implementation would depend on browser support\n          console.log('Web Printing API available');\n        } catch (e) {\n          console.log('Web Printing API not available');\n        }\n      }\n      \n      // For now, we'll simulate system printer detection\n      // In a real implementation, this would use system APIs or backend services\n      const systemPrinters = [\n        {\n          name: 'Microsoft Print to PDF',\n          type: 'local',\n          model: 'PDF Printer',\n          location: 'Local System',\n          is_system: true\n        },\n        {\n          name: 'HP LaserJet Pro (Default)',\n          type: 'local',\n          model: 'HP LaserJet Pro',\n          location: 'Local System',\n          is_system: true\n        },\n        {\n          name: 'Canon PIXMA G3110',\n          type: 'usb',\n          model: 'Canon PIXMA G3110',\n          location: 'USB Port',\n          is_system: true\n        },\n        {\n          name: 'EPSON L3150',\n          type: 'network',\n          model: 'EPSON L3150',\n          ip_address: '192.168.1.150',\n          port: '9100',\n          location: 'Network',\n          is_system: true\n        }\n      ];\n      \n      setAvailablePrinters(systemPrinters);\n      \n      // Also try to detect network printers\n      await detectNetworkPrinters();\n      \n    } catch (err) {\n      console.error('System printer detection error:', err);\n      setError('Failed to detect system printers');\n    } finally {\n      setDetectingPrinters(false);\n    }\n  };\n\n  const detectNetworkPrinters = async () => {\n    try {\n      // Simulate network printer detection\n      const networkPrinters = [\n        {\n          name: 'Office Printer HP',\n          type: 'network',\n          model: 'HP LaserJet Pro',\n          ip_address: '192.168.1.100',\n          port: '9100',\n          location: 'Office Network',\n          is_system: true\n        },\n        {\n          name: 'Reception Canon',\n          type: 'network',\n          model: 'Canon PIXMA',\n          ip_address: '192.168.1.101',\n          port: '9100',\n          location: 'Reception Network',\n          is_system: true\n        }\n      ];\n      \n      setAvailablePrinters(prev => [...prev, ...networkPrinters]);\n    } catch (err) {\n      console.error('Network printer detection error:', err);\n    }\n  };\n\n  const scanForPrinters = async () => {\n    try {\n      setLoading(true);\n      await detectSystemPrinters();\n      alert(`Found ${availablePrinters.length} available printer(s) on the system`);\n    } catch (err) {\n      setError('Failed to scan for printers');\n      console.error('Scan printers error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const printerColumns = [\n    { key: 'name', label: 'Name' },\n    { key: 'type', label: 'Type' },\n    { key: 'model', label: 'Model' },\n    { key: 'location', label: 'Location' },\n    { key: 'status', label: 'Status', render: (value) => (\n      <span className={`status-badge ${value}`}>{value}</span>\n    )},\n    { key: 'is_default', label: 'Default', render: (value) => value ? 'Yes' : 'No' },\n    { key: 'is_active', label: 'Active', render: (value) => value ? 'Yes' : 'No' },\n    { \n      key: 'actions', \n      label: 'Actions', \n      render: (_, item) => (\n        <div className=\"action-buttons\">\n          <Button \n            size=\"small\" \n            variant=\"outline\" \n            onClick={() => handleTestPrint(item)}\n          >\n            Test\n          </Button>\n          <Button \n            size=\"small\" \n            variant=\"outline\" \n            onClick={() => {\n              setFormData({\n                name: item.name,\n                type: item.type,\n                ip_address: item.ip_address,\n                port: item.port,\n                model: item.model,\n                location: item.location,\n                is_default: item.is_default,\n                is_active: item.is_active\n              });\n              setShowAddModal(true);\n            }}\n          >\n            Edit\n          </Button>\n          <Button \n            size=\"small\" \n            variant=\"danger\" \n            onClick={() => handleDeletePrinter(item.id)}\n          >\n            Delete\n          </Button>\n        </div>\n      )\n    }\n  ];\n\n  if (user?.role !== 'admin') {\n    return (\n      <div className=\"printer-settings\">\n        <div className=\"access-denied\">\n          <h2>Access Denied</h2>\n          <p>You don't have permission to access printer settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"printer-settings\">\n      <div className=\"page-header\">\n        <h1>Printer Settings</h1>\n        <p>Manage network and local printers for the system</p>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n          <button onClick={() => setError('')}>Ã—</button>\n        </div>\n      )}\n\n      <div className=\"printer-controls\">\n        <div className=\"control-group\">\n          <Button onClick={() => setShowAddModal(true)}>\n            Add Printer\n          </Button>\n          <Button variant=\"outline\" onClick={scanForPrinters} disabled={loading}>\n            {loading ? 'Scanning...' : 'Scan Network'}\n          </Button>\n        </div>\n        \n        <div className=\"selected-printer\">\n          <label>Default Printer:</label>\n          <select \n            value={selectedPrinter?.id || ''} \n            onChange={(e) => {\n              const printer = printers.find(p => p.id === parseInt(e.target.value));\n              setSelectedPrinter(printer);\n              if (printer) {\n                handleUpdatePrinter(printer.id, { is_default: true });\n                // Remove default from other printers\n                printers.forEach(p => {\n                  if (p.id !== printer.id && p.is_default) {\n                    handleUpdatePrinter(p.id, { is_default: false });\n                  }\n                });\n              }\n            }}\n          >\n            <option value=\"\">Select Default Printer</option>\n            {printers.filter(p => p.is_active).map(printer => (\n              <option key={printer.id} value={printer.id}>\n                {printer.name} ({printer.location})\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <Table\n        data={printers}\n        columns={printerColumns}\n        loading={loading}\n        emptyMessage=\"No printers found\"\n      />\n\n      {/* Add/Edit Printer Modal */}\n      {showAddModal && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <div className=\"modal-header\">\n              <h3>Add/Edit Printer</h3>\n              <button onClick={() => setShowAddModal(false)}>Ã—</button>\n            </div>\n            <div className=\"modal-body\">\n              <div className=\"form-group\">\n                <label>Printer Name:</label>\n                <input\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  placeholder=\"Enter printer name\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Type:</label>\n                <select\n                  value={formData.type}\n                  onChange={(e) => setFormData({...formData, type: e.target.value})}\n                >\n                  <option value=\"network\">Network Printer</option>\n                  <option value=\"usb\">USB Printer</option>\n                  <option value=\"local\">Local Printer</option>\n                </select>\n              </div>\n              \n              {formData.type === 'network' && (\n                <>\n                  <div className=\"form-group\">\n                    <label>IP Address:</label>\n                    <input\n                      type=\"text\"\n                      value={formData.ip_address}\n                      onChange={(e) => setFormData({...formData, ip_address: e.target.value})}\n                      placeholder=\"192.168.1.100\"\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Port:</label>\n                    <input\n                      type=\"text\"\n                      value={formData.port}\n                      onChange={(e) => setFormData({...formData, port: e.target.value})}\n                      placeholder=\"9100\"\n                    />\n                  </div>\n                </>\n              )}\n              \n              <div className=\"form-group\">\n                <label>Model:</label>\n                <input\n                  type=\"text\"\n                  value={formData.model}\n                  onChange={(e) => setFormData({...formData, model: e.target.value})}\n                  placeholder=\"Enter printer model\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Location:</label>\n                <input\n                  type=\"text\"\n                  value={formData.location}\n                  onChange={(e) => setFormData({...formData, location: e.target.value})}\n                  placeholder=\"Enter printer location\"\n                />\n              </div>\n              \n              <div className=\"form-group checkbox-group\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.is_default}\n                    onChange={(e) => setFormData({...formData, is_default: e.target.checked})}\n                  />\n                  Set as default printer\n                </label>\n              </div>\n              \n              <div className=\"form-group checkbox-group\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.is_active}\n                    onChange={(e) => setFormData({...formData, is_active: e.target.checked})}\n                  />\n                  Active\n                </label>\n              </div>\n            </div>\n            <div className=\"modal-footer\">\n              <Button variant=\"outline\" onClick={() => setShowAddModal(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleAddPrinter}>\n                Save Printer\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PrinterSettings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}