{"ast":null,"code":"import _objectSpread from\"/home/el-ifran/WareHouse_Manager/beverage_management_system/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{useAuth}from'../contexts/AuthContext';import Button from'../components/Button';import Table from'../components/Table';import'./PrinterSettings.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const PrinterSettings=()=>{const{user}=useAuth();const[loading,setLoading]=useState(true);const[error,setError]=useState('');const[printers,setPrinters]=useState([]);const[selectedPrinter,setSelectedPrinter]=useState(null);const[showAddModal,setShowAddModal]=useState(false);const[formData,setFormData]=useState({name:'',type:'network',// network, local, usb\nip_address:'',port:'9100',model:'',location:'',is_default:false,is_active:true});const[availablePrinters,setAvailablePrinters]=useState([]);const[detectingPrinters,setDetectingPrinters]=useState(false);useEffect(()=>{if(user&&user.role==='admin'){fetchPrinters();}},[user]);const fetchPrinters=async()=>{try{setLoading(true);// For now, we'll simulate printer data since we don't have a backend endpoint\n// In a real implementation, this would call an API endpoint\nconst mockPrinters=[{id:1,name:'Office Printer HP',type:'network',ip_address:'192.168.1.100',port:'9100',model:'HP LaserJet Pro',location:'Office',is_default:true,is_active:true,status:'online',last_used:new Date().toISOString()},{id:2,name:'Receipt Printer',type:'usb',ip_address:'',port:'',model:'Epson TM-T20',location:'Cash Register',is_default:false,is_active:true,status:'online',last_used:new Date(Date.now()-3600000).toISOString()},{id:3,name:'Warehouse Printer',type:'network',ip_address:'192.168.1.101',port:'9100',model:'Canon PIXMA',location:'Warehouse',is_default:false,is_active:false,status:'offline',last_used:new Date(Date.now()-86400000).toISOString()}];setPrinters(mockPrinters);setSelectedPrinter(mockPrinters.find(p=>p.is_default)||mockPrinters[0]);}catch(err){setError('Failed to fetch printers');console.error('Fetch printers error:',err);}finally{setLoading(false);}};const handleAddPrinter=async()=>{try{// In a real implementation, this would call an API endpoint\nconst newPrinter=_objectSpread(_objectSpread({id:Date.now()},formData),{},{status:'online',last_used:new Date().toISOString()});setPrinters(prev=>[...prev,newPrinter]);setShowAddModal(false);setFormData({name:'',type:'network',ip_address:'',port:'9100',model:'',location:'',is_default:false,is_active:true});}catch(err){setError('Failed to add printer');console.error('Add printer error:',err);}};const handleAddSystemPrinter=systemPrinter=>{const newPrinter={id:Date.now(),name:systemPrinter.name,type:systemPrinter.type,ip_address:systemPrinter.ip_address||'',port:systemPrinter.port||'9100',model:systemPrinter.model,location:systemPrinter.location,is_default:false,is_active:true,status:'online',last_used:new Date().toISOString()};setPrinters(prev=>[...prev,newPrinter]);// Remove from available printers\nsetAvailablePrinters(prev=>prev.filter(p=>p.name!==systemPrinter.name));alert(\"Added \".concat(systemPrinter.name,\" to your printer list\"));};const handleUpdatePrinter=async(printerId,updates)=>{try{setPrinters(prev=>prev.map(printer=>printer.id===printerId?_objectSpread(_objectSpread({},printer),updates):printer));}catch(err){setError('Failed to update printer');console.error('Update printer error:',err);}};const handleDeletePrinter=async printerId=>{if(window.confirm('Are you sure you want to delete this printer?')){try{setPrinters(prev=>prev.filter(printer=>printer.id!==printerId));if(selectedPrinter&&selectedPrinter.id===printerId){setSelectedPrinter(printers.find(p=>p.id!==printerId)||null);}}catch(err){setError('Failed to delete printer');console.error('Delete printer error:',err);}}};const handleTestPrint=async printer=>{try{// Create a test print document\nconst testContent=\"\\n        <!DOCTYPE html>\\n        <html>\\n        <head>\\n          <title>Printer Test</title>\\n          <style>\\n            body { font-family: Arial, sans-serif; margin: 20px; }\\n            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; }\\n            .info { margin: 20px 0; }\\n            .success { color: green; font-weight: bold; }\\n          </style>\\n        </head>\\n        <body>\\n          <div class=\\\"header\\\">\\n            <h1>Printer Test Document</h1>\\n          </div>\\n          <div class=\\\"info\\\">\\n            <p><strong>Printer:</strong> \".concat(printer.name,\"</p>\\n            <p><strong>Type:</strong> \").concat(printer.type,\"</p>\\n            <p><strong>Model:</strong> \").concat(printer.model,\"</p>\\n            <p><strong>Location:</strong> \").concat(printer.location,\"</p>\\n            <p><strong>Test Date:</strong> \").concat(new Date().toLocaleString(),\"</p>\\n          </div>\\n          <div class=\\\"success\\\">\\n            <p>\\u2705 Printer test successful!</p>\\n            <p>This document was sent to: \").concat(printer.name,\"</p>\\n          </div>\\n        </body>\\n        </html>\\n      \");const printWindow=window.open('','_blank','width=600,height=400');printWindow.document.write(testContent);printWindow.document.close();printWindow.onload=()=>{printWindow.focus();printWindow.print();printWindow.close();};// Update last used time\nhandleUpdatePrinter(printer.id,{last_used:new Date().toISOString()});}catch(err){setError('Failed to test print');console.error('Test print error:',err);}};const detectSystemPrinters=async()=>{try{setDetectingPrinters(true);// Use the Web API to detect available printers\nif('navigator'in window&&'serviceWorker'in navigator){// Try to use the Web Printing API if available\ntry{const printJob=await navigator.serviceWorker.ready;// This is a placeholder - actual implementation would depend on browser support\nconsole.log('Web Printing API available');}catch(e){console.log('Web Printing API not available');}}// For now, we'll simulate system printer detection\n// In a real implementation, this would use system APIs or backend services\nconst systemPrinters=[{name:'Microsoft Print to PDF',type:'local',model:'PDF Printer',location:'Local System',is_system:true},{name:'HP LaserJet Pro (Default)',type:'local',model:'HP LaserJet Pro',location:'Local System',is_system:true},{name:'Canon PIXMA G3110',type:'usb',model:'Canon PIXMA G3110',location:'USB Port',is_system:true},{name:'EPSON L3150',type:'network',model:'EPSON L3150',ip_address:'192.168.1.150',port:'9100',location:'Network',is_system:true}];setAvailablePrinters(systemPrinters);// Also try to detect network printers\nawait detectNetworkPrinters();}catch(err){console.error('System printer detection error:',err);setError('Failed to detect system printers');}finally{setDetectingPrinters(false);}};const detectNetworkPrinters=async()=>{try{// Simulate network printer detection\nconst networkPrinters=[{name:'Office Printer HP',type:'network',model:'HP LaserJet Pro',ip_address:'192.168.1.100',port:'9100',location:'Office Network',is_system:true},{name:'Reception Canon',type:'network',model:'Canon PIXMA',ip_address:'192.168.1.101',port:'9100',location:'Reception Network',is_system:true}];setAvailablePrinters(prev=>[...prev,...networkPrinters]);}catch(err){console.error('Network printer detection error:',err);}};const scanForPrinters=async()=>{try{setLoading(true);await detectSystemPrinters();alert(\"Found \".concat(availablePrinters.length,\" available printer(s) on the system\"));}catch(err){setError('Failed to scan for printers');console.error('Scan printers error:',err);}finally{setLoading(false);}};const printerColumns=[{key:'name',label:'Name'},{key:'type',label:'Type'},{key:'model',label:'Model'},{key:'location',label:'Location'},{key:'status',label:'Status',render:value=>/*#__PURE__*/_jsx(\"span\",{className:\"status-badge \".concat(value),children:value})},{key:'is_default',label:'Default',render:value=>value?'Yes':'No'},{key:'is_active',label:'Active',render:value=>value?'Yes':'No'},{key:'actions',label:'Actions',render:(_,item)=>/*#__PURE__*/_jsxs(\"div\",{className:\"action-buttons\",children:[/*#__PURE__*/_jsx(Button,{size:\"small\",variant:\"outline\",onClick:()=>handleTestPrint(item),children:\"Test\"}),/*#__PURE__*/_jsx(Button,{size:\"small\",variant:\"outline\",onClick:()=>{setFormData({name:item.name,type:item.type,ip_address:item.ip_address,port:item.port,model:item.model,location:item.location,is_default:item.is_default,is_active:item.is_active});setShowAddModal(true);},children:\"Edit\"}),/*#__PURE__*/_jsx(Button,{size:\"small\",variant:\"danger\",onClick:()=>handleDeletePrinter(item.id),children:\"Delete\"})]})}];if((user===null||user===void 0?void 0:user.role)!=='admin'){return/*#__PURE__*/_jsx(\"div\",{className:\"printer-settings\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"access-denied\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Access Denied\"}),/*#__PURE__*/_jsx(\"p\",{children:\"You don't have permission to access printer settings.\"})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"printer-settings\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"page-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Printer Settings\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Manage network and local printers for the system\"})]}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[error,/*#__PURE__*/_jsx(\"button\",{onClick:()=>setError(''),children:\"\\xD7\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"printer-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"control-group\",children:[/*#__PURE__*/_jsx(Button,{onClick:()=>{setShowAddModal(true);detectSystemPrinters();},children:\"Add Printer\"}),/*#__PURE__*/_jsx(Button,{variant:\"outline\",onClick:scanForPrinters,disabled:loading,children:loading?'Scanning...':'Scan Network'})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"selected-printer\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Default Printer:\"}),/*#__PURE__*/_jsxs(\"select\",{value:(selectedPrinter===null||selectedPrinter===void 0?void 0:selectedPrinter.id)||'',onChange:e=>{const printer=printers.find(p=>p.id===parseInt(e.target.value));setSelectedPrinter(printer);if(printer){handleUpdatePrinter(printer.id,{is_default:true});// Remove default from other printers\nprinters.forEach(p=>{if(p.id!==printer.id&&p.is_default){handleUpdatePrinter(p.id,{is_default:false});}});}},children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Default Printer\"}),printers.filter(p=>p.is_active).map(printer=>/*#__PURE__*/_jsxs(\"option\",{value:printer.id,children:[printer.name,\" (\",printer.location,\")\"]},printer.id))]})]})]}),/*#__PURE__*/_jsx(Table,{data:printers,columns:printerColumns,loading:loading,emptyMessage:\"No printers found\"}),showAddModal&&/*#__PURE__*/_jsx(\"div\",{className:\"modal-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"modal\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"modal-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Add/Edit Printer\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setShowAddModal(false),children:\"\\xD7\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-body\",children:[availablePrinters.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"available-printers-section\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Available System Printers\"}),/*#__PURE__*/_jsx(\"div\",{className:\"available-printers-list\",children:availablePrinters.map((printer,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"available-printer-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"printer-info\",children:[/*#__PURE__*/_jsx(\"strong\",{children:printer.name}),/*#__PURE__*/_jsx(\"span\",{className:\"printer-type\",children:printer.type.toUpperCase()}),/*#__PURE__*/_jsx(\"span\",{className:\"printer-model\",children:printer.model}),/*#__PURE__*/_jsx(\"span\",{className:\"printer-location\",children:printer.location}),printer.ip_address&&/*#__PURE__*/_jsxs(\"span\",{className:\"printer-ip\",children:[printer.ip_address,\":\",printer.port]})]}),/*#__PURE__*/_jsx(Button,{size:\"small\",onClick:()=>handleAddSystemPrinter(printer),children:\"Add to List\"})]},index))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-divider\",children:/*#__PURE__*/_jsx(\"span\",{children:\"Or Add Manually\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Printer Name:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:formData.name,onChange:e=>setFormData(_objectSpread(_objectSpread({},formData),{},{name:e.target.value})),placeholder:\"Enter printer name\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Type:\"}),/*#__PURE__*/_jsxs(\"select\",{value:formData.type,onChange:e=>setFormData(_objectSpread(_objectSpread({},formData),{},{type:e.target.value})),children:[/*#__PURE__*/_jsx(\"option\",{value:\"network\",children:\"Network Printer\"}),/*#__PURE__*/_jsx(\"option\",{value:\"usb\",children:\"USB Printer\"}),/*#__PURE__*/_jsx(\"option\",{value:\"local\",children:\"Local Printer\"})]})]}),formData.type==='network'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"IP Address:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:formData.ip_address,onChange:e=>setFormData(_objectSpread(_objectSpread({},formData),{},{ip_address:e.target.value})),placeholder:\"192.168.1.100\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Port:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:formData.port,onChange:e=>setFormData(_objectSpread(_objectSpread({},formData),{},{port:e.target.value})),placeholder:\"9100\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Model:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:formData.model,onChange:e=>setFormData(_objectSpread(_objectSpread({},formData),{},{model:e.target.value})),placeholder:\"Enter printer model\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Location:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:formData.location,onChange:e=>setFormData(_objectSpread(_objectSpread({},formData),{},{location:e.target.value})),placeholder:\"Enter printer location\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group checkbox-group\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:formData.is_default,onChange:e=>setFormData(_objectSpread(_objectSpread({},formData),{},{is_default:e.target.checked}))}),\"Set as default printer\"]})}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group checkbox-group\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:formData.is_active,onChange:e=>setFormData(_objectSpread(_objectSpread({},formData),{},{is_active:e.target.checked}))}),\"Active\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"modal-footer\",children:[/*#__PURE__*/_jsx(Button,{variant:\"outline\",onClick:()=>setShowAddModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{onClick:handleAddPrinter,children:\"Save Printer\"})]})]})})]});};export default PrinterSettings;","map":{"version":3,"names":["React","useState","useEffect","useAuth","Button","Table","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PrinterSettings","user","loading","setLoading","error","setError","printers","setPrinters","selectedPrinter","setSelectedPrinter","showAddModal","setShowAddModal","formData","setFormData","name","type","ip_address","port","model","location","is_default","is_active","availablePrinters","setAvailablePrinters","detectingPrinters","setDetectingPrinters","role","fetchPrinters","mockPrinters","id","status","last_used","Date","toISOString","now","find","p","err","console","handleAddPrinter","newPrinter","_objectSpread","prev","handleAddSystemPrinter","systemPrinter","filter","alert","concat","handleUpdatePrinter","printerId","updates","map","printer","handleDeletePrinter","window","confirm","handleTestPrint","testContent","toLocaleString","printWindow","open","document","write","close","onload","focus","print","detectSystemPrinters","navigator","printJob","serviceWorker","ready","log","e","systemPrinters","is_system","detectNetworkPrinters","networkPrinters","scanForPrinters","length","printerColumns","key","label","render","value","className","children","_","item","size","variant","onClick","disabled","onChange","parseInt","target","forEach","data","columns","emptyMessage","index","toUpperCase","placeholder","checked"],"sources":["/home/el-ifran/WareHouse_Manager/beverage_management_system/src/pages/PrinterSettings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport Button from '../components/Button';\nimport Table from '../components/Table';\nimport './PrinterSettings.css';\n\nconst PrinterSettings = () => {\n  const { user } = useAuth();\n  \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [printers, setPrinters] = useState([]);\n  const [selectedPrinter, setSelectedPrinter] = useState(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'network', // network, local, usb\n    ip_address: '',\n    port: '9100',\n    model: '',\n    location: '',\n    is_default: false,\n    is_active: true\n  });\n  const [availablePrinters, setAvailablePrinters] = useState([]);\n  const [detectingPrinters, setDetectingPrinters] = useState(false);\n\n  useEffect(() => {\n    if (user && user.role === 'admin') {\n      fetchPrinters();\n    }\n  }, [user]);\n\n  const fetchPrinters = async () => {\n    try {\n      setLoading(true);\n      // For now, we'll simulate printer data since we don't have a backend endpoint\n      // In a real implementation, this would call an API endpoint\n      const mockPrinters = [\n        {\n          id: 1,\n          name: 'Office Printer HP',\n          type: 'network',\n          ip_address: '192.168.1.100',\n          port: '9100',\n          model: 'HP LaserJet Pro',\n          location: 'Office',\n          is_default: true,\n          is_active: true,\n          status: 'online',\n          last_used: new Date().toISOString()\n        },\n        {\n          id: 2,\n          name: 'Receipt Printer',\n          type: 'usb',\n          ip_address: '',\n          port: '',\n          model: 'Epson TM-T20',\n          location: 'Cash Register',\n          is_default: false,\n          is_active: true,\n          status: 'online',\n          last_used: new Date(Date.now() - 3600000).toISOString()\n        },\n        {\n          id: 3,\n          name: 'Warehouse Printer',\n          type: 'network',\n          ip_address: '192.168.1.101',\n          port: '9100',\n          model: 'Canon PIXMA',\n          location: 'Warehouse',\n          is_default: false,\n          is_active: false,\n          status: 'offline',\n          last_used: new Date(Date.now() - 86400000).toISOString()\n        }\n      ];\n      \n      setPrinters(mockPrinters);\n      setSelectedPrinter(mockPrinters.find(p => p.is_default) || mockPrinters[0]);\n    } catch (err) {\n      setError('Failed to fetch printers');\n      console.error('Fetch printers error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddPrinter = async () => {\n    try {\n      // In a real implementation, this would call an API endpoint\n      const newPrinter = {\n        id: Date.now(),\n        ...formData,\n        status: 'online',\n        last_used: new Date().toISOString()\n      };\n      \n      setPrinters(prev => [...prev, newPrinter]);\n      setShowAddModal(false);\n      setFormData({\n        name: '',\n        type: 'network',\n        ip_address: '',\n        port: '9100',\n        model: '',\n        location: '',\n        is_default: false,\n        is_active: true\n      });\n    } catch (err) {\n      setError('Failed to add printer');\n      console.error('Add printer error:', err);\n    }\n  };\n\n  const handleAddSystemPrinter = (systemPrinter) => {\n    const newPrinter = {\n      id: Date.now(),\n      name: systemPrinter.name,\n      type: systemPrinter.type,\n      ip_address: systemPrinter.ip_address || '',\n      port: systemPrinter.port || '9100',\n      model: systemPrinter.model,\n      location: systemPrinter.location,\n      is_default: false,\n      is_active: true,\n      status: 'online',\n      last_used: new Date().toISOString()\n    };\n    \n    setPrinters(prev => [...prev, newPrinter]);\n    \n    // Remove from available printers\n    setAvailablePrinters(prev => prev.filter(p => p.name !== systemPrinter.name));\n    \n    alert(`Added ${systemPrinter.name} to your printer list`);\n  };\n\n  const handleUpdatePrinter = async (printerId, updates) => {\n    try {\n      setPrinters(prev => prev.map(printer => \n        printer.id === printerId ? { ...printer, ...updates } : printer\n      ));\n    } catch (err) {\n      setError('Failed to update printer');\n      console.error('Update printer error:', err);\n    }\n  };\n\n  const handleDeletePrinter = async (printerId) => {\n    if (window.confirm('Are you sure you want to delete this printer?')) {\n      try {\n        setPrinters(prev => prev.filter(printer => printer.id !== printerId));\n        if (selectedPrinter && selectedPrinter.id === printerId) {\n          setSelectedPrinter(printers.find(p => p.id !== printerId) || null);\n        }\n      } catch (err) {\n        setError('Failed to delete printer');\n        console.error('Delete printer error:', err);\n      }\n    }\n  };\n\n  const handleTestPrint = async (printer) => {\n    try {\n      // Create a test print document\n      const testContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <title>Printer Test</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 10px; }\n            .info { margin: 20px 0; }\n            .success { color: green; font-weight: bold; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h1>Printer Test Document</h1>\n          </div>\n          <div class=\"info\">\n            <p><strong>Printer:</strong> ${printer.name}</p>\n            <p><strong>Type:</strong> ${printer.type}</p>\n            <p><strong>Model:</strong> ${printer.model}</p>\n            <p><strong>Location:</strong> ${printer.location}</p>\n            <p><strong>Test Date:</strong> ${new Date().toLocaleString()}</p>\n          </div>\n          <div class=\"success\">\n            <p>✅ Printer test successful!</p>\n            <p>This document was sent to: ${printer.name}</p>\n          </div>\n        </body>\n        </html>\n      `;\n      \n      const printWindow = window.open('', '_blank', 'width=600,height=400');\n      printWindow.document.write(testContent);\n      printWindow.document.close();\n      \n      printWindow.onload = () => {\n        printWindow.focus();\n        printWindow.print();\n        printWindow.close();\n      };\n      \n      // Update last used time\n      handleUpdatePrinter(printer.id, { last_used: new Date().toISOString() });\n      \n    } catch (err) {\n      setError('Failed to test print');\n      console.error('Test print error:', err);\n    }\n  };\n\n  const detectSystemPrinters = async () => {\n    try {\n      setDetectingPrinters(true);\n      \n      // Use the Web API to detect available printers\n      if ('navigator' in window && 'serviceWorker' in navigator) {\n        // Try to use the Web Printing API if available\n        try {\n          const printJob = await navigator.serviceWorker.ready;\n          // This is a placeholder - actual implementation would depend on browser support\n          console.log('Web Printing API available');\n        } catch (e) {\n          console.log('Web Printing API not available');\n        }\n      }\n      \n      // For now, we'll simulate system printer detection\n      // In a real implementation, this would use system APIs or backend services\n      const systemPrinters = [\n        {\n          name: 'Microsoft Print to PDF',\n          type: 'local',\n          model: 'PDF Printer',\n          location: 'Local System',\n          is_system: true\n        },\n        {\n          name: 'HP LaserJet Pro (Default)',\n          type: 'local',\n          model: 'HP LaserJet Pro',\n          location: 'Local System',\n          is_system: true\n        },\n        {\n          name: 'Canon PIXMA G3110',\n          type: 'usb',\n          model: 'Canon PIXMA G3110',\n          location: 'USB Port',\n          is_system: true\n        },\n        {\n          name: 'EPSON L3150',\n          type: 'network',\n          model: 'EPSON L3150',\n          ip_address: '192.168.1.150',\n          port: '9100',\n          location: 'Network',\n          is_system: true\n        }\n      ];\n      \n      setAvailablePrinters(systemPrinters);\n      \n      // Also try to detect network printers\n      await detectNetworkPrinters();\n      \n    } catch (err) {\n      console.error('System printer detection error:', err);\n      setError('Failed to detect system printers');\n    } finally {\n      setDetectingPrinters(false);\n    }\n  };\n\n  const detectNetworkPrinters = async () => {\n    try {\n      // Simulate network printer detection\n      const networkPrinters = [\n        {\n          name: 'Office Printer HP',\n          type: 'network',\n          model: 'HP LaserJet Pro',\n          ip_address: '192.168.1.100',\n          port: '9100',\n          location: 'Office Network',\n          is_system: true\n        },\n        {\n          name: 'Reception Canon',\n          type: 'network',\n          model: 'Canon PIXMA',\n          ip_address: '192.168.1.101',\n          port: '9100',\n          location: 'Reception Network',\n          is_system: true\n        }\n      ];\n      \n      setAvailablePrinters(prev => [...prev, ...networkPrinters]);\n    } catch (err) {\n      console.error('Network printer detection error:', err);\n    }\n  };\n\n  const scanForPrinters = async () => {\n    try {\n      setLoading(true);\n      await detectSystemPrinters();\n      alert(`Found ${availablePrinters.length} available printer(s) on the system`);\n    } catch (err) {\n      setError('Failed to scan for printers');\n      console.error('Scan printers error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const printerColumns = [\n    { key: 'name', label: 'Name' },\n    { key: 'type', label: 'Type' },\n    { key: 'model', label: 'Model' },\n    { key: 'location', label: 'Location' },\n    { key: 'status', label: 'Status', render: (value) => (\n      <span className={`status-badge ${value}`}>{value}</span>\n    )},\n    { key: 'is_default', label: 'Default', render: (value) => value ? 'Yes' : 'No' },\n    { key: 'is_active', label: 'Active', render: (value) => value ? 'Yes' : 'No' },\n    { \n      key: 'actions', \n      label: 'Actions', \n      render: (_, item) => (\n        <div className=\"action-buttons\">\n          <Button \n            size=\"small\" \n            variant=\"outline\" \n            onClick={() => handleTestPrint(item)}\n          >\n            Test\n          </Button>\n          <Button \n            size=\"small\" \n            variant=\"outline\" \n            onClick={() => {\n              setFormData({\n                name: item.name,\n                type: item.type,\n                ip_address: item.ip_address,\n                port: item.port,\n                model: item.model,\n                location: item.location,\n                is_default: item.is_default,\n                is_active: item.is_active\n              });\n              setShowAddModal(true);\n            }}\n          >\n            Edit\n          </Button>\n          <Button \n            size=\"small\" \n            variant=\"danger\" \n            onClick={() => handleDeletePrinter(item.id)}\n          >\n            Delete\n          </Button>\n        </div>\n      )\n    }\n  ];\n\n  if (user?.role !== 'admin') {\n    return (\n      <div className=\"printer-settings\">\n        <div className=\"access-denied\">\n          <h2>Access Denied</h2>\n          <p>You don't have permission to access printer settings.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"printer-settings\">\n      <div className=\"page-header\">\n        <h1>Printer Settings</h1>\n        <p>Manage network and local printers for the system</p>\n      </div>\n\n      {error && (\n        <div className=\"error-message\">\n          {error}\n          <button onClick={() => setError('')}>×</button>\n        </div>\n      )}\n\n      <div className=\"printer-controls\">\n        <div className=\"control-group\">\n          <Button onClick={() => {\n            setShowAddModal(true);\n            detectSystemPrinters();\n          }}>\n            Add Printer\n          </Button>\n          <Button variant=\"outline\" onClick={scanForPrinters} disabled={loading}>\n            {loading ? 'Scanning...' : 'Scan Network'}\n          </Button>\n        </div>\n        \n        <div className=\"selected-printer\">\n          <label>Default Printer:</label>\n          <select \n            value={selectedPrinter?.id || ''} \n            onChange={(e) => {\n              const printer = printers.find(p => p.id === parseInt(e.target.value));\n              setSelectedPrinter(printer);\n              if (printer) {\n                handleUpdatePrinter(printer.id, { is_default: true });\n                // Remove default from other printers\n                printers.forEach(p => {\n                  if (p.id !== printer.id && p.is_default) {\n                    handleUpdatePrinter(p.id, { is_default: false });\n                  }\n                });\n              }\n            }}\n          >\n            <option value=\"\">Select Default Printer</option>\n            {printers.filter(p => p.is_active).map(printer => (\n              <option key={printer.id} value={printer.id}>\n                {printer.name} ({printer.location})\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <Table\n        data={printers}\n        columns={printerColumns}\n        loading={loading}\n        emptyMessage=\"No printers found\"\n      />\n\n      {/* Add/Edit Printer Modal */}\n      {showAddModal && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <div className=\"modal-header\">\n              <h3>Add/Edit Printer</h3>\n              <button onClick={() => setShowAddModal(false)}>×</button>\n            </div>\n            <div className=\"modal-body\">\n              {/* Available System Printers Section */}\n              {availablePrinters.length > 0 && (\n                <div className=\"available-printers-section\">\n                  <h4>Available System Printers</h4>\n                  <div className=\"available-printers-list\">\n                    {availablePrinters.map((printer, index) => (\n                      <div key={index} className=\"available-printer-item\">\n                        <div className=\"printer-info\">\n                          <strong>{printer.name}</strong>\n                          <span className=\"printer-type\">{printer.type.toUpperCase()}</span>\n                          <span className=\"printer-model\">{printer.model}</span>\n                          <span className=\"printer-location\">{printer.location}</span>\n                          {printer.ip_address && (\n                            <span className=\"printer-ip\">{printer.ip_address}:{printer.port}</span>\n                          )}\n                        </div>\n                        <Button \n                          size=\"small\" \n                          onClick={() => handleAddSystemPrinter(printer)}\n                        >\n                          Add to List\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              <div className=\"form-divider\">\n                <span>Or Add Manually</span>\n              </div>\n\n              <div className=\"form-group\">\n                <label>Printer Name:</label>\n                <input\n                  type=\"text\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\n                  placeholder=\"Enter printer name\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Type:</label>\n                <select\n                  value={formData.type}\n                  onChange={(e) => setFormData({...formData, type: e.target.value})}\n                >\n                  <option value=\"network\">Network Printer</option>\n                  <option value=\"usb\">USB Printer</option>\n                  <option value=\"local\">Local Printer</option>\n                </select>\n              </div>\n              \n              {formData.type === 'network' && (\n                <>\n                  <div className=\"form-group\">\n                    <label>IP Address:</label>\n                    <input\n                      type=\"text\"\n                      value={formData.ip_address}\n                      onChange={(e) => setFormData({...formData, ip_address: e.target.value})}\n                      placeholder=\"192.168.1.100\"\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label>Port:</label>\n                    <input\n                      type=\"text\"\n                      value={formData.port}\n                      onChange={(e) => setFormData({...formData, port: e.target.value})}\n                      placeholder=\"9100\"\n                    />\n                  </div>\n                </>\n              )}\n              \n              <div className=\"form-group\">\n                <label>Model:</label>\n                <input\n                  type=\"text\"\n                  value={formData.model}\n                  onChange={(e) => setFormData({...formData, model: e.target.value})}\n                  placeholder=\"Enter printer model\"\n                />\n              </div>\n              \n              <div className=\"form-group\">\n                <label>Location:</label>\n                <input\n                  type=\"text\"\n                  value={formData.location}\n                  onChange={(e) => setFormData({...formData, location: e.target.value})}\n                  placeholder=\"Enter printer location\"\n                />\n              </div>\n              \n              <div className=\"form-group checkbox-group\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.is_default}\n                    onChange={(e) => setFormData({...formData, is_default: e.target.checked})}\n                  />\n                  Set as default printer\n                </label>\n              </div>\n              \n              <div className=\"form-group checkbox-group\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={formData.is_active}\n                    onChange={(e) => setFormData({...formData, is_active: e.target.checked})}\n                  />\n                  Active\n                </label>\n              </div>\n            </div>\n            <div className=\"modal-footer\">\n              <Button variant=\"outline\" onClick={() => setShowAddModal(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleAddPrinter}>\n                Save Printer\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PrinterSettings;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}