{"ast":null,"code":"// Helper functions for formatting and utilities\n\nexport const formatCurrency = amount => {\n  if (amount === null || amount === undefined) {\n    return '0.00';\n  }\n  // Format as number with 2 decimal places and add MGA suffix\n  return `${parseFloat(amount).toFixed(2)} MGA`;\n};\nexport const formatDate = dateString => {\n  if (!dateString) {\n    return 'N/A';\n  }\n  try {\n    return new Date(dateString).toLocaleDateString();\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Invalid Date';\n  }\n};\nexport const formatDateTime = dateString => {\n  if (!dateString) {\n    return 'N/A';\n  }\n  try {\n    return new Date(dateString).toLocaleString();\n  } catch (error) {\n    console.error('Error formatting datetime:', error);\n    return 'Invalid Date';\n  }\n};\nexport const formatNumber = (number, decimals = 2) => {\n  if (number === null || number === undefined) {\n    return '0';\n  }\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  }).format(number);\n};\nexport const getStatusBadge = status => {\n  const statusClasses = {\n    pending: 'status-pending',\n    completed: 'status-completed',\n    cancelled: 'status-cancelled',\n    refunded: 'status-refunded'\n  };\n  return statusClasses[status] || 'status-unknown';\n};\nexport const getStatusText = status => {\n  const statusTexts = {\n    pending: 'Pending',\n    completed: 'Completed',\n    cancelled: 'Cancelled',\n    refunded: 'Refunded'\n  };\n  return statusTexts[status] || 'Unknown';\n};","map":{"version":3,"names":["formatCurrency","amount","undefined","parseFloat","toFixed","formatDate","dateString","Date","toLocaleDateString","error","console","formatDateTime","toLocaleString","formatNumber","number","decimals","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","getStatusBadge","status","statusClasses","pending","completed","cancelled","refunded","getStatusText","statusTexts"],"sources":["/home/el-ifran/WareHouse_Manager/elif-orders-app/beverage_management_system/src/utils/helpers.js"],"sourcesContent":["// Helper functions for formatting and utilities\n\nexport const formatCurrency = (amount) => {\n  if (amount === null || amount === undefined) {\n    return '0.00';\n  }\n  // Format as number with 2 decimal places and add MGA suffix\n  return `${parseFloat(amount).toFixed(2)} MGA`;\n};\n\nexport const formatDate = (dateString) => {\n  if (!dateString) {\n    return 'N/A';\n  }\n  try {\n    return new Date(dateString).toLocaleDateString();\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Invalid Date';\n  }\n};\n\nexport const formatDateTime = (dateString) => {\n  if (!dateString) {\n    return 'N/A';\n  }\n  try {\n    return new Date(dateString).toLocaleString();\n  } catch (error) {\n    console.error('Error formatting datetime:', error);\n    return 'Invalid Date';\n  }\n};\n\nexport const formatNumber = (number, decimals = 2) => {\n  if (number === null || number === undefined) {\n    return '0';\n  }\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  }).format(number);\n};\n\nexport const getStatusBadge = (status) => {\n  const statusClasses = {\n    pending: 'status-pending',\n    completed: 'status-completed',\n    cancelled: 'status-cancelled',\n    refunded: 'status-refunded'\n  };\n  return statusClasses[status] || 'status-unknown';\n};\n\nexport const getStatusText = (status) => {\n  const statusTexts = {\n    pending: 'Pending',\n    completed: 'Completed',\n    cancelled: 'Cancelled',\n    refunded: 'Refunded'\n  };\n  return statusTexts[status] || 'Unknown';\n};\n"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,cAAc,GAAIC,MAAM,IAAK;EACxC,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKC,SAAS,EAAE;IAC3C,OAAO,MAAM;EACf;EACA;EACA,OAAO,GAAGC,UAAU,CAACF,MAAM,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,MAAM;AAC/C,CAAC;AAED,OAAO,MAAMC,UAAU,GAAIC,UAAU,IAAK;EACxC,IAAI,CAACA,UAAU,EAAE;IACf,OAAO,KAAK;EACd;EACA,IAAI;IACF,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,CAAC;EAClD,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,cAAc;EACvB;AACF,CAAC;AAED,OAAO,MAAME,cAAc,GAAIL,UAAU,IAAK;EAC5C,IAAI,CAACA,UAAU,EAAE;IACf,OAAO,KAAK;EACd;EACA,IAAI;IACF,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACM,cAAc,CAAC,CAAC;EAC9C,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,cAAc;EACvB;AACF,CAAC;AAED,OAAO,MAAMI,YAAY,GAAGA,CAACC,MAAM,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACpD,IAAID,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKZ,SAAS,EAAE;IAC3C,OAAO,GAAG;EACZ;EACA,OAAO,IAAIc,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,qBAAqB,EAAEH,QAAQ;IAC/BI,qBAAqB,EAAEJ;EACzB,CAAC,CAAC,CAACK,MAAM,CAACN,MAAM,CAAC;AACnB,CAAC;AAED,OAAO,MAAMO,cAAc,GAAIC,MAAM,IAAK;EACxC,MAAMC,aAAa,GAAG;IACpBC,OAAO,EAAE,gBAAgB;IACzBC,SAAS,EAAE,kBAAkB;IAC7BC,SAAS,EAAE,kBAAkB;IAC7BC,QAAQ,EAAE;EACZ,CAAC;EACD,OAAOJ,aAAa,CAACD,MAAM,CAAC,IAAI,gBAAgB;AAClD,CAAC;AAED,OAAO,MAAMM,aAAa,GAAIN,MAAM,IAAK;EACvC,MAAMO,WAAW,GAAG;IAClBL,OAAO,EAAE,SAAS;IAClBC,SAAS,EAAE,WAAW;IACtBC,SAAS,EAAE,WAAW;IACtBC,QAAQ,EAAE;EACZ,CAAC;EACD,OAAOE,WAAW,CAACP,MAAM,CAAC,IAAI,SAAS;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}