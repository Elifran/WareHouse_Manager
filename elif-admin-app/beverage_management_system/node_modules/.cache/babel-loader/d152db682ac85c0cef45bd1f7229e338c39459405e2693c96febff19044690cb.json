{"ast":null,"code":"import React,{useState,useEffect}from'react';import api from'../services/api';import'./ConnectionStatus.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ConnectionStatus=()=>{const[isConnected,setIsConnected]=useState(false);const[isChecking,setIsChecking]=useState(true);const checkConnection=async()=>{try{setIsChecking(true);// Try to access a simple endpoint that doesn't require authentication\nconst response=await api.get('/core/login/',{timeout:5000});// If we get any response (even 405 Method Not Allowed), the server is connected\nsetIsConnected(true);}catch(error){// Check if it's a connection error vs other errors\nif(error.code==='ECONNREFUSED'||error.message.includes('Network Error')||error.message.includes('ERR_CONNECTION_REFUSED')){setIsConnected(false);}else{// Other errors (like 405 Method Not Allowed) mean server is connected\nsetIsConnected(true);}}finally{setIsChecking(false);}};useEffect(()=>{checkConnection();// Check connection every 30 seconds\nconst interval=setInterval(checkConnection,30000);return()=>clearInterval(interval);},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"connection-status\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"status-dot \".concat(isConnected?'connected':'disconnected',\" \").concat(isChecking?'checking':''),title:isChecking?'Checking connection...':isConnected?'Server connected':'Server disconnected'}),/*#__PURE__*/_jsx(\"span\",{className:\"status-text\",children:isChecking?'Checking...':isConnected?'Connected':'Disconnected'})]});};export default ConnectionStatus;","map":{"version":3,"names":["React","useState","useEffect","api","jsx","_jsx","jsxs","_jsxs","ConnectionStatus","isConnected","setIsConnected","isChecking","setIsChecking","checkConnection","response","get","timeout","error","code","message","includes","interval","setInterval","clearInterval","className","children","concat","title"],"sources":["/home/el-ifran/WareHouse_Manager/beverage_management_system/src/components/ConnectionStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport api from '../services/api';\nimport './ConnectionStatus.css';\n\nconst ConnectionStatus = () => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isChecking, setIsChecking] = useState(true);\n\n  const checkConnection = async () => {\n    try {\n      setIsChecking(true);\n      // Try to access a simple endpoint that doesn't require authentication\n      const response = await api.get('/core/login/', { timeout: 5000 });\n      // If we get any response (even 405 Method Not Allowed), the server is connected\n      setIsConnected(true);\n    } catch (error) {\n      // Check if it's a connection error vs other errors\n      if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error') || error.message.includes('ERR_CONNECTION_REFUSED')) {\n        setIsConnected(false);\n      } else {\n        // Other errors (like 405 Method Not Allowed) mean server is connected\n        setIsConnected(true);\n      }\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  useEffect(() => {\n    checkConnection();\n    \n    // Check connection every 30 seconds\n    const interval = setInterval(checkConnection, 30000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"connection-status\">\n      <div \n        className={`status-dot ${isConnected ? 'connected' : 'disconnected'} ${isChecking ? 'checking' : ''}`}\n        title={isChecking ? 'Checking connection...' : (isConnected ? 'Server connected' : 'Server disconnected')}\n      />\n      <span className=\"status-text\">\n        {isChecking ? 'Checking...' : (isConnected ? 'Connected' : 'Disconnected')}\n      </span>\n    </div>\n  );\n};\n\nexport default ConnectionStatus;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,GAAG,KAAM,iBAAiB,CACjC,MAAO,wBAAwB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhC,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACU,UAAU,CAAEC,aAAa,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAElD,KAAM,CAAAY,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CACFD,aAAa,CAAC,IAAI,CAAC,CACnB;AACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAX,GAAG,CAACY,GAAG,CAAC,cAAc,CAAE,CAAEC,OAAO,CAAE,IAAK,CAAC,CAAC,CACjE;AACAN,cAAc,CAAC,IAAI,CAAC,CACtB,CAAE,MAAOO,KAAK,CAAE,CACd;AACA,GAAIA,KAAK,CAACC,IAAI,GAAK,cAAc,EAAID,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC,EAAIH,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,wBAAwB,CAAC,CAAE,CAChIV,cAAc,CAAC,KAAK,CAAC,CACvB,CAAC,IAAM,CACL;AACAA,cAAc,CAAC,IAAI,CAAC,CACtB,CACF,CAAC,OAAS,CACRE,aAAa,CAAC,KAAK,CAAC,CACtB,CACF,CAAC,CAEDV,SAAS,CAAC,IAAM,CACdW,eAAe,CAAC,CAAC,CAEjB;AACA,KAAM,CAAAQ,QAAQ,CAAGC,WAAW,CAACT,eAAe,CAAE,KAAK,CAAC,CAEpD,MAAO,IAAMU,aAAa,CAACF,QAAQ,CAAC,CACtC,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEd,KAAA,QAAKiB,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChCpB,IAAA,QACEmB,SAAS,eAAAE,MAAA,CAAgBjB,WAAW,CAAG,WAAW,CAAG,cAAc,MAAAiB,MAAA,CAAIf,UAAU,CAAG,UAAU,CAAG,EAAE,CAAG,CACtGgB,KAAK,CAAEhB,UAAU,CAAG,wBAAwB,CAAIF,WAAW,CAAG,kBAAkB,CAAG,qBAAuB,CAC3G,CAAC,cACFJ,IAAA,SAAMmB,SAAS,CAAC,aAAa,CAAAC,QAAA,CAC1Bd,UAAU,CAAG,aAAa,CAAIF,WAAW,CAAG,WAAW,CAAG,cAAe,CACtE,CAAC,EACJ,CAAC,CAEV,CAAC,CAED,cAAe,CAAAD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}