{"ast":null,"code":"var _jsxFileName = \"/home/el-ifran/WareHouse_Manager/elif-admin-app/beverage_management_system/src/components/ConnectionStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from '../services/api';\nimport './ConnectionStatus.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionStatus = () => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isChecking, setIsChecking] = useState(true);\n  const checkConnection = async () => {\n    try {\n      setIsChecking(true);\n      // Try to access the health check endpoint that doesn't require authentication\n      await api.get('/api/core/health/', {\n        timeout: 5000\n      });\n      // If we get here, server is connected\n      setIsConnected(true);\n    } catch (error) {\n      // Check if it's a connection error vs other errors\n      if (error.code === 'ECONNREFUSED' || error.message.includes('Network Error') || error.message.includes('ERR_CONNECTION_REFUSED') || error.message.includes('Failed to fetch') || error.message.includes('Connection refused')) {\n        setIsConnected(false);\n      } else if (error.response && error.response.status) {\n        // If we get a response with a status code, server is connected\n        setIsConnected(true);\n      } else {\n        // For any other error, assume disconnected\n        setIsConnected(false);\n      }\n    } finally {\n      setIsChecking(false);\n    }\n  };\n  useEffect(() => {\n    checkConnection();\n\n    // Check connection every 30 seconds\n    const interval = setInterval(checkConnection, 30000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connection-status\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `status-dot ${isConnected ? 'connected' : 'disconnected'} ${isChecking ? 'checking' : ''}`,\n      title: isChecking ? 'Checking connection...' : isConnected ? 'Server connected' : 'Server disconnected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"status-text\",\n      children: isChecking ? 'Checking...' : isConnected ? 'Connected' : 'Disconnected'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(ConnectionStatus, \"uQHsjbTwbliC3wQaHDZegkA91t0=\");\n_c = ConnectionStatus;\nexport default ConnectionStatus;\nvar _c;\n$RefreshReg$(_c, \"ConnectionStatus\");","map":{"version":3,"names":["React","useState","useEffect","api","jsxDEV","_jsxDEV","ConnectionStatus","_s","isConnected","setIsConnected","isChecking","setIsChecking","checkConnection","get","timeout","error","code","message","includes","response","status","interval","setInterval","clearInterval","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/el-ifran/WareHouse_Manager/elif-admin-app/beverage_management_system/src/components/ConnectionStatus.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport api from '../services/api';\nimport './ConnectionStatus.css';\n\nconst ConnectionStatus = () => {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isChecking, setIsChecking] = useState(true);\n\n  const checkConnection = async () => {\n    try {\n      setIsChecking(true);\n      // Try to access the health check endpoint that doesn't require authentication\n      await api.get('/api/core/health/', { timeout: 5000 });\n      // If we get here, server is connected\n      setIsConnected(true);\n    } catch (error) {\n      // Check if it's a connection error vs other errors\n      if (error.code === 'ECONNREFUSED' || \n          error.message.includes('Network Error') || \n          error.message.includes('ERR_CONNECTION_REFUSED') ||\n          error.message.includes('Failed to fetch') ||\n          error.message.includes('Connection refused')) {\n        setIsConnected(false);\n      } else if (error.response && error.response.status) {\n        // If we get a response with a status code, server is connected\n        setIsConnected(true);\n      } else {\n        // For any other error, assume disconnected\n        setIsConnected(false);\n      }\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  useEffect(() => {\n    checkConnection();\n    \n    // Check connection every 30 seconds\n    const interval = setInterval(checkConnection, 30000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"connection-status\">\n      <div \n        className={`status-dot ${isConnected ? 'connected' : 'disconnected'} ${isChecking ? 'checking' : ''}`}\n        title={isChecking ? 'Checking connection...' : (isConnected ? 'Server connected' : 'Server disconnected')}\n      />\n      <span className=\"status-text\">\n        {isChecking ? 'Checking...' : (isConnected ? 'Connected' : 'Disconnected')}\n      </span>\n    </div>\n  );\n};\n\nexport default ConnectionStatus;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACFD,aAAa,CAAC,IAAI,CAAC;MACnB;MACA,MAAMR,GAAG,CAACU,GAAG,CAAC,mBAAmB,EAAE;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MACrD;MACAL,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd;MACA,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,IAC7BD,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC,IACvCH,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,wBAAwB,CAAC,IAChDH,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,IACzCH,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;QAChDT,cAAc,CAAC,KAAK,CAAC;MACvB,CAAC,MAAM,IAAIM,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACI,QAAQ,CAACC,MAAM,EAAE;QAClD;QACAX,cAAc,CAAC,IAAI,CAAC;MACtB,CAAC,MAAM;QACL;QACAA,cAAc,CAAC,KAAK,CAAC;MACvB;IACF,CAAC,SAAS;MACRE,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAEDT,SAAS,CAAC,MAAM;IACdU,eAAe,CAAC,CAAC;;IAEjB;IACA,MAAMS,QAAQ,GAAGC,WAAW,CAACV,eAAe,EAAE,KAAK,CAAC;IAEpD,OAAO,MAAMW,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA;IAAKmB,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCpB,OAAA;MACEmB,SAAS,EAAE,cAAchB,WAAW,GAAG,WAAW,GAAG,cAAc,IAAIE,UAAU,GAAG,UAAU,GAAG,EAAE,EAAG;MACtGgB,KAAK,EAAEhB,UAAU,GAAG,wBAAwB,GAAIF,WAAW,GAAG,kBAAkB,GAAG;IAAuB;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3G,CAAC,eACFzB,OAAA;MAAMmB,SAAS,EAAC,aAAa;MAAAC,QAAA,EAC1Bf,UAAU,GAAG,aAAa,GAAIF,WAAW,GAAG,WAAW,GAAG;IAAe;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV,CAAC;AAACvB,EAAA,CAnDID,gBAAgB;AAAAyB,EAAA,GAAhBzB,gBAAgB;AAqDtB,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}