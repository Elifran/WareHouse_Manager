# Generated by Django 4.2.7 on 2025-09-21 11:23

from django.db import migrations
from decimal import Decimal


def fix_cost_calculation_logic(apps, schema_editor):
    """Fix the cost calculation logic for all sale items"""
    SaleItem = apps.get_model('sales', 'SaleItem')
    Sale = apps.get_model('sales', 'Sale')
    from products.utils import get_price_conversion_factor
    
    # Find all sale items that need cost recalculation
    all_items = SaleItem.objects.all()
    
    print(f"Found {all_items.count()} sale items to fix cost calculation")
    
    for item in all_items:
        # Recalculate the unit cost using the correct logic
        if item.unit and item.unit.id != item.product.base_unit.id:
            # Convert cost price from base unit to sale unit using price conversion factor
            conversion_factor = get_price_conversion_factor(item.product.base_unit.id, item.unit.id)
            unit_cost_price = item.product.cost_price * conversion_factor
        else:
            # Same unit as base unit, use cost price directly
            unit_cost_price = item.product.cost_price
        
        # Update the sale item with correct costs
        old_unit_cost = item.unit_cost
        old_total_cost = item.total_cost
        
        item.unit_cost = unit_cost_price
        item.total_cost = unit_cost_price * item.quantity
        item.save()
        
        if old_unit_cost != unit_cost_price:
            print(f"Fixed item {item.id} ({item.product.name}): {old_unit_cost} -> {item.unit_cost} (unit cost)")
            print(f"Fixed item {item.id} ({item.product.name}): {old_total_cost} -> {item.total_cost} (total cost)")
    
    # Update sale cost_amount to reflect the corrected costs
    for sale in Sale.objects.all():
        total_cost = sum(item.total_cost for item in sale.items.all())
        old_cost = sale.cost_amount
        sale.cost_amount = total_cost
        sale.save()
        if old_cost != total_cost:
            print(f"Updated sale {sale.sale_number}: {old_cost} -> {total_cost}")


def reverse_fix_cost_calculation_logic(apps, schema_editor):
    """Reverse migration - this is not easily reversible"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('sales', '0010_auto_20250921_1122'),
    ]

    operations = [
        migrations.RunPython(fix_cost_calculation_logic, reverse_fix_cost_calculation_logic),
    ]
