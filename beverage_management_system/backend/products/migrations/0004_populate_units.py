# Generated by Django 4.2.7 on 2025-09-20 04:55

from django.db import migrations


def populate_units(apps, schema_editor):
    Unit = apps.get_model('products', 'Unit')
    UnitConversion = apps.get_model('products', 'UnitConversion')
    Product = apps.get_model('products', 'Product')
    
    # Create default units
    piece_unit, created = Unit.objects.get_or_create(
        name='Piece',
        symbol='piece',
        defaults={
            'description': 'Individual piece/unit',
            'is_base_unit': True,
            'is_active': True
        }
    )
    
    carton_unit, created = Unit.objects.get_or_create(
        name='Carton',
        symbol='carton',
        defaults={
            'description': 'Carton of items',
            'is_base_unit': False,
            'is_active': True
        }
    )
    
    case_unit, created = Unit.objects.get_or_create(
        name='Case',
        symbol='case',
        defaults={
            'description': 'Case of items',
            'is_base_unit': False,
            'is_active': True
        }
    )
    
    # Create unit conversions
    # 1 carton = 20 pieces
    UnitConversion.objects.get_or_create(
        from_unit=carton_unit,
        to_unit=piece_unit,
        defaults={
            'conversion_factor': 20.0,
            'description': '1 carton contains 20 pieces',
            'is_active': True
        }
    )
    
    # 1 case = 12 cartons = 240 pieces
    UnitConversion.objects.get_or_create(
        from_unit=case_unit,
        to_unit=carton_unit,
        defaults={
            'conversion_factor': 12.0,
            'description': '1 case contains 12 cartons',
            'is_active': True
        }
    )
    
    # Update existing products to use piece as base unit
    for product in Product.objects.all():
        if not product.base_unit:
            product.base_unit = piece_unit
            product.save()


def reverse_populate_units(apps, schema_editor):
    # This migration is not reversible as it would require deleting units
    # that might be referenced by other data
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0003_add_unit_models'),
    ]

    operations = [
        migrations.RunPython(populate_units, reverse_populate_units),
    ]
