# Generated by Django 4.2.7 on 2025-09-21 11:22

from django.db import migrations
from decimal import Decimal


def recalculate_biscuits_malgaches_costs(apps, schema_editor):
    """Recalculate the cost prices for Biscuits Malgaches sale items with correct product cost"""
    SaleItem = apps.get_model('sales', 'SaleItem')
    Sale = apps.get_model('sales', 'Sale')
    from products.utils import get_unit_conversion_factor
    
    # Find all sale items for Biscuits Malgaches
    biscuits_items = SaleItem.objects.filter(product__name='Biscuits Malgaches')
    
    print(f"Found {biscuits_items.count()} Biscuits Malgaches sale items to recalculate")
    
    for item in biscuits_items:
        # Recalculate the unit cost based on the corrected product cost price
        if item.unit and item.unit.id != item.product.base_unit.id:
            # Convert cost price from base unit to sale unit
            conversion_factor = get_unit_conversion_factor(item.unit.id, item.product.base_unit.id)
            if conversion_factor:
                unit_cost_price = item.product.cost_price / conversion_factor
            else:
                unit_cost_price = item.product.cost_price
        else:
            # Same unit as base unit, use cost price directly
            unit_cost_price = item.product.cost_price
        
        # Update the sale item with recalculated costs
        old_unit_cost = item.unit_cost
        old_total_cost = item.total_cost
        
        item.unit_cost = unit_cost_price
        item.total_cost = unit_cost_price * item.quantity
        item.save()
        
        print(f"Recalculated item {item.id}: {old_unit_cost} -> {item.unit_cost} (unit cost)")
        print(f"Recalculated item {item.id}: {old_total_cost} -> {item.total_cost} (total cost)")
    
    # Update sale cost_amount to reflect the recalculated costs
    for sale in Sale.objects.all():
        total_cost = sum(item.total_cost for item in sale.items.all())
        old_cost = sale.cost_amount
        sale.cost_amount = total_cost
        sale.save()
        print(f"Updated sale {sale.sale_number}: {old_cost} -> {total_cost}")


def reverse_recalculate_biscuits_malgaches_costs(apps, schema_editor):
    """Reverse migration - this is not easily reversible"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('sales', '0009_auto_20250921_1112'),
    ]

    operations = [
        migrations.RunPython(recalculate_biscuits_malgaches_costs, reverse_recalculate_biscuits_malgaches_costs),
    ]
