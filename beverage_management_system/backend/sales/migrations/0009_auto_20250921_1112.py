# Generated by Django 4.2.7 on 2025-09-21 11:12

from django.db import migrations
from decimal import Decimal


def fix_biscuits_malgaches_prices(apps, schema_editor):
    """Fix the selling prices for Biscuits Malgaches sale items (divide by 1000)"""
    SaleItem = apps.get_model('sales', 'SaleItem')
    Sale = apps.get_model('sales', 'Sale')
    
    # Find all sale items for Biscuits Malgaches
    biscuits_items = SaleItem.objects.filter(product__name='Biscuits Malgaches')
    
    print(f"Found {biscuits_items.count()} Biscuits Malgaches sale items to fix prices")
    
    for item in biscuits_items:
        # Divide the prices by 1000 to fix the currency error
        old_unit_price = item.unit_price
        old_total_price = item.total_price
        
        item.unit_price = item.unit_price / 1000
        item.total_price = item.total_price / 1000
        item.save()
        
        print(f"Fixed item {item.id}: {old_unit_price} -> {item.unit_price} (unit price)")
        print(f"Fixed item {item.id}: {old_total_price} -> {item.total_price} (total price)")
    
    # Update sale total_amount to reflect the corrected prices
    for sale in Sale.objects.all():
        total_amount = sum(item.total_price for item in sale.items.all())
        old_amount = sale.total_amount
        sale.total_amount = total_amount
        sale.subtotal = total_amount  # Also update subtotal
        sale.save()
        print(f"Updated sale {sale.sale_number}: {old_amount} -> {total_amount}")


def reverse_fix_biscuits_malgaches_prices(apps, schema_editor):
    """Reverse the fix (multiply by 1000)"""
    SaleItem = apps.get_model('sales', 'SaleItem')
    Sale = apps.get_model('sales', 'Sale')
    
    # Find all sale items for Biscuits Malgaches
    biscuits_items = SaleItem.objects.filter(product__name='Biscuits Malgaches')
    
    for item in biscuits_items:
        item.unit_price = item.unit_price * 1000
        item.total_price = item.total_price * 1000
        item.save()
    
    # Update sale total_amount
    for sale in Sale.objects.all():
        total_amount = sum(item.total_price for item in sale.items.all())
        sale.total_amount = total_amount
        sale.subtotal = total_amount
        sale.save()


class Migration(migrations.Migration):

    dependencies = [
        ('sales', '0008_auto_20250921_1110'),
    ]

    operations = [
        migrations.RunPython(fix_biscuits_malgaches_prices, reverse_fix_biscuits_malgaches_prices),
    ]
