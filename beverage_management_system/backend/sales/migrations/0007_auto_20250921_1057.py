# Generated by Django 4.2.7 on 2025-09-21 10:57

from django.db import migrations
from decimal import Decimal


def populate_sale_item_costs(apps, schema_editor):
    """Populate unit_cost and total_cost for existing sale items"""
    SaleItem = apps.get_model('sales', 'SaleItem')
    Sale = apps.get_model('sales', 'Sale')
    from products.utils import get_unit_conversion_factor
    
    for item in SaleItem.objects.filter(unit_cost=0):
        try:
            # Get the cost price per unit in the sale unit
            if item.unit and item.unit.id != item.product.base_unit.id:
                # Convert cost price from base unit to sale unit
                conversion_factor = get_unit_conversion_factor(item.unit.id, item.product.base_unit.id)
                if conversion_factor:
                    unit_cost_price = item.product.cost_price / conversion_factor
                else:
                    unit_cost_price = item.product.cost_price
            else:
                # Same unit as base unit, use cost price directly
                unit_cost_price = item.product.cost_price
            
            # Update the sale item with calculated costs
            item.unit_cost = unit_cost_price
            item.total_cost = unit_cost_price * item.quantity
            item.save()
            
        except Exception as e:
            print(f"Error updating sale item {item.id}: {e}")
            # Set default values if calculation fails
            item.unit_cost = item.product.cost_price
            item.total_cost = item.product.cost_price * item.quantity
            item.save()
    
    # Update sale cost_amount to reflect the sum of all sale item costs
    for sale in Sale.objects.all():
        total_cost = sum(item.total_cost for item in sale.items.all())
        sale.cost_amount = total_cost
        sale.save()


def reverse_populate_sale_item_costs(apps, schema_editor):
    """Reverse migration - set costs back to 0"""
    SaleItem = apps.get_model('sales', 'SaleItem')
    SaleItem.objects.update(unit_cost=0, total_cost=0)


class Migration(migrations.Migration):

    dependencies = [
        ('sales', '0006_saleitem_total_cost_saleitem_unit_cost'),
    ]

    operations = [
        migrations.RunPython(populate_sale_item_costs, reverse_populate_sale_item_costs),
    ]
