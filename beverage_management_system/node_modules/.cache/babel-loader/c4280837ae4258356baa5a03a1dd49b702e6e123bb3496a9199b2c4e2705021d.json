{"ast":null,"code":"var _jsxFileName = \"/home/el-ifran/WareHouse_Manager/beverage_management_system/src/pages/PointOfSale.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport api from '../services/api';\nimport Button from '../components/Button';\nimport { generatePrintContent } from '../components/PrintButton';\nimport './PointOfSale.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PointOfSale = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [customerInfo, setCustomerInfo] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [paymentMethod, setPaymentMethod] = useState('cash');\n  const [paymentType, setPaymentType] = useState('full'); // 'full' or 'partial'\n  const [paidAmount, setPaidAmount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [stockAvailability, setStockAvailability] = useState({});\n  const [filters, setFilters] = useState({\n    category: '',\n    search: ''\n  });\n  const [searchInput, setSearchInput] = useState(''); // Separate state for search input\n  const [editingQuantity, setEditingQuantity] = useState(null);\n  const [tempQuantity, setTempQuantity] = useState('');\n  const [selectedUnits, setSelectedUnits] = useState({}); // Track selected unit for each product\n  const searchInputRef = useRef(null); // Ref for search input\n  const searchTimeoutRef = useRef(null); // Ref for search timeout\n  const [showSellableToggle, setShowSellableToggle] = useState(false); // Show/hide sellable toggle\n  const [priceMode, setPriceMode] = useState('standard'); // 'standard' or 'wholesale'\n  const [saleMode, setSaleMode] = useState('complete'); // 'complete' or 'pending'\n  const [printReceipt, setPrintReceipt] = useState(true); // true or false\n\n  // Function to get the current price based on price mode\n  const getCurrentPrice = product => {\n    if (priceMode === 'wholesale' && product.wholesale_price) {\n      return parseFloat(product.wholesale_price);\n    }\n    return parseFloat(product.price);\n  };\n\n  // Calculate total amount\n  const calculateTotal = () => {\n    const total = cart.reduce((total, item) => {\n      const unitPrice = item.unit_price || 0;\n      return total + unitPrice * item.quantity;\n    }, 0);\n    console.log('Cart items:', cart.length, 'Total calculated:', total);\n    return total;\n  };\n\n  // Update paid amount when payment type changes\n  useEffect(() => {\n    const total = calculateTotal();\n    if (paymentType === 'full') {\n      setPaidAmount(total);\n    } else if (paymentType === 'partial') {\n      // Only reset to 0 if it's currently set to the full amount\n      if (paidAmount === total) {\n        setPaidAmount(0);\n      }\n    }\n  }, [paymentType, cart]);\n\n  // Function to get the current price for a specific unit\n  const getCurrentUnitPrice = (product, unitStockInfo) => {\n    if (!(unitStockInfo !== null && unitStockInfo !== void 0 && unitStockInfo.price)) return 0;\n\n    // If we're in standard mode, return the standard unit price\n    if (priceMode === 'standard') {\n      return unitStockInfo.price;\n    }\n\n    // If we're in wholesale mode, we need to calculate the wholesale price for this unit\n    if (priceMode === 'wholesale' && product.wholesale_price) {\n      const standardBasePrice = parseFloat(product.price);\n      const wholesaleBasePrice = parseFloat(product.wholesale_price);\n\n      // Handle edge cases\n      if (!standardBasePrice || standardBasePrice <= 0) {\n        console.warn('Invalid standard base price:', standardBasePrice);\n        return unitStockInfo.price;\n      }\n\n      // Calculate the conversion factor from standard to wholesale\n      const wholesaleConversionFactor = wholesaleBasePrice / standardBasePrice;\n\n      // Apply the conversion factor to the unit price\n      const wholesaleUnitPrice = unitStockInfo.price * wholesaleConversionFactor;\n\n      // Round to 2 decimal places to avoid floating point precision issues\n      const roundedPrice = Math.round(wholesaleUnitPrice * 100) / 100;\n\n      // Ensure we return a valid number\n      return isNaN(roundedPrice) || roundedPrice < 0 ? unitStockInfo.price : roundedPrice;\n    }\n\n    // Fallback to standard price\n    return unitStockInfo.price;\n  };\n  useEffect(() => {\n    const initializeData = async () => {\n      await fetchCategories();\n      await fetchProducts(); // Wait for categories to be loaded before fetching products\n    };\n    initializeData();\n  }, []);\n\n  // Re-filter products when categories are loaded (to apply sellable filtering)\n  useEffect(() => {\n    if (categories.length > 0 && products.length > 0) {\n      console.log('Categories loaded, re-filtering products to apply sellable filtering');\n      fetchProducts(filters); // Re-fetch with current filters to apply sellable filtering\n    }\n  }, [categories.length]); // Only when categories are loaded\n\n  // Debounced search effect - completely rewritten for stability\n  useEffect(() => {\n    // Clear existing timeout\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    // Set new timeout\n    searchTimeoutRef.current = setTimeout(() => {\n      if (searchInput !== filters.search) {\n        const newFilters = {\n          ...filters,\n          search: searchInput\n        };\n        setFilters(newFilters);\n        fetchProducts(newFilters);\n      }\n    }, 500);\n\n    // Cleanup function\n    return () => {\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n    };\n  }, [searchInput, filters]); // Depend on searchInput and filters\n\n  useEffect(() => {\n    // Fetch stock availability for ALL products in bulk to improve performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n\n    // Set default selected units (default unit first, then base unit) for products with multiple compatible units\n    const defaultUnits = {};\n    products.forEach(product => {\n      if (product.compatible_units && product.compatible_units.length > 1) {\n        // First try to find the default unit (is_default: true)\n        let selectedUnit = product.compatible_units.find(u => u.is_default);\n\n        // If no default unit, fall back to base unit (is_base_unit: true)\n        if (!selectedUnit) {\n          selectedUnit = product.compatible_units.find(u => u.unit.is_base_unit);\n        }\n\n        // If still no unit found, use the first one\n        if (!selectedUnit) {\n          selectedUnit = product.compatible_units[0];\n        }\n        if (selectedUnit) {\n          var _selectedUnit$unit;\n          defaultUnits[product.id] = ((_selectedUnit$unit = selectedUnit.unit) === null || _selectedUnit$unit === void 0 ? void 0 : _selectedUnit$unit.id) || selectedUnit.unit;\n        }\n      }\n    });\n    setSelectedUnits(defaultUnits);\n  }, [products]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchBulkStockAvailability = async () => {\n    try {\n      const productIds = products.map(product => product.id);\n      const response = await api.post('/products/bulk-stock-availability/', {\n        product_ids: productIds\n      });\n\n      // Convert the response to the format expected by the existing code\n      const stockData = {};\n      Object.values(response.data).forEach(productStock => {\n        stockData[productStock.product_id] = productStock.available_units;\n      });\n      setStockAvailability(stockData);\n    } catch (err) {\n      console.error('Bulk stock availability error:', err);\n      // Fallback to individual calls if bulk fails\n      products.forEach(product => {\n        fetchStockAvailability(product.id);\n      });\n    }\n  };\n  const refreshStockAvailability = () => {\n    // Use bulk fetch for better performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n  };\n  const getUpdatedStockAvailability = productId => {\n    // Get the base stock availability for this product\n    const baseStockInfo = stockAvailability[productId];\n    if (!baseStockInfo) {\n      return null;\n    }\n\n    // Calculate total pieces already in cart for this product (convert all units to pieces)\n    const totalPiecesInCart = cart.filter(item => item.id === productId).reduce((total, item) => {\n      // Find the unit info to get conversion factor\n      const unitInfo = baseStockInfo.find(u => u.id === item.unit_id);\n      if (unitInfo && unitInfo.conversion_factor) {\n        // Convert to pieces: if 1 carton = 20 pieces, then quantity * 20\n        return total + item.quantity * unitInfo.conversion_factor;\n      } else if (unitInfo && unitInfo.is_base_unit) {\n        // If it's the base unit (pieces), no conversion needed\n        return total + item.quantity;\n      }\n      return total;\n    }, 0);\n\n    // Calculate remaining pieces in base stock\n    const baseUnit = baseStockInfo.find(u => u.is_base_unit);\n    const totalBaseStock = baseUnit ? baseUnit.available_quantity : 0;\n    const remainingPieces = Math.max(0, totalBaseStock - totalPiecesInCart);\n\n    // Update each unit's available quantity based on remaining pieces\n    return baseStockInfo.map(unit => {\n      let availableQuantity = 0;\n      let isAvailable = false;\n      if (unit.is_base_unit) {\n        // For base unit (pieces), use remaining pieces directly\n        availableQuantity = remainingPieces;\n        isAvailable = remainingPieces > 0;\n      } else if (unit.conversion_factor) {\n        // For other units, calculate how many can be made from remaining pieces\n        // If 1 carton = 20 pieces, then remainingPieces / 20 = available cartons\n        availableQuantity = Math.floor(remainingPieces / unit.conversion_factor);\n        isAvailable = availableQuantity > 0;\n      }\n      return {\n        ...unit,\n        available_quantity: availableQuantity,\n        is_available: isAvailable\n      };\n    });\n  };\n  const fetchProducts = async (filterParams = {}) => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n\n      // Always filter for active products\n      params.append('is_active', 'true');\n\n      // Add filters to params\n      if (filterParams.category) params.append('category', filterParams.category);\n      if (filterParams.search) params.append('search', filterParams.search);\n      const url = `/products/${params.toString() ? '?' + params.toString() : ''}`;\n      const response = await api.get(url);\n      const allProducts = response.data.results || response.data;\n\n      // Debug: Log the first product to see its structure\n      if (allProducts.length > 0) {\n        console.log('First product structure:', allProducts[0]);\n        console.log('Categories loaded:', categories.length);\n      }\n\n      // If categories are not loaded yet, show all products but log a warning\n      if (categories.length === 0) {\n        console.warn('Categories not loaded yet, showing all products (filtering will be applied once categories load)');\n        setProducts(allProducts);\n        return;\n      }\n\n      // ALWAYS filter out products from non-sellable categories\n      const sellableProducts = allProducts.filter(product => {\n        let isSellable = false;\n\n        // If product has category information, check if category is sellable\n        if (product.category && product.category.is_sellable !== undefined) {\n          isSellable = product.category.is_sellable;\n        }\n        // If product has category_name, find the category in our categories list\n        else if (product.category_name) {\n          const category = categories.find(cat => cat.name === product.category_name);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If product has category ID, find the category in our categories list\n        else if (product.category && typeof product.category === 'number') {\n          const category = categories.find(cat => cat.id === product.category);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If no category information, exclude the product (safer approach)\n        else {\n          isSellable = false;\n        }\n\n        // Debug: Log filtering decision\n        if (!isSellable) {\n          console.log(`Filtering out product: ${product.name} (category: ${product.category_name || product.category})`);\n        }\n        return isSellable;\n      });\n\n      // Additional check: if a specific category is selected, ensure it's sellable\n      if (filterParams.category) {\n        const selectedCategory = categories.find(cat => cat.id === parseInt(filterParams.category));\n        if (selectedCategory && !selectedCategory.is_sellable) {\n          // If selected category is not sellable, return empty array\n          setProducts([]);\n          return;\n        }\n      }\n      setProducts(sellableProducts);\n    } catch (err) {\n      setError('Failed to load products');\n      console.error('Products error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchCategories = async () => {\n    try {\n      const response = await api.get('/products/categories/');\n      setCategories(response.data.results || response.data);\n    } catch (err) {\n      console.error('Categories error:', err);\n    }\n  };\n  const fetchStockAvailability = async productId => {\n    try {\n      const response = await api.get(`/products/${productId}/stock-availability/`);\n      setStockAvailability(prev => ({\n        ...prev,\n        [productId]: response.data.available_units\n      }));\n    } catch (err) {\n      console.error('Stock availability error:', err);\n    }\n  };\n  const addToCart = (product, selectedUnit = null) => {\n    // Use the first compatible unit if none selected\n    let unit = selectedUnit;\n    if (!unit && product.compatible_units && product.compatible_units[0]) {\n      var _compatibleUnit$unit, _compatibleUnit$unit2, _compatibleUnit$unit3;\n      const compatibleUnit = product.compatible_units[0];\n      unit = {\n        id: ((_compatibleUnit$unit = compatibleUnit.unit) === null || _compatibleUnit$unit === void 0 ? void 0 : _compatibleUnit$unit.id) || compatibleUnit.unit,\n        name: compatibleUnit.unit_name || ((_compatibleUnit$unit2 = compatibleUnit.unit) === null || _compatibleUnit$unit2 === void 0 ? void 0 : _compatibleUnit$unit2.name) || 'Piece',\n        symbol: compatibleUnit.unit_symbol || ((_compatibleUnit$unit3 = compatibleUnit.unit) === null || _compatibleUnit$unit3 === void 0 ? void 0 : _compatibleUnit$unit3.symbol) || 'piece'\n      };\n    }\n    if (!unit) {\n      var _product$base_unit;\n      unit = {\n        id: ((_product$base_unit = product.base_unit) === null || _product$base_unit === void 0 ? void 0 : _product$base_unit.id) || product.base_unit,\n        name: 'Piece',\n        symbol: 'piece'\n      };\n    }\n\n    // Skip stock validation for pending sales since stock won't be removed until completion\n    if (saleMode === 'complete') {\n      // Check if stock availability data is loaded\n      if (!stockAvailability[product.id]) {\n        setError('Loading stock information... Please try again.');\n        return;\n      }\n\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unit.id);\n      if (!unitStockInfo) {\n        setError(`Unit ${unit.name} not found in stock information`);\n        return;\n      }\n      if (!unitStockInfo.is_available) {\n        setError(`${unit.name} is out of stock`);\n        return;\n      }\n\n      // Check if there's enough stock for the selected unit\n      if (unitStockInfo.available_quantity <= 0) {\n        setError(`No ${unit.name} stock left`);\n        return;\n      }\n    }\n    const existingItem = cart.find(item => item.id === product.id && item.unit_id === unit.id && item.price_mode === priceMode);\n    if (existingItem) {\n      // Check if adding 1 more would exceed available quantity (only for complete sales)\n      if (saleMode === 'complete') {\n        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n        const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unit.id);\n        if (unitStockInfo && existingItem.quantity + 1 > unitStockInfo.available_quantity) {\n          setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n          return;\n        }\n      }\n      setCart(cart.map(item => item.id === product.id && item.unit_id === unit.id && item.price_mode === priceMode ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item));\n    } else {\n      // Check if adding 1 would exceed available quantity (only for complete sales)\n      if (saleMode === 'complete') {\n        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n        const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unit.id);\n        if (unitStockInfo && 1 > unitStockInfo.available_quantity) {\n          setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n          return;\n        }\n      }\n      // Get unit stock info for price calculation\n      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unit.id);\n      const newCartItem = {\n        ...product,\n        quantity: 1,\n        unit_id: unit.id,\n        unit_name: unit.name,\n        unit_symbol: unit.symbol,\n        unit_price: getCurrentUnitPrice(product, unitStockInfo) || getCurrentPrice(product),\n        price_mode: priceMode\n      };\n      setCart([...cart, newCartItem]);\n    }\n    setError('');\n  };\n  const updateQuantity = (productId, unitId, quantity, priceMode = null) => {\n    if (quantity <= 0) {\n      setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)));\n    } else {\n      // Skip stock validation for pending sales since stock won't be removed until completion\n      if (saleMode === 'complete') {\n        // Check updated stock availability for the selected unit\n        const updatedStockInfo = getUpdatedStockAvailability(productId);\n        const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unitId);\n        if (!unitStockInfo || !unitStockInfo.is_available) {\n          setError(`Unit is out of stock`);\n          return;\n        }\n\n        // For updateQuantity, we need to consider the current cart quantity\n        const currentCartQuantity = cart.filter(item => item.id === productId && item.unit_id === unitId && item.price_mode === priceMode).reduce((sum, item) => sum + item.quantity, 0);\n\n        // Calculate how much we can add (available + what's already in cart)\n        const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n        if (quantity > maxAllowed) {\n          setError(`Not enough stock available. Max: ${maxAllowed}`);\n          return;\n        }\n      }\n      setCart(cart.map(item => item.id === productId && item.unit_id === unitId && item.price_mode === priceMode ? {\n        ...item,\n        quantity\n      } : item));\n      setError('');\n    }\n  };\n  const removeFromCart = (productId, unitId, priceMode = null) => {\n    setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)));\n  };\n  const calculateSubtotal = () => {\n    return cart.reduce((total, item) => total + item.quantity * item.unit_price, 0);\n  };\n  const calculateTax = () => {\n    let totalTax = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: tax = (price × tax_rate) / (100 + tax_rate)\n        const itemTax = item.quantity * item.unit_price * item.tax_rate / (100 + item.tax_rate);\n        totalTax += itemTax;\n      }\n    });\n    return totalTax;\n  };\n  const calculateCost = () => {\n    let totalCost = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: cost = (price × 100) / (100 + tax_rate)\n        const itemCost = item.quantity * item.unit_price * 100 / (100 + item.tax_rate);\n        totalCost += itemCost;\n      } else {\n        // No tax, full price is cost\n        totalCost += item.quantity * item.unit_price;\n      }\n    });\n    return totalCost;\n  };\n  const autoPrintReceipt = async (saleNumber, saleData, saleStatus = 'completed') => {\n    try {\n      // Create print content for the sale\n      const printData = {\n        sale_number: saleNumber,\n        customer_name: customerInfo.name || 'Walk-in Customer',\n        customer_phone: customerInfo.phone || '',\n        customer_email: customerInfo.email || '',\n        user_name: (user === null || user === void 0 ? void 0 : user.username) || 'Unknown User',\n        user_id: (user === null || user === void 0 ? void 0 : user.id) || 'unknown',\n        created_at: new Date().toISOString(),\n        print_timestamp: new Date().toISOString(),\n        print_id: `PRINT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        status: saleStatus,\n        total_amount: calculateSubtotal(),\n        items: cart.map(item => {\n          var _item$unit;\n          return {\n            product_name: item.name,\n            product_sku: item.sku,\n            quantity: item.quantity,\n            unit_name: item.unit_name || ((_item$unit = item.unit) === null || _item$unit === void 0 ? void 0 : _item$unit.name) || 'piece',\n            unit_price: item.unit_price,\n            total_price: item.unit_price * item.quantity\n          };\n        })\n      };\n\n      // Generate print content using the same logic as PrintButton\n      const printContent = generatePrintContent(printData, 'Sale Receipt', 'sale');\n\n      // Open print window\n      const printWindow = window.open('', '_blank', 'width=800,height=600');\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n\n      // Wait for content to load then print\n      const printAfterLoad = () => {\n        printWindow.focus();\n        printWindow.print();\n        // Close the window after a short delay\n        setTimeout(() => {\n          printWindow.close();\n        }, 1000);\n      };\n\n      // Check if window is already loaded\n      if (printWindow.document.readyState === 'complete') {\n        printAfterLoad();\n      } else {\n        printWindow.onload = printAfterLoad;\n      }\n    } catch (error) {\n      console.error('Auto-print error:', error);\n      // Don't show error to user as it's not critical\n    }\n  };\n  const handleCheckout = async () => {\n    if (cart.length === 0) {\n      setError('Cart is empty. Please add items to the cart before completing the sale.');\n      return;\n    }\n    setProcessing(true);\n    setError('');\n\n    // Validate customer name for partial payments\n    if (paymentType === 'partial' && (!customerInfo.name || !customerInfo.name.trim())) {\n      setError('Customer name is required for partial payments');\n      setProcessing(false);\n      return;\n    }\n\n    // Validate paid amount\n    const total = calculateTotal();\n    if (paidAmount > total) {\n      setError('Paid amount cannot exceed the total amount');\n      setProcessing(false);\n      return;\n    }\n    if (paidAmount < 0) {\n      setError('Paid amount cannot be negative');\n      setProcessing(false);\n      return;\n    }\n    try {\n      const saleData = {\n        sale_type: 'sale',\n        customer_name: customerInfo.name,\n        customer_phone: customerInfo.phone,\n        customer_email: customerInfo.email,\n        payment_method: paymentMethod,\n        paid_amount: paidAmount,\n        items: cart.map(item => {\n          // More robust unit ID extraction\n          let unitId = item.unit_id;\n          if (typeof unitId === 'object' && unitId !== null) {\n            unitId = unitId.id || unitId;\n          }\n          return {\n            product: item.id,\n            quantity: parseFloat(item.quantity),\n            unit: parseInt(unitId),\n            unit_price: parseFloat(item.unit_price),\n            price_mode: item.price_mode || 'standard'\n          };\n        })\n      };\n\n      // Create the sale\n      const response = await api.post('/sales/', saleData);\n      const saleId = response.data.id;\n      const saleNumber = response.data.sale_number;\n      if (saleMode === 'complete') {\n        // Complete the sale immediately\n        try {\n          await api.post(`/sales/${saleId}/complete/`);\n\n          // Auto-print the receipt after successful sale completion (only if printReceipt is true)\n          if (printReceipt) {\n            await autoPrintReceipt(saleNumber, response.data, 'completed');\n          }\n\n          // Clear cart and customer info\n          setCart([]);\n          setCustomerInfo({\n            name: '',\n            phone: '',\n            email: ''\n          });\n\n          // Reset price mode to standard after sale\n          setPriceMode('standard');\n\n          // Wait a moment for the backend to process stock movements\n          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\n\n          // Refresh product data to update stock quantities\n          await fetchProducts();\n\n          // Wait another moment for stock availability to be updated\n          await new Promise(resolve => setTimeout(resolve, 500)); // Wait 0.5 seconds\n\n          // Refresh stock availability for all products\n          refreshStockAvailability();\n          alert(`Sale completed successfully! Sale Number: ${saleNumber}`);\n        } catch (completeError) {\n          var _completeError$respon, _completeError$respon2;\n          // Sale was created but completion failed\n          console.error('Sale completion error:', completeError);\n          setError(`Sale created (${saleNumber}) but completion failed: ${((_completeError$respon = completeError.response) === null || _completeError$respon === void 0 ? void 0 : (_completeError$respon2 = _completeError$respon.data) === null || _completeError$respon2 === void 0 ? void 0 : _completeError$respon2.error) || completeError.message}`);\n\n          // Still clear the cart since the sale was created\n          setCart([]);\n          setCustomerInfo({\n            name: '',\n            phone: '',\n            email: ''\n          });\n\n          // Wait for backend to process any completed stock movements\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          // Refresh data\n          await fetchProducts();\n          await new Promise(resolve => setTimeout(resolve, 500));\n          refreshStockAvailability();\n        }\n      } else {\n        // Create pending sale (don't complete it)\n\n        // Print receipt for pending sale if requested\n        if (printReceipt) {\n          await autoPrintReceipt(saleNumber, response.data, 'pending');\n        }\n\n        // Clear cart and customer info\n        setCart([]);\n        setCustomerInfo({\n          name: '',\n          phone: '',\n          email: ''\n        });\n\n        // Reset price mode to standard after sale\n        setPriceMode('standard');\n        alert(`Pending sale created! Sale Number: ${saleNumber}\\nYou can complete it later in Sales Management.`);\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.detail) || 'Failed to create sale');\n      console.error('Sale creation error:', err);\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const clearCart = () => {\n    setCart([]);\n    setError('');\n  };\n  const handleFilterChange = (filterType, value) => {\n    if (filterType === 'search') {\n      // For search, update the input state immediately (no API call)\n      setSearchInput(value);\n    } else {\n      // For other filters (like category), update immediately\n      const newFilters = {\n        ...filters,\n        [filterType]: value\n      };\n      setFilters(newFilters);\n      fetchProducts(newFilters);\n    }\n  };\n  const clearFilters = () => {\n    const clearedFilters = {\n      category: '',\n      search: ''\n    };\n    setFilters(clearedFilters);\n    setSearchInput(''); // Clear the search input state\n    fetchProducts(clearedFilters);\n  };\n  const toggleCategorySellable = async (categoryId, isSellable) => {\n    try {\n      await api.patch(`/products/categories/${categoryId}/`, {\n        is_sellable: !isSellable\n      });\n      // Refresh categories to show updated status\n      await fetchCategories();\n      // Refresh products to apply new sellable filter\n      fetchProducts(filters);\n    } catch (err) {\n      console.error('Error updating category sellable status:', err);\n      setError('Failed to update category status');\n    }\n  };\n  const handleQuantityClick = item => {\n    setEditingQuantity(`${item.id}-${item.unit_id}`);\n    setTempQuantity(item.quantity.toString());\n  };\n  const handleQuantityChange = e => {\n    const value = e.target.value;\n    // Only allow numbers and empty string\n    if (value === '' || /^\\d+$/.test(value)) {\n      setTempQuantity(value);\n    }\n  };\n  const handleQuantitySubmit = item => {\n    const newQuantity = parseFloat(tempQuantity);\n    if (tempQuantity === '' || isNaN(newQuantity) || newQuantity < 0) {\n      setError('Please enter a valid quantity');\n      setEditingQuantity(null);\n      return;\n    }\n\n    // Skip stock validation for pending sales since stock won't be removed until completion\n    if (saleMode === 'complete') {\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(item.id);\n      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === item.unit_id);\n      if (!unitStockInfo || !unitStockInfo.is_available) {\n        setError(`Unit is out of stock`);\n        setEditingQuantity(null);\n        return;\n      }\n\n      // For handleQuantitySubmit, we need to consider the current cart quantity\n      const currentCartQuantity = cart.filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id && cartItem.price_mode === item.price_mode).reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n\n      // Calculate how much we can add (available + what's already in cart)\n      const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n      if (newQuantity > maxAllowed) {\n        setError(`Not enough stock available. Max: ${maxAllowed}`);\n        setEditingQuantity(null);\n        return;\n      }\n    }\n    if (newQuantity === 0) {\n      // Remove item from cart if quantity is 0\n      removeFromCart(item.id, item.unit_id, item.price_mode);\n    } else {\n      updateQuantity(item.id, item.unit_id, newQuantity, item.price_mode);\n    }\n    setEditingQuantity(null);\n    setTempQuantity('');\n    setError('');\n  };\n  const handleQuantityCancel = () => {\n    setEditingQuantity(null);\n    setTempQuantity('');\n  };\n  const handleQuantityKeyPress = (e, item) => {\n    if (e.key === 'Enter') {\n      handleQuantitySubmit(item);\n    } else if (e.key === 'Escape') {\n      handleQuantityCancel();\n    }\n  };\n  const handleUnitSelection = (productId, unitId) => {\n    setSelectedUnits(prev => ({\n      ...prev,\n      [productId]: unitId\n    }));\n  };\n  const handleProductCardClick = product => {\n    // Don't allow clicking on out-of-stock products (only for complete sales)\n    if (saleMode === 'complete' && product.stock_quantity <= 0) {\n      return;\n    }\n    if (product.compatible_units && product.compatible_units.length > 1) {\n      // For multi-unit products, add with the currently selected unit\n      const selectedUnitId = selectedUnits[product.id];\n      if (selectedUnitId) {\n        const selectedCompatibleUnit = product.compatible_units.find(u => {\n          var _u$unit;\n          return (((_u$unit = u.unit) === null || _u$unit === void 0 ? void 0 : _u$unit.id) || u.unit) === selectedUnitId;\n        });\n        if (selectedCompatibleUnit) {\n          var _selectedCompatibleUn2;\n          // Get the price for this unit from stock availability\n          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n          const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => {\n            var _selectedCompatibleUn;\n            return u.id === (((_selectedCompatibleUn = selectedCompatibleUnit.unit) === null || _selectedCompatibleUn === void 0 ? void 0 : _selectedCompatibleUn.id) || selectedCompatibleUnit.unit);\n          });\n          const unitPrice = getCurrentUnitPrice(product, unitStockInfo) || getCurrentPrice(product);\n\n          // Convert compatible unit to the format expected by addToCart\n          const selectedUnit = {\n            id: ((_selectedCompatibleUn2 = selectedCompatibleUnit.unit) === null || _selectedCompatibleUn2 === void 0 ? void 0 : _selectedCompatibleUn2.id) || selectedCompatibleUnit.unit,\n            name: selectedCompatibleUnit.unit_name,\n            symbol: selectedCompatibleUnit.unit_symbol,\n            price: unitPrice\n          };\n          addToCart(product, selectedUnit);\n        }\n      }\n    } else {\n      // For single-unit products, add directly\n      addToCart(product);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pos\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pos-loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 882,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Loading products...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 883,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 881,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 880,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pos\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pos-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Point of Sale\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 892,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pos-user\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Cashier: \", user === null || user === void 0 ? void 0 : user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 891,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pos-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pos-products\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Products\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 901,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"pos-filters\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Category:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: filters.category,\n              onChange: e => handleFilterChange('category', e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"All Categories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 911,\n                columnNumber: 17\n              }, this), categories.filter(cat => cat.is_sellable).map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: category.id,\n                children: category.name\n              }, category.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 913,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 907,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline\",\n              size: \"small\",\n              onClick: () => setShowSellableToggle(!showSellableToggle),\n              style: {\n                marginTop: '0.5rem'\n              },\n              children: [showSellableToggle ? 'Hide' : 'Manage', \" Categories\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 918,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Price Mode:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 929,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"price-mode-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `price-mode-btn ${priceMode === 'standard' ? 'active' : ''}`,\n                onClick: () => setPriceMode('standard'),\n                children: \"Standard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 931,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `price-mode-btn ${priceMode === 'wholesale' ? 'active' : ''}`,\n                onClick: () => setPriceMode('wholesale'),\n                children: \"Wholesale\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 938,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 930,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Sale Mode:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 949,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sale-mode-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `sale-mode-btn ${saleMode === 'complete' ? 'active' : ''}`,\n                onClick: () => setSaleMode('complete'),\n                title: \"Sale will be completed immediately and stock will be deducted\",\n                children: \"Complete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 951,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `sale-mode-btn ${saleMode === 'pending' ? 'active' : ''}`,\n                onClick: () => setSaleMode('pending'),\n                title: \"Sale will be created as pending and can be completed later\",\n                children: \"Pending\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 959,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 950,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 948,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group print-receipt-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Print Receipt:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 971,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sale-mode-toggle print-receipt-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `sale-mode-btn print-receipt-btn ${printReceipt ? 'active' : ''}`,\n                onClick: () => setPrintReceipt(true),\n                title: \"Print receipt after sale\",\n                children: \"Yes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 973,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `sale-mode-btn print-receipt-btn ${!printReceipt ? 'active' : ''}`,\n                onClick: () => setPrintReceipt(false),\n                title: \"Don't print receipt\",\n                children: \"No\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 981,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 972,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 970,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Search:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 993,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: searchInputRef,\n              type: \"text\",\n              placeholder: \"Search products...\",\n              value: searchInput,\n              onChange: e => handleFilterChange('search', e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 994,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 992,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline\",\n              size: \"small\",\n              onClick: clearFilters,\n              children: \"Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1003,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1002,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 904,\n          columnNumber: 11\n        }, this), showSellableToggle && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category-management\",\n          style: {\n            marginBottom: '1rem',\n            padding: '1rem',\n            backgroundColor: '#f9fafb',\n            borderRadius: '0.5rem',\n            border: '1px solid #e5e7eb'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            style: {\n              margin: '0 0 1rem 0',\n              fontSize: '1rem',\n              fontWeight: '600'\n            },\n            children: \"Manage Sellable Categories\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1018,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'grid',\n              gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n              gap: '0.5rem'\n            },\n            children: categories.map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                padding: '0.5rem',\n                backgroundColor: 'white',\n                borderRadius: '0.375rem',\n                border: '1px solid #e5e7eb'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: '0.875rem',\n                  fontWeight: '500'\n                },\n                children: category.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1036,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => toggleCategorySellable(category.id, category.is_sellable),\n                style: {\n                  padding: '0.25rem 0.5rem',\n                  fontSize: '0.75rem',\n                  borderRadius: '0.25rem',\n                  border: '1px solid',\n                  cursor: 'pointer',\n                  backgroundColor: category.is_sellable ? '#dcfce7' : '#fee2e2',\n                  borderColor: category.is_sellable ? '#16a34a' : '#dc2626',\n                  color: category.is_sellable ? '#15803d' : '#dc2626'\n                },\n                children: category.is_sellable ? 'Sellable' : 'Not Sellable'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1039,\n                columnNumber: 21\n              }, this)]\n            }, category.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1027,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1021,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"products-info\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"products-count\",\n            children: [products.length, \" product\", products.length !== 1 ? 's' : '', \" found\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1061,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1060,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"products-grid\",\n          children: products.map(product => {\n            var _product$compatible_u;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `product-card ${product.stock_quantity <= 0 && saleMode === 'complete' ? 'out-of-stock' : ''} clickable`,\n              onClick: () => handleProductCardClick(product),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"product-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: product.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1074,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"product-sku\",\n                  children: product.sku\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1075,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"product-price\",\n                  children: [getCurrentPrice(product).toFixed(2), \" MGA\", product.compatible_units && product.compatible_units.length > 1 && ` (base unit: ${((_product$compatible_u = product.compatible_units.find(u => u.unit.is_base_unit)) === null || _product$compatible_u === void 0 ? void 0 : _product$compatible_u.unit.symbol) || 'piece'})`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1076,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"product-stock\",\n                  children: [\"Stock: \", product.stock_quantity, \" \", product.unit, stockAvailability[product.id] && product.compatible_units && product.compatible_units.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stock-details\",\n                    children: (() => {\n                      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                      return product.compatible_units.map(compatibleUnit => {\n                        var _compatibleUnit$unit5, _compatibleUnit$unit6;\n                        const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => {\n                          var _compatibleUnit$unit4;\n                          return u.id === (((_compatibleUnit$unit4 = compatibleUnit.unit) === null || _compatibleUnit$unit4 === void 0 ? void 0 : _compatibleUnit$unit4.id) || compatibleUnit.unit);\n                        });\n                        if (!unitStockInfo) return null;\n\n                        // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                        const unitName = (unitStockInfo === null || unitStockInfo === void 0 ? void 0 : unitStockInfo.name) || ((_compatibleUnit$unit5 = compatibleUnit.unit) === null || _compatibleUnit$unit5 === void 0 ? void 0 : _compatibleUnit$unit5.name) || compatibleUnit.unit_name;\n                        return /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: `unit-stock ${unitStockInfo.is_available ? 'available' : 'unavailable'}`,\n                          children: [unitName, \": \", unitStockInfo.available_quantity]\n                        }, ((_compatibleUnit$unit6 = compatibleUnit.unit) === null || _compatibleUnit$unit6 === void 0 ? void 0 : _compatibleUnit$unit6.id) || compatibleUnit.unit, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1096,\n                          columnNumber: 31\n                        }, this);\n                      }).filter(Boolean);\n                    })()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1085,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1082,\n                  columnNumber: 19\n                }, this), product.compatible_units && product.compatible_units.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"unit-selection\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Unit:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1109,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"unit-select\",\n                    value: selectedUnits[product.id] || '',\n                    onChange: e => {\n                      const unitId = parseInt(e.target.value);\n                      handleUnitSelection(product.id, unitId);\n                    },\n                    onClick: e => e.stopPropagation(),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"Select Unit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1119,\n                      columnNumber: 25\n                    }, this), product.compatible_units.map((compatibleUnit, index) => {\n                      var _compatibleUnit$unit8, _compatibleUnit$unit9, _compatibleUnit$unit0, _compatibleUnit$unit1;\n                      // Use updated stock availability that considers cart contents\n                      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => {\n                        var _compatibleUnit$unit7;\n                        return u.id === (((_compatibleUnit$unit7 = compatibleUnit.unit) === null || _compatibleUnit$unit7 === void 0 ? void 0 : _compatibleUnit$unit7.id) || compatibleUnit.unit);\n                      });\n                      const isAvailable = unitStockInfo ? unitStockInfo.is_available : false;\n                      const availableQty = unitStockInfo ? unitStockInfo.available_quantity : 0;\n\n                      // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                      const unitName = (unitStockInfo === null || unitStockInfo === void 0 ? void 0 : unitStockInfo.name) || ((_compatibleUnit$unit8 = compatibleUnit.unit) === null || _compatibleUnit$unit8 === void 0 ? void 0 : _compatibleUnit$unit8.name) || compatibleUnit.unit_name;\n                      const unitSymbol = (unitStockInfo === null || unitStockInfo === void 0 ? void 0 : unitStockInfo.symbol) || ((_compatibleUnit$unit9 = compatibleUnit.unit) === null || _compatibleUnit$unit9 === void 0 ? void 0 : _compatibleUnit$unit9.symbol) || compatibleUnit.unit_symbol;\n                      return /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: ((_compatibleUnit$unit1 = compatibleUnit.unit) === null || _compatibleUnit$unit1 === void 0 ? void 0 : _compatibleUnit$unit1.id) || compatibleUnit.unit,\n                        disabled: saleMode === 'complete' ? !isAvailable : false,\n                        children: [unitName, \" (\", unitSymbol, \") - \", getCurrentUnitPrice(product, unitStockInfo).toFixed(2), \" MGA\", !isAvailable && saleMode === 'complete' ? ' - OUT OF STOCK' : ` - ${availableQty} available`]\n                      }, ((_compatibleUnit$unit0 = compatibleUnit.unit) === null || _compatibleUnit$unit0 === void 0 ? void 0 : _compatibleUnit$unit0.id) || compatibleUnit.unit, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1133,\n                        columnNumber: 29\n                      }, this);\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1110,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1108,\n                  columnNumber: 21\n                }, this), (!product.compatible_units || product.compatible_units.length <= 1) && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  size: \"small\",\n                  onClick: () => addToCart(product),\n                  disabled: (() => {\n                    // Skip stock validation for pending sales since stock won't be removed until completion\n                    if (saleMode === 'pending') {\n                      return false; // Always allow for pending sales\n                    }\n\n                    // Check if any unit has available stock\n                    if (!stockAvailability[product.id]) {\n                      return true; // Disable if stock data not loaded\n                    }\n\n                    // For single unit products, check base stock\n                    return product.stock_quantity <= 0;\n                  })(),\n                  className: \"add-to-cart-btn\",\n                  children: (() => {\n                    if (!stockAvailability[product.id]) {\n                      return 'Loading...';\n                    }\n\n                    // For pending sales, always show \"Add to Cart\" regardless of stock\n                    if (saleMode === 'pending') {\n                      return 'Add to Cart';\n                    }\n                    return product.stock_quantity <= 0 ? 'Out of Stock' : 'Add to Cart';\n                  })()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1150,\n                  columnNumber: 21\n                }, this), product.available_units && product.available_units.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"unit-instruction\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Click card or select unit to add to cart\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1188,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1187,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1073,\n                columnNumber: 17\n              }, this)\n            }, product.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1068,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1066,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pos-cart\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Shopping Cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1201,\n            columnNumber: 13\n          }, this), cart.length > 0 && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline\",\n            size: \"small\",\n            onClick: clearCart,\n            children: \"Clear Cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1203,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1200,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-items\",\n          children: cart.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-cart\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Cart is empty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1218,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-cart-hint\",\n              children: \"Add items from the product list to start a sale\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1219,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1217,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cart-table-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-product\",\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1224,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-unit\",\n                children: \"Unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1225,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-price\",\n                children: \"Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1226,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-quantity\",\n                children: \"Qty\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1227,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-total\",\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1228,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-actions\",\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1229,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1223,\n              columnNumber: 17\n            }, this), cart.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cart-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-product\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1234,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"item-sku\",\n                  children: [\"SKU: \", item.sku]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1235,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `price-mode-badge ${item.price_mode}`,\n                  children: item.price_mode === 'wholesale' ? 'WS' : 'STD'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1236,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1233,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-unit\",\n                children: item.unit_symbol || 'piece'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1240,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-price\",\n                children: [parseFloat(item.unit_price).toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1243,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-quantity\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"quantity-controls\",\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    size: \"small\",\n                    variant: \"outline\",\n                    onClick: () => updateQuantity(item.id, item.unit_id, item.quantity - 1, item.price_mode),\n                    children: \"-\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1248,\n                    columnNumber: 25\n                  }, this), editingQuantity === `${item.id}-${item.unit_id}` ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"quantity-edit\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"number\",\n                      value: tempQuantity,\n                      onChange: handleQuantityChange,\n                      onKeyPress: e => handleQuantityKeyPress(e, item),\n                      onBlur: () => handleQuantitySubmit(item),\n                      className: \"quantity-input\",\n                      min: \"0\",\n                      max: item.stock_quantity,\n                      autoFocus: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1257,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1256,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"quantity clickable\",\n                    onClick: () => handleQuantityClick(item),\n                    title: \"Click to edit quantity\",\n                    children: item.quantity\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1270,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    size: \"small\",\n                    variant: \"outline\",\n                    onClick: () => updateQuantity(item.id, item.unit_id, item.quantity + 1, item.price_mode),\n                    disabled: (() => {\n                      // Skip stock validation for pending sales since stock won't be removed until completion\n                      if (saleMode === 'pending') {\n                        return false; // Always allow for pending sales\n                      }\n                      const updatedStockInfo = getUpdatedStockAvailability(item.id);\n                      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === item.unit_id);\n                      const currentCartQuantity = cart.filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id && cartItem.price_mode === item.price_mode).reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n                      const maxAllowed = ((unitStockInfo === null || unitStockInfo === void 0 ? void 0 : unitStockInfo.available_quantity) || 0) + currentCartQuantity;\n                      return item.quantity >= maxAllowed;\n                    })(),\n                    children: \"+\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1278,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1247,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1246,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-total\",\n                children: [(item.quantity * item.unit_price).toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1301,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-actions\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"small\",\n                  variant: \"danger\",\n                  onClick: () => removeFromCart(item.id, item.unit_id, item.price_mode),\n                  title: \"Remove item\",\n                  children: \"\\xD7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1305,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1304,\n                columnNumber: 21\n              }, this)]\n            }, `${item.id}-${item.unit_id}-${item.price_mode}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1232,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1215,\n          columnNumber: 11\n        }, this), cart.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cart-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total Amount:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1324,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateSubtotal().toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1325,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1323,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-row cost-breakdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Cost (excl. tax):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1328,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateCost().toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1329,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1327,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-row tax-breakdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Tax included:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1332,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateTax().toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1333,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1331,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-row total\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1336,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateSubtotal().toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1337,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1335,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1322,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"checkout-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"customer-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Customer Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1343,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Customer Name (Optional)\",\n                  value: customerInfo.name,\n                  onChange: e => setCustomerInfo({\n                    ...customerInfo,\n                    name: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1345,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1344,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"tel\",\n                  placeholder: \"Phone Number (Optional)\",\n                  value: customerInfo.phone,\n                  onChange: e => setCustomerInfo({\n                    ...customerInfo,\n                    phone: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1353,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1352,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"email\",\n                  placeholder: \"Email (Optional)\",\n                  value: customerInfo.email,\n                  onChange: e => setCustomerInfo({\n                    ...customerInfo,\n                    email: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1361,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1360,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1342,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"payment-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Payment Method\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1371,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"payment-methods\",\n                children: ['cash', 'card', 'mobile_money', 'bank_transfer'].map(method => /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"payment-method\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    name: \"payment\",\n                    value: method,\n                    checked: paymentMethod === method,\n                    onChange: e => setPaymentMethod(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1375,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: method.replace('_', ' ').toUpperCase()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1382,\n                    columnNumber: 23\n                  }, this)]\n                }, method, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1374,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1372,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Payment Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1387,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"payment-types\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"payment-type\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    name: \"paymentType\",\n                    value: \"full\",\n                    checked: paymentType === 'full',\n                    onChange: e => setPaymentType(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1390,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Full Payment (100%)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1397,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1389,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"payment-type\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    name: \"paymentType\",\n                    value: \"partial\",\n                    checked: paymentType === 'partial',\n                    onChange: e => setPaymentType(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1400,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Partial Payment (0-99.99%)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1407,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1399,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1388,\n                columnNumber: 17\n              }, this), paymentType === 'partial' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Amount to Pay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1413,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  step: \"0.01\",\n                  min: \"0\",\n                  max: calculateTotal(),\n                  value: paidAmount || 0,\n                  onChange: e => {\n                    const value = parseFloat(e.target.value) || 0;\n                    setPaidAmount(value);\n                  },\n                  placeholder: \"Enter amount to pay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1414,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"Total: $\", calculateTotal().toFixed(2), \" | Remaining: $\", (calculateTotal() - (paidAmount || 0)).toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1426,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1412,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1370,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1341,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkout-actions\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleCheckout,\n              loading: processing,\n              className: \"validate-button\",\n              size: \"large\",\n              variant: \"primary\",\n              disabled: cart.length === 0,\n              children: [saleMode === 'complete' ? 'Complete Sale' : 'Create Pending Sale', printReceipt && ' & Print Receipt']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1433,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1432,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 898,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 890,\n    columnNumber: 5\n  }, this);\n};\n_s(PointOfSale, \"FLEOzNkbfoWkIFkNjKXJW0ZDHxk=\", false, function () {\n  return [useAuth];\n});\n_c = PointOfSale;\nexport default PointOfSale;\nvar _c;\n$RefreshReg$(_c, \"PointOfSale\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useAuth","api","Button","generatePrintContent","jsxDEV","_jsxDEV","Fragment","_Fragment","PointOfSale","_s","user","products","setProducts","categories","setCategories","cart","setCart","customerInfo","setCustomerInfo","name","phone","email","paymentMethod","setPaymentMethod","paymentType","setPaymentType","paidAmount","setPaidAmount","loading","setLoading","processing","setProcessing","error","setError","stockAvailability","setStockAvailability","filters","setFilters","category","search","searchInput","setSearchInput","editingQuantity","setEditingQuantity","tempQuantity","setTempQuantity","selectedUnits","setSelectedUnits","searchInputRef","searchTimeoutRef","showSellableToggle","setShowSellableToggle","priceMode","setPriceMode","saleMode","setSaleMode","printReceipt","setPrintReceipt","getCurrentPrice","product","wholesale_price","parseFloat","price","calculateTotal","total","reduce","item","unitPrice","unit_price","quantity","console","log","length","getCurrentUnitPrice","unitStockInfo","standardBasePrice","wholesaleBasePrice","warn","wholesaleConversionFactor","wholesaleUnitPrice","roundedPrice","Math","round","isNaN","initializeData","fetchCategories","fetchProducts","current","clearTimeout","setTimeout","newFilters","fetchBulkStockAvailability","defaultUnits","forEach","compatible_units","selectedUnit","find","u","is_default","unit","is_base_unit","_selectedUnit$unit","id","productIds","map","response","post","product_ids","stockData","Object","values","data","productStock","product_id","available_units","err","fetchStockAvailability","refreshStockAvailability","getUpdatedStockAvailability","productId","baseStockInfo","totalPiecesInCart","filter","unitInfo","unit_id","conversion_factor","baseUnit","totalBaseStock","available_quantity","remainingPieces","max","availableQuantity","isAvailable","floor","is_available","filterParams","params","URLSearchParams","append","url","toString","get","allProducts","results","sellableProducts","isSellable","is_sellable","undefined","category_name","cat","selectedCategory","parseInt","prev","addToCart","_compatibleUnit$unit","_compatibleUnit$unit2","_compatibleUnit$unit3","compatibleUnit","unit_name","symbol","unit_symbol","_product$base_unit","base_unit","updatedStockInfo","existingItem","price_mode","newCartItem","updateQuantity","unitId","currentCartQuantity","sum","maxAllowed","removeFromCart","calculateSubtotal","calculateTax","totalTax","tax_rate","itemTax","calculateCost","totalCost","itemCost","autoPrintReceipt","saleNumber","saleData","saleStatus","printData","sale_number","customer_name","customer_phone","customer_email","user_name","username","user_id","created_at","Date","toISOString","print_timestamp","print_id","now","random","substr","status","total_amount","items","_item$unit","product_name","product_sku","sku","total_price","printContent","printWindow","window","open","document","write","close","printAfterLoad","focus","print","readyState","onload","handleCheckout","trim","sale_type","payment_method","paid_amount","saleId","Promise","resolve","alert","completeError","_completeError$respon","_completeError$respon2","message","_err$response","_err$response$data","detail","clearCart","handleFilterChange","filterType","value","clearFilters","clearedFilters","toggleCategorySellable","categoryId","patch","handleQuantityClick","handleQuantityChange","e","target","test","handleQuantitySubmit","newQuantity","cartItem","handleQuantityCancel","handleQuantityKeyPress","key","handleUnitSelection","handleProductCardClick","stock_quantity","selectedUnitId","selectedCompatibleUnit","_u$unit","_selectedCompatibleUn2","_selectedCompatibleUn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","variant","size","onClick","style","marginTop","type","title","ref","placeholder","marginBottom","padding","backgroundColor","borderRadius","border","margin","fontSize","fontWeight","display","gridTemplateColumns","gap","alignItems","justifyContent","cursor","borderColor","color","_product$compatible_u","toFixed","_compatibleUnit$unit5","_compatibleUnit$unit6","_compatibleUnit$unit4","unitName","Boolean","stopPropagation","index","_compatibleUnit$unit8","_compatibleUnit$unit9","_compatibleUnit$unit0","_compatibleUnit$unit1","_compatibleUnit$unit7","availableQty","unitSymbol","disabled","onKeyPress","onBlur","min","autoFocus","method","checked","replace","toUpperCase","step","_c","$RefreshReg$"],"sources":["/home/el-ifran/WareHouse_Manager/beverage_management_system/src/pages/PointOfSale.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport api from '../services/api';\nimport Button from '../components/Button';\nimport { generatePrintContent } from '../components/PrintButton';\nimport './PointOfSale.css';\n\nconst PointOfSale = () => {\n  const { user } = useAuth();\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [customerInfo, setCustomerInfo] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [paymentMethod, setPaymentMethod] = useState('cash');\n  const [paymentType, setPaymentType] = useState('full'); // 'full' or 'partial'\n  const [paidAmount, setPaidAmount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [stockAvailability, setStockAvailability] = useState({});\n  const [filters, setFilters] = useState({\n    category: '',\n    search: ''\n  });\n  const [searchInput, setSearchInput] = useState(''); // Separate state for search input\n  const [editingQuantity, setEditingQuantity] = useState(null);\n  const [tempQuantity, setTempQuantity] = useState('');\n  const [selectedUnits, setSelectedUnits] = useState({}); // Track selected unit for each product\n  const searchInputRef = useRef(null); // Ref for search input\n  const searchTimeoutRef = useRef(null); // Ref for search timeout\n  const [showSellableToggle, setShowSellableToggle] = useState(false); // Show/hide sellable toggle\n  const [priceMode, setPriceMode] = useState('standard'); // 'standard' or 'wholesale'\n  const [saleMode, setSaleMode] = useState('complete'); // 'complete' or 'pending'\n  const [printReceipt, setPrintReceipt] = useState(true); // true or false\n\n  // Function to get the current price based on price mode\n  const getCurrentPrice = (product) => {\n    if (priceMode === 'wholesale' && product.wholesale_price) {\n      return parseFloat(product.wholesale_price);\n    }\n    return parseFloat(product.price);\n  };\n\n  // Calculate total amount\n  const calculateTotal = () => {\n    const total = cart.reduce((total, item) => {\n      const unitPrice = item.unit_price || 0;\n      return total + (unitPrice * item.quantity);\n    }, 0);\n    console.log('Cart items:', cart.length, 'Total calculated:', total);\n    return total;\n  };\n\n  // Update paid amount when payment type changes\n  useEffect(() => {\n    const total = calculateTotal();\n    if (paymentType === 'full') {\n      setPaidAmount(total);\n    } else if (paymentType === 'partial') {\n      // Only reset to 0 if it's currently set to the full amount\n      if (paidAmount === total) {\n        setPaidAmount(0);\n      }\n    }\n  }, [paymentType, cart]);\n\n  // Function to get the current price for a specific unit\n  const getCurrentUnitPrice = (product, unitStockInfo) => {\n    if (!unitStockInfo?.price) return 0;\n    \n    // If we're in standard mode, return the standard unit price\n    if (priceMode === 'standard') {\n      return unitStockInfo.price;\n    }\n    \n    // If we're in wholesale mode, we need to calculate the wholesale price for this unit\n    if (priceMode === 'wholesale' && product.wholesale_price) {\n      const standardBasePrice = parseFloat(product.price);\n      const wholesaleBasePrice = parseFloat(product.wholesale_price);\n      \n      // Handle edge cases\n      if (!standardBasePrice || standardBasePrice <= 0) {\n        console.warn('Invalid standard base price:', standardBasePrice);\n        return unitStockInfo.price;\n      }\n      \n      // Calculate the conversion factor from standard to wholesale\n      const wholesaleConversionFactor = wholesaleBasePrice / standardBasePrice;\n      \n      // Apply the conversion factor to the unit price\n      const wholesaleUnitPrice = unitStockInfo.price * wholesaleConversionFactor;\n      \n      // Round to 2 decimal places to avoid floating point precision issues\n      const roundedPrice = Math.round(wholesaleUnitPrice * 100) / 100;\n      \n      // Ensure we return a valid number\n      return isNaN(roundedPrice) || roundedPrice < 0 ? unitStockInfo.price : roundedPrice;\n    }\n    \n    // Fallback to standard price\n    return unitStockInfo.price;\n  };\n\n  useEffect(() => {\n    const initializeData = async () => {\n      await fetchCategories();\n      await fetchProducts(); // Wait for categories to be loaded before fetching products\n    };\n    initializeData();\n  }, []);\n\n  // Re-filter products when categories are loaded (to apply sellable filtering)\n  useEffect(() => {\n    if (categories.length > 0 && products.length > 0) {\n      console.log('Categories loaded, re-filtering products to apply sellable filtering');\n      fetchProducts(filters); // Re-fetch with current filters to apply sellable filtering\n    }\n  }, [categories.length]); // Only when categories are loaded\n\n  // Debounced search effect - completely rewritten for stability\n  useEffect(() => {\n    // Clear existing timeout\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    // Set new timeout\n    searchTimeoutRef.current = setTimeout(() => {\n      if (searchInput !== filters.search) {\n        const newFilters = { ...filters, search: searchInput };\n        setFilters(newFilters);\n        fetchProducts(newFilters);\n      }\n    }, 500);\n\n    // Cleanup function\n    return () => {\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n    };\n  }, [searchInput, filters]); // Depend on searchInput and filters\n\n  useEffect(() => {\n    // Fetch stock availability for ALL products in bulk to improve performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n    \n    // Set default selected units (default unit first, then base unit) for products with multiple compatible units\n    const defaultUnits = {};\n    products.forEach(product => {\n      if (product.compatible_units && product.compatible_units.length > 1) {\n        \n        // First try to find the default unit (is_default: true)\n        let selectedUnit = product.compatible_units.find(u => u.is_default);\n        \n        // If no default unit, fall back to base unit (is_base_unit: true)\n        if (!selectedUnit) {\n          selectedUnit = product.compatible_units.find(u => u.unit.is_base_unit);\n        }\n        \n        // If still no unit found, use the first one\n        if (!selectedUnit) {\n          selectedUnit = product.compatible_units[0];\n        }\n        \n        if (selectedUnit) {\n          defaultUnits[product.id] = selectedUnit.unit?.id || selectedUnit.unit;\n        }\n      }\n    });\n    setSelectedUnits(defaultUnits);\n  }, [products]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchBulkStockAvailability = async () => {\n    try {\n      const productIds = products.map(product => product.id);\n      const response = await api.post('/products/bulk-stock-availability/', {\n        product_ids: productIds\n      });\n      \n      // Convert the response to the format expected by the existing code\n      const stockData = {};\n      Object.values(response.data).forEach(productStock => {\n        stockData[productStock.product_id] = productStock.available_units;\n      });\n      \n      \n      \n      setStockAvailability(stockData);\n    } catch (err) {\n      console.error('Bulk stock availability error:', err);\n      // Fallback to individual calls if bulk fails\n      products.forEach(product => {\n        fetchStockAvailability(product.id);\n      });\n    }\n  };\n\n  const refreshStockAvailability = () => {\n    // Use bulk fetch for better performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n  };\n\n\n  const getUpdatedStockAvailability = (productId) => {\n    // Get the base stock availability for this product\n    const baseStockInfo = stockAvailability[productId];\n    if (!baseStockInfo) {\n      return null;\n    }\n\n    // Calculate total pieces already in cart for this product (convert all units to pieces)\n    const totalPiecesInCart = cart\n      .filter(item => item.id === productId)\n      .reduce((total, item) => {\n        // Find the unit info to get conversion factor\n        const unitInfo = baseStockInfo.find(u => u.id === item.unit_id);\n        if (unitInfo && unitInfo.conversion_factor) {\n          // Convert to pieces: if 1 carton = 20 pieces, then quantity * 20\n          return total + (item.quantity * unitInfo.conversion_factor);\n        } else if (unitInfo && unitInfo.is_base_unit) {\n          // If it's the base unit (pieces), no conversion needed\n          return total + item.quantity;\n        }\n        return total;\n      }, 0);\n\n    // Calculate remaining pieces in base stock\n    const baseUnit = baseStockInfo.find(u => u.is_base_unit);\n    const totalBaseStock = baseUnit ? baseUnit.available_quantity : 0;\n    const remainingPieces = Math.max(0, totalBaseStock - totalPiecesInCart);\n\n\n    // Update each unit's available quantity based on remaining pieces\n    return baseStockInfo.map(unit => {\n      let availableQuantity = 0;\n      let isAvailable = false;\n\n      if (unit.is_base_unit) {\n        // For base unit (pieces), use remaining pieces directly\n        availableQuantity = remainingPieces;\n        isAvailable = remainingPieces > 0;\n      } else if (unit.conversion_factor) {\n        // For other units, calculate how many can be made from remaining pieces\n        // If 1 carton = 20 pieces, then remainingPieces / 20 = available cartons\n        availableQuantity = Math.floor(remainingPieces / unit.conversion_factor);\n        isAvailable = availableQuantity > 0;\n      }\n\n      return {\n        ...unit,\n        available_quantity: availableQuantity,\n        is_available: isAvailable\n      };\n    });\n  };\n\n  const fetchProducts = async (filterParams = {}) => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n      \n      // Always filter for active products\n      params.append('is_active', 'true');\n      \n      // Add filters to params\n      if (filterParams.category) params.append('category', filterParams.category);\n      if (filterParams.search) params.append('search', filterParams.search);\n      \n      const url = `/products/${params.toString() ? '?' + params.toString() : ''}`;\n      const response = await api.get(url);\n      const allProducts = response.data.results || response.data;\n      \n      // Debug: Log the first product to see its structure\n      if (allProducts.length > 0) {\n        console.log('First product structure:', allProducts[0]);\n        console.log('Categories loaded:', categories.length);\n      }\n      \n      // If categories are not loaded yet, show all products but log a warning\n      if (categories.length === 0) {\n        console.warn('Categories not loaded yet, showing all products (filtering will be applied once categories load)');\n        setProducts(allProducts);\n        return;\n      }\n      \n      // ALWAYS filter out products from non-sellable categories\n      const sellableProducts = allProducts.filter(product => {\n        let isSellable = false;\n        \n        // If product has category information, check if category is sellable\n        if (product.category && product.category.is_sellable !== undefined) {\n          isSellable = product.category.is_sellable;\n        }\n        // If product has category_name, find the category in our categories list\n        else if (product.category_name) {\n          const category = categories.find(cat => cat.name === product.category_name);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If product has category ID, find the category in our categories list\n        else if (product.category && typeof product.category === 'number') {\n          const category = categories.find(cat => cat.id === product.category);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If no category information, exclude the product (safer approach)\n        else {\n          isSellable = false;\n        }\n        \n        // Debug: Log filtering decision\n        if (!isSellable) {\n          console.log(`Filtering out product: ${product.name} (category: ${product.category_name || product.category})`);\n        }\n        \n        return isSellable;\n      });\n\n      // Additional check: if a specific category is selected, ensure it's sellable\n      if (filterParams.category) {\n        const selectedCategory = categories.find(cat => cat.id === parseInt(filterParams.category));\n        if (selectedCategory && !selectedCategory.is_sellable) {\n          // If selected category is not sellable, return empty array\n          setProducts([]);\n          return;\n        }\n      }\n      \n      setProducts(sellableProducts);\n    } catch (err) {\n      setError('Failed to load products');\n      console.error('Products error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCategories = async () => {\n    try {\n      const response = await api.get('/products/categories/');\n      setCategories(response.data.results || response.data);\n    } catch (err) {\n      console.error('Categories error:', err);\n    }\n  };\n\n\n  const fetchStockAvailability = async (productId) => {\n    try {\n      const response = await api.get(`/products/${productId}/stock-availability/`);\n      setStockAvailability(prev => ({\n        ...prev,\n        [productId]: response.data.available_units\n      }));\n    } catch (err) {\n      console.error('Stock availability error:', err);\n    }\n  };\n\n  const addToCart = (product, selectedUnit = null) => {\n    \n    // Use the first compatible unit if none selected\n    let unit = selectedUnit;\n    if (!unit && product.compatible_units && product.compatible_units[0]) {\n      const compatibleUnit = product.compatible_units[0];\n      unit = {\n        id: compatibleUnit.unit?.id || compatibleUnit.unit,\n        name: compatibleUnit.unit_name || compatibleUnit.unit?.name || 'Piece',\n        symbol: compatibleUnit.unit_symbol || compatibleUnit.unit?.symbol || 'piece'\n      };\n    }\n    if (!unit) {\n      unit = { id: product.base_unit?.id || product.base_unit, name: 'Piece', symbol: 'piece' };\n    }\n    \n    // Skip stock validation for pending sales since stock won't be removed until completion\n    if (saleMode === 'complete') {\n      // Check if stock availability data is loaded\n      if (!stockAvailability[product.id]) {\n        setError('Loading stock information... Please try again.');\n        return;\n      }\n\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n      const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n      \n      \n      if (!unitStockInfo) {\n        setError(`Unit ${unit.name} not found in stock information`);\n        return;\n      }\n      \n      if (!unitStockInfo.is_available) {\n        setError(`${unit.name} is out of stock`);\n        return;\n      }\n      \n      // Check if there's enough stock for the selected unit\n      if (unitStockInfo.available_quantity <= 0) {\n        setError(`No ${unit.name} stock left`);\n        return;\n      }\n    }\n    \n    const existingItem = cart.find(item => \n      item.id === product.id && \n      item.unit_id === unit.id && \n      item.price_mode === priceMode\n    );\n    if (existingItem) {\n      // Check if adding 1 more would exceed available quantity (only for complete sales)\n      if (saleMode === 'complete') {\n        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n        const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n        if (unitStockInfo && existingItem.quantity + 1 > unitStockInfo.available_quantity) {\n          setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n          return;\n        }\n      }\n      setCart(cart.map(item =>\n        item.id === product.id && item.unit_id === unit.id && item.price_mode === priceMode\n          ? { ...item, quantity: item.quantity + 1 }\n          : item\n      ));\n    } else {\n      // Check if adding 1 would exceed available quantity (only for complete sales)\n      if (saleMode === 'complete') {\n        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n        const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n        if (unitStockInfo && 1 > unitStockInfo.available_quantity) {\n          setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n          return;\n        }\n      }\n      // Get unit stock info for price calculation\n      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n      const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n      \n      const newCartItem = {\n        ...product,\n        quantity: 1,\n        unit_id: unit.id,\n        unit_name: unit.name,\n        unit_symbol: unit.symbol,\n        unit_price: getCurrentUnitPrice(product, unitStockInfo) || getCurrentPrice(product),\n        price_mode: priceMode\n      };\n      setCart([...cart, newCartItem]);\n    }\n    setError('');\n  };\n\n  const updateQuantity = (productId, unitId, quantity, priceMode = null) => {\n    if (quantity <= 0) {\n      setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)));\n    } else {\n      // Skip stock validation for pending sales since stock won't be removed until completion\n      if (saleMode === 'complete') {\n        // Check updated stock availability for the selected unit\n        const updatedStockInfo = getUpdatedStockAvailability(productId);\n        const unitStockInfo = updatedStockInfo?.find(u => u.id === unitId);\n        \n        if (!unitStockInfo || !unitStockInfo.is_available) {\n          setError(`Unit is out of stock`);\n          return;\n        }\n        \n        // For updateQuantity, we need to consider the current cart quantity\n        const currentCartQuantity = cart\n          .filter(item => item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)\n          .reduce((sum, item) => sum + item.quantity, 0);\n        \n        // Calculate how much we can add (available + what's already in cart)\n        const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n        \n        if (quantity > maxAllowed) {\n          setError(`Not enough stock available. Max: ${maxAllowed}`);\n          return;\n        }\n      }\n      \n      setCart(cart.map(item =>\n        item.id === productId && item.unit_id === unitId && item.price_mode === priceMode\n          ? { ...item, quantity }\n          : item\n      ));\n      setError('');\n    }\n  };\n\n  const removeFromCart = (productId, unitId, priceMode = null) => {\n    setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)));\n  };\n\n  const calculateSubtotal = () => {\n    return cart.reduce((total, item) => total + (item.quantity * item.unit_price), 0);\n  };\n\n  const calculateTax = () => {\n    let totalTax = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: tax = (price × tax_rate) / (100 + tax_rate)\n        const itemTax = (item.quantity * item.unit_price * item.tax_rate) / (100 + item.tax_rate);\n        totalTax += itemTax;\n      }\n    });\n    return totalTax;\n  };\n\n  const calculateCost = () => {\n    let totalCost = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: cost = (price × 100) / (100 + tax_rate)\n        const itemCost = (item.quantity * item.unit_price * 100) / (100 + item.tax_rate);\n        totalCost += itemCost;\n      } else {\n        // No tax, full price is cost\n        totalCost += item.quantity * item.unit_price;\n      }\n    });\n    return totalCost;\n  };\n\n\n  const autoPrintReceipt = async (saleNumber, saleData, saleStatus = 'completed') => {\n    try {\n      // Create print content for the sale\n      const printData = {\n        sale_number: saleNumber,\n        customer_name: customerInfo.name || 'Walk-in Customer',\n        customer_phone: customerInfo.phone || '',\n        customer_email: customerInfo.email || '',\n        user_name: user?.username || 'Unknown User',\n        user_id: user?.id || 'unknown',\n        created_at: new Date().toISOString(),\n        print_timestamp: new Date().toISOString(),\n        print_id: `PRINT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        status: saleStatus,\n        total_amount: calculateSubtotal(),\n        items: cart.map(item => ({\n          product_name: item.name,\n          product_sku: item.sku,\n          quantity: item.quantity,\n          unit_name: item.unit_name || item.unit?.name || 'piece',\n          unit_price: item.unit_price,\n          total_price: item.unit_price * item.quantity\n        }))\n      };\n\n      // Generate print content using the same logic as PrintButton\n      const printContent = generatePrintContent(printData, 'Sale Receipt', 'sale');\n      \n      // Open print window\n      const printWindow = window.open('', '_blank', 'width=800,height=600');\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      \n      // Wait for content to load then print\n      const printAfterLoad = () => {\n        printWindow.focus();\n        printWindow.print();\n        // Close the window after a short delay\n        setTimeout(() => {\n          printWindow.close();\n        }, 1000);\n      };\n      \n      // Check if window is already loaded\n      if (printWindow.document.readyState === 'complete') {\n        printAfterLoad();\n      } else {\n        printWindow.onload = printAfterLoad;\n      }\n      \n    } catch (error) {\n      console.error('Auto-print error:', error);\n      // Don't show error to user as it's not critical\n    }\n  };\n\n  const handleCheckout = async () => {\n    if (cart.length === 0) {\n      setError('Cart is empty. Please add items to the cart before completing the sale.');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n\n    // Validate customer name for partial payments\n    if (paymentType === 'partial' && (!customerInfo.name || !customerInfo.name.trim())) {\n      setError('Customer name is required for partial payments');\n      setProcessing(false);\n      return;\n    }\n\n    // Validate paid amount\n    const total = calculateTotal();\n    if (paidAmount > total) {\n      setError('Paid amount cannot exceed the total amount');\n      setProcessing(false);\n      return;\n    }\n\n    if (paidAmount < 0) {\n      setError('Paid amount cannot be negative');\n      setProcessing(false);\n      return;\n    }\n\n    try {\n      const saleData = {\n        sale_type: 'sale',\n        customer_name: customerInfo.name,\n        customer_phone: customerInfo.phone,\n        customer_email: customerInfo.email,\n        payment_method: paymentMethod,\n        paid_amount: paidAmount,\n          items: cart.map(item => {\n            // More robust unit ID extraction\n            let unitId = item.unit_id;\n            if (typeof unitId === 'object' && unitId !== null) {\n              unitId = unitId.id || unitId;\n            }\n            \n            return {\n          product: item.id,\n              quantity: parseFloat(item.quantity),\n              unit: parseInt(unitId),\n              unit_price: parseFloat(item.unit_price),\n              price_mode: item.price_mode || 'standard'\n            };\n          })\n        };\n\n      // Create the sale\n      const response = await api.post('/sales/', saleData);\n      const saleId = response.data.id;\n      const saleNumber = response.data.sale_number;\n      \n      if (saleMode === 'complete') {\n        // Complete the sale immediately\n        try {\n          await api.post(`/sales/${saleId}/complete/`);\n          \n          // Auto-print the receipt after successful sale completion (only if printReceipt is true)\n          if (printReceipt) {\n            await autoPrintReceipt(saleNumber, response.data, 'completed');\n          }\n      \n      // Clear cart and customer info\n      setCart([]);\n      setCustomerInfo({ name: '', phone: '', email: '' });\n      \n          // Reset price mode to standard after sale\n          setPriceMode('standard');\n          \n          // Wait a moment for the backend to process stock movements\n          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\n          \n          // Refresh product data to update stock quantities\n          await fetchProducts();\n          \n          // Wait another moment for stock availability to be updated\n          await new Promise(resolve => setTimeout(resolve, 500)); // Wait 0.5 seconds\n          \n          // Refresh stock availability for all products\n          refreshStockAvailability();\n          \n          alert(`Sale completed successfully! Sale Number: ${saleNumber}`);\n        } catch (completeError) {\n          // Sale was created but completion failed\n          console.error('Sale completion error:', completeError);\n          setError(`Sale created (${saleNumber}) but completion failed: ${completeError.response?.data?.error || completeError.message}`);\n          \n          // Still clear the cart since the sale was created\n          setCart([]);\n          setCustomerInfo({ name: '', phone: '', email: '' });\n          \n          // Wait for backend to process any completed stock movements\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Refresh data\n          await fetchProducts();\n          await new Promise(resolve => setTimeout(resolve, 500));\n          refreshStockAvailability();\n        }\n      } else {\n        // Create pending sale (don't complete it)\n        \n        // Print receipt for pending sale if requested\n        if (printReceipt) {\n          await autoPrintReceipt(saleNumber, response.data, 'pending');\n        }\n        \n        // Clear cart and customer info\n        setCart([]);\n        setCustomerInfo({ name: '', phone: '', email: '' });\n        \n        // Reset price mode to standard after sale\n        setPriceMode('standard');\n        \n        alert(`Pending sale created! Sale Number: ${saleNumber}\\nYou can complete it later in Sales Management.`);\n      }\n    } catch (err) {\n      setError(err.response?.data?.detail || 'Failed to create sale');\n      console.error('Sale creation error:', err);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const clearCart = () => {\n    setCart([]);\n    setError('');\n  };\n\n  const handleFilterChange = (filterType, value) => {\n    if (filterType === 'search') {\n      // For search, update the input state immediately (no API call)\n      setSearchInput(value);\n    } else {\n      // For other filters (like category), update immediately\n    const newFilters = { ...filters, [filterType]: value };\n    setFilters(newFilters);\n    fetchProducts(newFilters);\n    }\n  };\n\n  const clearFilters = () => {\n    const clearedFilters = { category: '', search: '' };\n    setFilters(clearedFilters);\n    setSearchInput(''); // Clear the search input state\n    fetchProducts(clearedFilters);\n  };\n\n  const toggleCategorySellable = async (categoryId, isSellable) => {\n    try {\n      await api.patch(`/products/categories/${categoryId}/`, {\n        is_sellable: !isSellable\n      });\n      // Refresh categories to show updated status\n      await fetchCategories();\n      // Refresh products to apply new sellable filter\n      fetchProducts(filters);\n    } catch (err) {\n      console.error('Error updating category sellable status:', err);\n      setError('Failed to update category status');\n    }\n  };\n\n  const handleQuantityClick = (item) => {\n    setEditingQuantity(`${item.id}-${item.unit_id}`);\n    setTempQuantity(item.quantity.toString());\n  };\n\n  const handleQuantityChange = (e) => {\n    const value = e.target.value;\n    // Only allow numbers and empty string\n    if (value === '' || /^\\d+$/.test(value)) {\n      setTempQuantity(value);\n    }\n  };\n\n  const handleQuantitySubmit = (item) => {\n    const newQuantity = parseFloat(tempQuantity);\n    \n    if (tempQuantity === '' || isNaN(newQuantity) || newQuantity < 0) {\n      setError('Please enter a valid quantity');\n      setEditingQuantity(null);\n      return;\n    }\n    \n    // Skip stock validation for pending sales since stock won't be removed until completion\n    if (saleMode === 'complete') {\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(item.id);\n      const unitStockInfo = updatedStockInfo?.find(u => u.id === item.unit_id);\n      \n      if (!unitStockInfo || !unitStockInfo.is_available) {\n        setError(`Unit is out of stock`);\n        setEditingQuantity(null);\n        return;\n      }\n      \n      // For handleQuantitySubmit, we need to consider the current cart quantity\n      const currentCartQuantity = cart\n        .filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id && cartItem.price_mode === item.price_mode)\n        .reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n      \n      // Calculate how much we can add (available + what's already in cart)\n      const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n      \n      if (newQuantity > maxAllowed) {\n        setError(`Not enough stock available. Max: ${maxAllowed}`);\n        setEditingQuantity(null);\n        return;\n      }\n    }\n    \n    if (newQuantity === 0) {\n      // Remove item from cart if quantity is 0\n      removeFromCart(item.id, item.unit_id, item.price_mode);\n    } else {\n      updateQuantity(item.id, item.unit_id, newQuantity, item.price_mode);\n    }\n    \n    setEditingQuantity(null);\n    setTempQuantity('');\n    setError('');\n  };\n\n  const handleQuantityCancel = () => {\n    setEditingQuantity(null);\n    setTempQuantity('');\n  };\n\n  const handleQuantityKeyPress = (e, item) => {\n    if (e.key === 'Enter') {\n      handleQuantitySubmit(item);\n    } else if (e.key === 'Escape') {\n      handleQuantityCancel();\n    }\n  };\n\n  const handleUnitSelection = (productId, unitId) => {\n    setSelectedUnits(prev => ({\n      ...prev,\n      [productId]: unitId\n    }));\n  };\n\n  const handleProductCardClick = (product) => {\n    // Don't allow clicking on out-of-stock products (only for complete sales)\n    if (saleMode === 'complete' && product.stock_quantity <= 0) {\n      return;\n    }\n    \n    if (product.compatible_units && product.compatible_units.length > 1) {\n      // For multi-unit products, add with the currently selected unit\n      const selectedUnitId = selectedUnits[product.id];\n      \n      if (selectedUnitId) {\n        const selectedCompatibleUnit = product.compatible_units.find(u => (u.unit?.id || u.unit) === selectedUnitId);\n        \n        if (selectedCompatibleUnit) {\n          // Get the price for this unit from stock availability\n          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n          const unitStockInfo = updatedStockInfo?.find(u => u.id === (selectedCompatibleUnit.unit?.id || selectedCompatibleUnit.unit));\n          const unitPrice = getCurrentUnitPrice(product, unitStockInfo) || getCurrentPrice(product);\n          \n          // Convert compatible unit to the format expected by addToCart\n          const selectedUnit = {\n            id: selectedCompatibleUnit.unit?.id || selectedCompatibleUnit.unit,\n            name: selectedCompatibleUnit.unit_name,\n            symbol: selectedCompatibleUnit.unit_symbol,\n            price: unitPrice\n          };\n          addToCart(product, selectedUnit);\n        }\n      }\n    } else {\n      // For single-unit products, add directly\n      addToCart(product);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"pos\">\n        <div className=\"pos-loading\">\n          <div className=\"spinner\"></div>\n          <span>Loading products...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pos\">\n      <div className=\"pos-header\">\n        <h1>Point of Sale</h1>\n        <div className=\"pos-user\">\n          <span>Cashier: {user?.username}</span>\n        </div>\n      </div>\n\n      <div className=\"pos-content\">\n        {/* Product Grid */}\n        <div className=\"pos-products\">\n          <h2>Products</h2>\n          \n          {/* Filters */}\n          <form className=\"pos-filters\">\n            <div className=\"filter-group\">\n              <label>Category:</label>\n              <select \n                value={filters.category} \n                onChange={(e) => handleFilterChange('category', e.target.value)}\n              >\n                <option value=\"\">All Categories</option>\n                {categories.filter(cat => cat.is_sellable).map(category => (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ))}\n              </select>\n              <Button \n                variant=\"outline\" \n                size=\"small\" \n                onClick={() => setShowSellableToggle(!showSellableToggle)}\n                style={{ marginTop: '0.5rem' }}\n              >\n                {showSellableToggle ? 'Hide' : 'Manage'} Categories\n              </Button>\n            </div>\n            \n            <div className=\"filter-group\">\n              <label>Price Mode:</label>\n              <div className=\"price-mode-toggle\">\n                <button \n                  type=\"button\"\n                  className={`price-mode-btn ${priceMode === 'standard' ? 'active' : ''}`}\n                  onClick={() => setPriceMode('standard')}\n                >\n                  Standard\n                </button>\n                <button \n                  type=\"button\"\n                  className={`price-mode-btn ${priceMode === 'wholesale' ? 'active' : ''}`}\n                  onClick={() => setPriceMode('wholesale')}\n                >\n                  Wholesale\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"filter-group\">\n              <label>Sale Mode:</label>\n              <div className=\"sale-mode-toggle\">\n                <button \n                  type=\"button\"\n                  className={`sale-mode-btn ${saleMode === 'complete' ? 'active' : ''}`}\n                  onClick={() => setSaleMode('complete')}\n                  title=\"Sale will be completed immediately and stock will be deducted\"\n                >\n                  Complete\n                </button>\n                <button \n                  type=\"button\"\n                  className={`sale-mode-btn ${saleMode === 'pending' ? 'active' : ''}`}\n                  onClick={() => setSaleMode('pending')}\n                  title=\"Sale will be created as pending and can be completed later\"\n                >\n                  Pending\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"filter-group print-receipt-group\">\n              <label>Print Receipt:</label>\n              <div className=\"sale-mode-toggle print-receipt-toggle\">\n                <button \n                  type=\"button\"\n                  className={`sale-mode-btn print-receipt-btn ${printReceipt ? 'active' : ''}`}\n                  onClick={() => setPrintReceipt(true)}\n                  title=\"Print receipt after sale\"\n                >\n                  Yes\n                </button>\n                <button \n                  type=\"button\"\n                  className={`sale-mode-btn print-receipt-btn ${!printReceipt ? 'active' : ''}`}\n                  onClick={() => setPrintReceipt(false)}\n                  title=\"Don't print receipt\"\n                >\n                  No\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"filter-group\">\n              <label>Search:</label>\n              <input\n                ref={searchInputRef}\n                type=\"text\"\n                placeholder=\"Search products...\"\n                value={searchInput}\n                onChange={(e) => handleFilterChange('search', e.target.value)}\n              />\n            </div>\n            <div className=\"filter-group\">\n              <Button variant=\"outline\" size=\"small\" onClick={clearFilters}>\n                Clear\n              </Button>\n            </div>\n          </form>\n\n          {/* Category Management Section */}\n          {showSellableToggle && (\n            <div className=\"category-management\" style={{ \n              marginBottom: '1rem', \n              padding: '1rem', \n              backgroundColor: '#f9fafb', \n              borderRadius: '0.5rem',\n              border: '1px solid #e5e7eb'\n            }}>\n              <h3 style={{ margin: '0 0 1rem 0', fontSize: '1rem', fontWeight: '600' }}>\n                Manage Sellable Categories\n              </h3>\n              <div style={{ \n                display: 'grid', \n                gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', \n                gap: '0.5rem' \n              }}>\n                {categories.map(category => (\n                  <div key={category.id} style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    padding: '0.5rem',\n                    backgroundColor: 'white',\n                    borderRadius: '0.375rem',\n                    border: '1px solid #e5e7eb'\n                  }}>\n                    <span style={{ fontSize: '0.875rem', fontWeight: '500' }}>\n                      {category.name}\n                    </span>\n                    <button\n                      onClick={() => toggleCategorySellable(category.id, category.is_sellable)}\n                      style={{\n                        padding: '0.25rem 0.5rem',\n                        fontSize: '0.75rem',\n                        borderRadius: '0.25rem',\n                        border: '1px solid',\n                        cursor: 'pointer',\n                        backgroundColor: category.is_sellable ? '#dcfce7' : '#fee2e2',\n                        borderColor: category.is_sellable ? '#16a34a' : '#dc2626',\n                        color: category.is_sellable ? '#15803d' : '#dc2626'\n                      }}\n                    >\n                      {category.is_sellable ? 'Sellable' : 'Not Sellable'}\n                    </button>\n          </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"products-info\">\n            <p className=\"products-count\">\n              {products.length} product{products.length !== 1 ? 's' : ''} found\n            </p>\n          </div>\n\n          <div className=\"products-grid\">\n            {products.map(product => (\n              <div\n                key={product.id}\n                className={`product-card ${product.stock_quantity <= 0 && saleMode === 'complete' ? 'out-of-stock' : ''} clickable`}\n                onClick={() => handleProductCardClick(product)}\n              >\n                <div className=\"product-info\">\n                  <h3>{product.name}</h3>\n                  <p className=\"product-sku\">{product.sku}</p>\n                  <p className=\"product-price\">\n                    {getCurrentPrice(product).toFixed(2)} MGA\n                    {product.compatible_units && product.compatible_units.length > 1 && \n                      ` (base unit: ${product.compatible_units.find(u => u.unit.is_base_unit)?.unit.symbol || 'piece'})`\n                    }\n                  </p>\n                  <p className=\"product-stock\">\n                    Stock: {product.stock_quantity} {product.unit}\n                    {stockAvailability[product.id] && product.compatible_units && product.compatible_units.length > 1 && (\n                      <span className=\"stock-details\">\n                        {(() => {\n                          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                          return product.compatible_units.map(compatibleUnit => {\n                            const unitStockInfo = updatedStockInfo?.find(u => u.id === (compatibleUnit.unit?.id || compatibleUnit.unit));\n                            if (!unitStockInfo) return null;\n                            \n                            // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                            const unitName = unitStockInfo?.name || compatibleUnit.unit?.name || compatibleUnit.unit_name;\n                            \n                            return (\n                              <span key={compatibleUnit.unit?.id || compatibleUnit.unit} className={`unit-stock ${unitStockInfo.is_available ? 'available' : 'unavailable'}`}>\n                                {unitName}: {unitStockInfo.available_quantity}\n                              </span>\n                            );\n                          }).filter(Boolean);\n                        })()}\n                      </span>\n                    )}\n                  </p>\n                  \n                  {/* Unit Selection - Only show for products with multiple compatible units */}\n                  {product.compatible_units && product.compatible_units.length > 1 && (\n                    <div className=\"unit-selection\">\n                      <label>Unit:</label>\n                      <select \n                        className=\"unit-select\"\n                        value={selectedUnits[product.id] || ''}\n                        onChange={(e) => {\n                          const unitId = parseInt(e.target.value);\n                          handleUnitSelection(product.id, unitId);\n                        }}\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        <option value=\"\">Select Unit</option>\n                        {product.compatible_units.map((compatibleUnit, index) => {\n                          // Use updated stock availability that considers cart contents\n                          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                          const unitStockInfo = updatedStockInfo?.find(u => u.id === (compatibleUnit.unit?.id || compatibleUnit.unit));\n                          const isAvailable = unitStockInfo ? unitStockInfo.is_available : false;\n                          const availableQty = unitStockInfo ? unitStockInfo.available_quantity : 0;\n                          \n                          // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                          const unitName = unitStockInfo?.name || compatibleUnit.unit?.name || compatibleUnit.unit_name;\n                          const unitSymbol = unitStockInfo?.symbol || compatibleUnit.unit?.symbol || compatibleUnit.unit_symbol;\n                          \n                          \n                          return (\n                            <option \n                              key={compatibleUnit.unit?.id || compatibleUnit.unit} \n                              value={compatibleUnit.unit?.id || compatibleUnit.unit}\n                              disabled={saleMode === 'complete' ? !isAvailable : false}\n                            >\n                              {unitName} ({unitSymbol}) - {getCurrentUnitPrice(product, unitStockInfo).toFixed(2)} MGA\n                              {!isAvailable && saleMode === 'complete' ? ' - OUT OF STOCK' : \n                               ` - ${availableQty} available`}\n                            </option>\n                          );\n                        })}\n                      </select>\n                    </div>\n                  )}\n                  \n                  {/* Add to Cart Button - Only show for single unit products */}\n                  {(!product.compatible_units || product.compatible_units.length <= 1) && (\n                    <Button\n                      variant=\"primary\"\n                      size=\"small\"\n                      onClick={() => addToCart(product)}\n                      disabled={(() => {\n                        // Skip stock validation for pending sales since stock won't be removed until completion\n                        if (saleMode === 'pending') {\n                          return false; // Always allow for pending sales\n                        }\n                        \n                        // Check if any unit has available stock\n                        if (!stockAvailability[product.id]) {\n                          return true; // Disable if stock data not loaded\n                        }\n                        \n                        // For single unit products, check base stock\n                        return product.stock_quantity <= 0;\n                      })()}\n                      className=\"add-to-cart-btn\"\n                    >\n                      {(() => {\n                        if (!stockAvailability[product.id]) {\n                          return 'Loading...';\n                        }\n                        \n                        // For pending sales, always show \"Add to Cart\" regardless of stock\n                        if (saleMode === 'pending') {\n                          return 'Add to Cart';\n                        }\n                        \n                        return product.stock_quantity <= 0 ? 'Out of Stock' : 'Add to Cart';\n                      })()}\n                    </Button>\n                  )}\n                  \n                  {/* For products with multiple units, show instruction */}\n                  {product.available_units && product.available_units.length > 1 && (\n                    <div className=\"unit-instruction\">\n                      <p>Click card or select unit to add to cart</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n\n        {/* Cart and Checkout */}\n        <div className=\"pos-cart\">\n          <div className=\"cart-header\">\n            <h2>Shopping Cart</h2>\n            {cart.length > 0 && (\n              <Button variant=\"outline\" size=\"small\" onClick={clearCart}>\n                Clear Cart\n              </Button>\n            )}\n          </div>\n\n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"cart-items\">\n            {cart.length === 0 ? (\n              <div className=\"empty-cart\">\n                <p>Cart is empty</p>\n                <p className=\"empty-cart-hint\">Add items from the product list to start a sale</p>\n              </div>\n            ) : (\n              <>\n                <div className=\"cart-table-header\">\n                  <div className=\"header-product\">Product</div>\n                  <div className=\"header-unit\">Unit</div>\n                  <div className=\"header-price\">Price</div>\n                  <div className=\"header-quantity\">Qty</div>\n                  <div className=\"header-total\">Total</div>\n                  <div className=\"header-actions\">Actions</div>\n                </div>\n                {cart.map(item => (\n                  <div key={`${item.id}-${item.unit_id}-${item.price_mode}`} className=\"cart-item\">\n                    <div className=\"item-product\">\n                      <h4>{item.name}</h4>\n                      <p className=\"item-sku\">SKU: {item.sku}</p>\n                      <span className={`price-mode-badge ${item.price_mode}`}>\n                        {item.price_mode === 'wholesale' ? 'WS' : 'STD'}\n                      </span>\n                    </div>\n                    <div className=\"item-unit\">\n                      {item.unit_symbol || 'piece'}\n                    </div>\n                    <div className=\"item-price\">\n                      {parseFloat(item.unit_price).toFixed(2)} MGA\n                    </div>\n                    <div className=\"item-quantity\">\n                      <div className=\"quantity-controls\">\n                        <Button\n                          size=\"small\"\n                          variant=\"outline\"\n                          onClick={() => updateQuantity(item.id, item.unit_id, item.quantity - 1, item.price_mode)}\n                        >\n                          -\n                        </Button>\n                        {editingQuantity === `${item.id}-${item.unit_id}` ? (\n                          <div className=\"quantity-edit\">\n                            <input\n                              type=\"number\"\n                              value={tempQuantity}\n                              onChange={handleQuantityChange}\n                              onKeyPress={(e) => handleQuantityKeyPress(e, item)}\n                              onBlur={() => handleQuantitySubmit(item)}\n                              className=\"quantity-input\"\n                              min=\"0\"\n                              max={item.stock_quantity}\n                              autoFocus\n                            />\n                          </div>\n                        ) : (\n                          <span \n                            className=\"quantity clickable\"\n                            onClick={() => handleQuantityClick(item)}\n                            title=\"Click to edit quantity\"\n                          >\n                            {item.quantity}\n                          </span>\n                        )}\n                        <Button\n                          size=\"small\"\n                          variant=\"outline\"\n                          onClick={() => updateQuantity(item.id, item.unit_id, item.quantity + 1, item.price_mode)}\n                          disabled={(() => {\n                            // Skip stock validation for pending sales since stock won't be removed until completion\n                            if (saleMode === 'pending') {\n                              return false; // Always allow for pending sales\n                            }\n                            \n                            const updatedStockInfo = getUpdatedStockAvailability(item.id);\n                            const unitStockInfo = updatedStockInfo?.find(u => u.id === item.unit_id);\n                            const currentCartQuantity = cart\n                              .filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id && cartItem.price_mode === item.price_mode)\n                              .reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n                            const maxAllowed = (unitStockInfo?.available_quantity || 0) + currentCartQuantity;\n                            return item.quantity >= maxAllowed;\n                          })()}\n                        >\n                          +\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"item-total\">\n                      {(item.quantity * item.unit_price).toFixed(2)} MGA\n                    </div>\n                    <div className=\"item-actions\">\n                      <Button\n                        size=\"small\"\n                        variant=\"danger\"\n                        onClick={() => removeFromCart(item.id, item.unit_id, item.price_mode)}\n                        title=\"Remove item\"\n                      >\n                        ×\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </>\n            )}\n          </div>\n\n          {cart.length > 0 && (\n            <>\n              <div className=\"cart-summary\">\n                <div className=\"summary-row\">\n                  <span>Total Amount:</span>\n                  <span>{calculateSubtotal().toFixed(2)} MGA</span>\n                </div>\n                <div className=\"summary-row cost-breakdown\">\n                  <span>Cost (excl. tax):</span>\n                  <span>{calculateCost().toFixed(2)} MGA</span>\n                </div>\n                <div className=\"summary-row tax-breakdown\">\n                  <span>Tax included:</span>\n                  <span>{calculateTax().toFixed(2)} MGA</span>\n                </div>\n                <div className=\"summary-row total\">\n                  <span>Total:</span>\n                  <span>{calculateSubtotal().toFixed(2)} MGA</span>\n                </div>\n              </div>\n\n              <form className=\"checkout-form\">\n              <div className=\"customer-info\">\n                <h3>Customer Information</h3>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Customer Name (Optional)\"\n                    value={customerInfo.name}\n                    onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"tel\"\n                    placeholder=\"Phone Number (Optional)\"\n                    value={customerInfo.phone}\n                    onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"email\"\n                    placeholder=\"Email (Optional)\"\n                    value={customerInfo.email}\n                    onChange={(e) => setCustomerInfo({...customerInfo, email: e.target.value})}\n                  />\n                </div>\n              </div>\n\n              <div className=\"payment-section\">\n                <h3>Payment Method</h3>\n                <div className=\"payment-methods\">\n                  {['cash', 'card', 'mobile_money', 'bank_transfer'].map(method => (\n                    <label key={method} className=\"payment-method\">\n                      <input\n                        type=\"radio\"\n                        name=\"payment\"\n                        value={method}\n                        checked={paymentMethod === method}\n                        onChange={(e) => setPaymentMethod(e.target.value)}\n                      />\n                      <span>{method.replace('_', ' ').toUpperCase()}</span>\n                    </label>\n                  ))}\n                </div>\n                \n                <h3>Payment Type</h3>\n                <div className=\"payment-types\">\n                  <label className=\"payment-type\">\n                    <input\n                      type=\"radio\"\n                      name=\"paymentType\"\n                      value=\"full\"\n                      checked={paymentType === 'full'}\n                      onChange={(e) => setPaymentType(e.target.value)}\n                    />\n                    <span>Full Payment (100%)</span>\n                  </label>\n                  <label className=\"payment-type\">\n                    <input\n                      type=\"radio\"\n                      name=\"paymentType\"\n                      value=\"partial\"\n                      checked={paymentType === 'partial'}\n                      onChange={(e) => setPaymentType(e.target.value)}\n                    />\n                    <span>Partial Payment (0-99.99%)</span>\n                  </label>\n                </div>\n                \n                {paymentType === 'partial' && (\n                  <div className=\"form-group\">\n                    <label>Amount to Pay</label>\n                    <input\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max={calculateTotal()}\n                      value={paidAmount || 0}\n                      onChange={(e) => {\n                        const value = parseFloat(e.target.value) || 0;\n                        setPaidAmount(value);\n                      }}\n                      placeholder=\"Enter amount to pay\"\n                    />\n                    <small>Total: ${calculateTotal().toFixed(2)} | Remaining: ${(calculateTotal() - (paidAmount || 0)).toFixed(2)}</small>\n                  </div>\n                )}\n              </div>\n              </form>\n\n              <div className=\"checkout-actions\">\n                <Button\n                  onClick={handleCheckout}\n                  loading={processing}\n                  className=\"validate-button\"\n                  size=\"large\"\n                  variant=\"primary\"\n                  disabled={cart.length === 0}\n                >\n                  {saleMode === 'complete' ? 'Complete Sale' : 'Create Pending Sale'}\n                  {printReceipt && ' & Print Receipt'}\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PointOfSale;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}