{"ast":null,"code":"import _objectSpread from\"/home/el-ifran/WareHouse_Manager/beverage_management_system/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{useAuth}from'../contexts/AuthContext';import api from'../services/api';import Button from'../components/Button';import PrintButton from'../components/PrintButton';import'./PointOfSale.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const PointOfSale=()=>{const{user}=useAuth();const[products,setProducts]=useState([]);const[categories,setCategories]=useState([]);const[cart,setCart]=useState([]);const[customerInfo,setCustomerInfo]=useState({name:'',phone:'',email:''});const[paymentMethod,setPaymentMethod]=useState('cash');const[loading,setLoading]=useState(true);const[processing,setProcessing]=useState(false);const[error,setError]=useState('');const[stockAvailability,setStockAvailability]=useState({});const[filters,setFilters]=useState({category:'',search:''});const[editingQuantity,setEditingQuantity]=useState(null);const[tempQuantity,setTempQuantity]=useState('');const[selectedUnits,setSelectedUnits]=useState({});// Track selected unit for each product\nuseEffect(()=>{fetchProducts();fetchCategories();},[]);useEffect(()=>{// Fetch stock availability for ALL products in bulk to improve performance\nif(products.length>0){fetchBulkStockAvailability();}// Set default selected units (base unit) for products with multiple compatible units\nconst defaultUnits={};products.forEach(product=>{if(product.compatible_units&&product.compatible_units.length>1){// Find the base unit (is_base_unit: true) or default unit (is_default: true)\nconst baseUnit=product.compatible_units.find(u=>u.unit.is_base_unit||u.is_default);if(baseUnit){defaultUnits[product.id]=baseUnit.unit;}}});setSelectedUnits(defaultUnits);},[products]);// eslint-disable-line react-hooks/exhaustive-deps\nconst fetchBulkStockAvailability=async()=>{try{const productIds=products.map(product=>product.id);const response=await api.post('/products/bulk-stock-availability/',{product_ids:productIds});// Convert the response to the format expected by the existing code\nconst stockData={};Object.values(response.data).forEach(productStock=>{stockData[productStock.product_id]=productStock.available_units;});console.log('Bulk stock availability response:',response.data);console.log('Processed stock data:',stockData);setStockAvailability(stockData);}catch(err){console.error('Bulk stock availability error:',err);// Fallback to individual calls if bulk fails\nproducts.forEach(product=>{fetchStockAvailability(product.id);});}};const refreshStockAvailability=()=>{// Use bulk fetch for better performance\nif(products.length>0){fetchBulkStockAvailability();}};const getUpdatedStockAvailability=productId=>{// Get the base stock availability for this product\nconst baseStockInfo=stockAvailability[productId];if(!baseStockInfo){return null;}// Calculate total pieces already in cart for this product (convert all units to pieces)\nconst totalPiecesInCart=cart.filter(item=>item.id===productId).reduce((total,item)=>{// Find the unit info to get conversion factor\nconst unitInfo=baseStockInfo.find(u=>u.id===item.unit_id);if(unitInfo&&unitInfo.conversion_factor){// Convert to pieces: if 1 carton = 20 pieces, then quantity * 20\nreturn total+item.quantity*unitInfo.conversion_factor;}else if(unitInfo&&unitInfo.is_base_unit){// If it's the base unit (pieces), no conversion needed\nreturn total+item.quantity;}return total;},0);// Calculate remaining pieces in base stock\nconst baseUnit=baseStockInfo.find(u=>u.is_base_unit);const totalBaseStock=baseUnit?baseUnit.available_quantity:0;const remainingPieces=Math.max(0,totalBaseStock-totalPiecesInCart);// Update each unit's available quantity based on remaining pieces\nreturn baseStockInfo.map(unit=>{let availableQuantity=0;let isAvailable=false;if(unit.is_base_unit){// For base unit (pieces), use remaining pieces directly\navailableQuantity=remainingPieces;isAvailable=remainingPieces>0;}else if(unit.conversion_factor){// For other units, calculate how many can be made from remaining pieces\n// If 1 carton = 20 pieces, then remainingPieces / 20 = available cartons\navailableQuantity=Math.floor(remainingPieces/unit.conversion_factor);isAvailable=availableQuantity>0;}return _objectSpread(_objectSpread({},unit),{},{available_quantity:availableQuantity,is_available:isAvailable});});};const fetchProducts=async function(){let filterParams=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{setLoading(true);const params=new URLSearchParams();// Always filter for active products\nparams.append('is_active','true');// Add filters to params\nif(filterParams.category)params.append('category',filterParams.category);if(filterParams.search)params.append('search',filterParams.search);const url=\"/products/\".concat(params.toString()?'?'+params.toString():'');const response=await api.get(url);setProducts(response.data.results||response.data);}catch(err){setError('Failed to load products');console.error('Products error:',err);}finally{setLoading(false);}};const fetchCategories=async()=>{try{const response=await api.get('/products/categories/');setCategories(response.data.results||response.data);}catch(err){console.error('Categories error:',err);}};const fetchStockAvailability=async productId=>{try{const response=await api.get(\"/products/\".concat(productId,\"/stock-availability/\"));setStockAvailability(prev=>_objectSpread(_objectSpread({},prev),{},{[productId]:response.data.available_units}));}catch(err){console.error('Stock availability error:',err);}};const addToCart=function(product){let selectedUnit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;// Use the first compatible unit if none selected\nconst unit=selectedUnit||product.compatible_units&&product.compatible_units[0]||{id:product.base_unit,name:'Piece',symbol:'piece'};// Check if stock availability data is loaded\nif(!stockAvailability[product.id]){setError('Loading stock information... Please try again.');return;}// Check updated stock availability for the selected unit\nconst updatedStockInfo=getUpdatedStockAvailability(product.id);const unitStockInfo=updatedStockInfo===null||updatedStockInfo===void 0?void 0:updatedStockInfo.find(u=>u.id===unit.id);if(!unitStockInfo){setError(\"Unit \".concat(unit.name,\" not found in stock information\"));return;}if(!unitStockInfo.is_available){setError(\"\".concat(unit.name,\" is out of stock\"));return;}// Check if there's enough stock for the selected unit\nif(unitStockInfo.available_quantity<=0){setError(\"No \".concat(unit.name,\" stock left\"));return;}const existingItem=cart.find(item=>item.id===product.id&&item.unit_id===unit.id);if(existingItem){// Check if adding 1 more would exceed available quantity\nif(existingItem.quantity+1>unitStockInfo.available_quantity){setError(\"Not enough \".concat(unit.name,\" available. Only \").concat(unitStockInfo.available_quantity,\" left.\"));return;}setCart(cart.map(item=>item.id===product.id&&item.unit_id===unit.id?_objectSpread(_objectSpread({},item),{},{quantity:item.quantity+1}):item));}else{// Check if adding 1 would exceed available quantity\nif(1>unitStockInfo.available_quantity){setError(\"Not enough \".concat(unit.name,\" available. Only \").concat(unitStockInfo.available_quantity,\" left.\"));return;}setCart([...cart,_objectSpread(_objectSpread({},product),{},{quantity:1,unit_id:unit.id,unit_name:unit.name,unit_symbol:unit.symbol,unit_price:unit.price||product.price})]);}setError('');};const updateQuantity=(productId,unitId,quantity)=>{if(quantity<=0){setCart(cart.filter(item=>!(item.id===productId&&item.unit_id===unitId)));}else{// Check updated stock availability for the selected unit\nconst updatedStockInfo=getUpdatedStockAvailability(productId);const unitStockInfo=updatedStockInfo===null||updatedStockInfo===void 0?void 0:updatedStockInfo.find(u=>u.id===unitId);if(!unitStockInfo||!unitStockInfo.is_available){setError(\"Unit is out of stock\");return;}// For updateQuantity, we need to consider the current cart quantity\nconst currentCartQuantity=cart.filter(item=>item.id===productId&&item.unit_id===unitId).reduce((sum,item)=>sum+item.quantity,0);// Calculate how much we can add (available + what's already in cart)\nconst maxAllowed=unitStockInfo.available_quantity+currentCartQuantity;if(quantity>maxAllowed){setError(\"Not enough stock available. Max: \".concat(maxAllowed));return;}setCart(cart.map(item=>item.id===productId&&item.unit_id===unitId?_objectSpread(_objectSpread({},item),{},{quantity}):item));setError('');}};const removeFromCart=(productId,unitId)=>{setCart(cart.filter(item=>!(item.id===productId&&item.unit_id===unitId)));};const calculateSubtotal=()=>{return cart.reduce((total,item)=>total+item.quantity*item.unit_price,0);};const calculateTax=()=>{let totalTax=0;cart.forEach(item=>{if(item.tax_rate&&item.tax_rate>0){// For tax-inclusive pricing: tax = (price × tax_rate) / (100 + tax_rate)\nconst itemTax=item.quantity*item.unit_price*item.tax_rate/(100+item.tax_rate);totalTax+=itemTax;}});return totalTax;};const calculateCost=()=>{let totalCost=0;cart.forEach(item=>{if(item.tax_rate&&item.tax_rate>0){// For tax-inclusive pricing: cost = (price × 100) / (100 + tax_rate)\nconst itemCost=item.quantity*item.unit_price*100/(100+item.tax_rate);totalCost+=itemCost;}else{// No tax, full price is cost\ntotalCost+=item.quantity*item.unit_price;}});return totalCost;};const handleCheckout=async()=>{if(cart.length===0){setError('Cart is empty');return;}setProcessing(true);setError('');try{const saleData={customer_name:customerInfo.name,customer_phone:customerInfo.phone,customer_email:customerInfo.email,payment_method:paymentMethod,items:cart.map(item=>({product:item.id,quantity:item.quantity,unit:item.unit_id,unit_price:item.unit_price}))};// Create the sale\nconst response=await api.post('/sales/',saleData);const saleId=response.data.id;const saleNumber=response.data.sale_number;try{// Complete the sale\nawait api.post(\"/sales/\".concat(saleId,\"/complete/\"));// Clear cart and customer info\nsetCart([]);setCustomerInfo({name:'',phone:'',email:''});// Refresh product data to update stock quantities\nawait fetchProducts();// Refresh stock availability for all products\nrefreshStockAvailability();alert(\"Sale completed successfully! Sale Number: \".concat(saleNumber));}catch(completeError){var _completeError$respon,_completeError$respon2;// Sale was created but completion failed\nconsole.error('Sale completion error:',completeError);setError(\"Sale created (\".concat(saleNumber,\") but completion failed: \").concat(((_completeError$respon=completeError.response)===null||_completeError$respon===void 0?void 0:(_completeError$respon2=_completeError$respon.data)===null||_completeError$respon2===void 0?void 0:_completeError$respon2.error)||completeError.message));// Still clear the cart since the sale was created\nsetCart([]);setCustomerInfo({name:'',phone:'',email:''});// Refresh data\nawait fetchProducts();refreshStockAvailability();}}catch(err){var _err$response,_err$response$data;setError(((_err$response=err.response)===null||_err$response===void 0?void 0:(_err$response$data=_err$response.data)===null||_err$response$data===void 0?void 0:_err$response$data.detail)||'Failed to create sale');console.error('Sale creation error:',err);}finally{setProcessing(false);}};const clearCart=()=>{setCart([]);setError('');};const handleFilterChange=(filterType,value)=>{const newFilters=_objectSpread(_objectSpread({},filters),{},{[filterType]:value});setFilters(newFilters);fetchProducts(newFilters);};const clearFilters=()=>{const clearedFilters={category:'',search:''};setFilters(clearedFilters);fetchProducts(clearedFilters);};const handleQuantityClick=item=>{setEditingQuantity(\"\".concat(item.id,\"-\").concat(item.unit_id));setTempQuantity(item.quantity.toString());};const handleQuantityChange=e=>{const value=e.target.value;// Only allow numbers and empty string\nif(value===''||/^\\d+$/.test(value)){setTempQuantity(value);}};const handleQuantitySubmit=item=>{const newQuantity=parseInt(tempQuantity);if(tempQuantity===''||isNaN(newQuantity)||newQuantity<0){setError('Please enter a valid quantity');setEditingQuantity(null);return;}// Check updated stock availability for the selected unit\nconst updatedStockInfo=getUpdatedStockAvailability(item.id);const unitStockInfo=updatedStockInfo===null||updatedStockInfo===void 0?void 0:updatedStockInfo.find(u=>u.id===item.unit_id);if(!unitStockInfo||!unitStockInfo.is_available){setError(\"Unit is out of stock\");setEditingQuantity(null);return;}// For handleQuantitySubmit, we need to consider the current cart quantity\nconst currentCartQuantity=cart.filter(cartItem=>cartItem.id===item.id&&cartItem.unit_id===item.unit_id).reduce((sum,cartItem)=>sum+cartItem.quantity,0);// Calculate how much we can add (available + what's already in cart)\nconst maxAllowed=unitStockInfo.available_quantity+currentCartQuantity;if(newQuantity>maxAllowed){setError(\"Not enough stock available. Max: \".concat(maxAllowed));setEditingQuantity(null);return;}if(newQuantity===0){// Remove item from cart if quantity is 0\nremoveFromCart(item.id,item.unit_id);}else{updateQuantity(item.id,item.unit_id,newQuantity);}setEditingQuantity(null);setTempQuantity('');setError('');};const handleQuantityCancel=()=>{setEditingQuantity(null);setTempQuantity('');};const handleQuantityKeyPress=(e,item)=>{if(e.key==='Enter'){handleQuantitySubmit(item);}else if(e.key==='Escape'){handleQuantityCancel();}};const handleUnitSelection=(productId,unitId)=>{setSelectedUnits(prev=>_objectSpread(_objectSpread({},prev),{},{[productId]:unitId}));};const handleProductCardClick=product=>{// Don't allow clicking on out-of-stock products\nif(product.stock_quantity<=0){return;}if(product.compatible_units&&product.compatible_units.length>1){// For multi-unit products, add with the currently selected unit\nconst selectedUnitId=selectedUnits[product.id];if(selectedUnitId){const selectedCompatibleUnit=product.compatible_units.find(u=>u.unit===selectedUnitId);if(selectedCompatibleUnit){// Convert compatible unit to the format expected by addToCart\nconst selectedUnit={id:selectedCompatibleUnit.unit,name:selectedCompatibleUnit.unit.name,symbol:selectedCompatibleUnit.unit.symbol};addToCart(product,selectedUnit);}}}else{// For single-unit products, add directly\naddToCart(product);}};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"pos\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"pos-loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"span\",{children:\"Loading products...\"})]})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"pos\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pos-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Point of Sale\"}),/*#__PURE__*/_jsx(\"div\",{className:\"pos-user\",children:/*#__PURE__*/_jsxs(\"span\",{children:[\"Cashier: \",user===null||user===void 0?void 0:user.username]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pos-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pos-products\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Products\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"pos-filters\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Category:\"}),/*#__PURE__*/_jsxs(\"select\",{value:filters.category,onChange:e=>handleFilterChange('category',e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"All Categories\"}),categories.map(category=>/*#__PURE__*/_jsx(\"option\",{value:category.id,children:category.name},category.id))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Search:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search products...\",value:filters.search,onChange:e=>handleFilterChange('search',e.target.value)})]}),/*#__PURE__*/_jsx(\"div\",{className:\"filter-group\",children:/*#__PURE__*/_jsx(Button,{variant:\"outline\",size:\"small\",onClick:clearFilters,children:\"Clear\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"products-info\",children:/*#__PURE__*/_jsxs(\"p\",{className:\"products-count\",children:[products.length,\" product\",products.length!==1?'s':'',\" found\"]})}),/*#__PURE__*/_jsx(\"div\",{className:\"products-grid\",children:products.map(product=>{var _product$compatible_u;return/*#__PURE__*/_jsx(\"div\",{className:\"product-card \".concat(product.stock_quantity<=0?'out-of-stock':'',\" clickable\"),onClick:()=>handleProductCardClick(product),children:/*#__PURE__*/_jsxs(\"div\",{className:\"product-info\",children:[/*#__PURE__*/_jsx(\"h3\",{children:product.name}),/*#__PURE__*/_jsx(\"p\",{className:\"product-sku\",children:product.sku}),/*#__PURE__*/_jsxs(\"p\",{className:\"product-price\",children:[\"$\",parseFloat(product.price).toFixed(2),product.compatible_units&&product.compatible_units.length>1&&\" (base unit: \".concat(((_product$compatible_u=product.compatible_units.find(u=>u.unit.is_base_unit))===null||_product$compatible_u===void 0?void 0:_product$compatible_u.unit.symbol)||'piece',\")\")]}),/*#__PURE__*/_jsxs(\"p\",{className:\"product-stock\",children:[\"Stock: \",product.stock_quantity,\" \",product.unit,stockAvailability[product.id]&&product.compatible_units&&product.compatible_units.length>1&&/*#__PURE__*/_jsx(\"span\",{className:\"stock-details\",children:(()=>{const updatedStockInfo=getUpdatedStockAvailability(product.id);return product.compatible_units.map(compatibleUnit=>{const unitStockInfo=updatedStockInfo===null||updatedStockInfo===void 0?void 0:updatedStockInfo.find(u=>u.id===compatibleUnit.unit);if(!unitStockInfo)return null;// Use unit info from stock availability if available, otherwise fallback to compatible unit\nconst unitName=(unitStockInfo===null||unitStockInfo===void 0?void 0:unitStockInfo.name)||compatibleUnit.unit.name;return/*#__PURE__*/_jsxs(\"span\",{className:\"unit-stock \".concat(unitStockInfo.is_available?'available':'unavailable'),children:[unitName,\": \",unitStockInfo.available_quantity]},compatibleUnit.unit);}).filter(Boolean);})()})]}),product.compatible_units&&product.compatible_units.length>1&&/*#__PURE__*/_jsxs(\"div\",{className:\"unit-selection\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Unit:\"}),/*#__PURE__*/_jsxs(\"select\",{className:\"unit-select\",value:selectedUnits[product.id]||'',onChange:e=>{const unitId=parseInt(e.target.value);handleUnitSelection(product.id,unitId);},onClick:e=>e.stopPropagation(),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select Unit\"}),product.compatible_units.map(compatibleUnit=>{var _unitStockInfo$price;// Use updated stock availability that considers cart contents\nconst updatedStockInfo=getUpdatedStockAvailability(product.id);const unitStockInfo=updatedStockInfo===null||updatedStockInfo===void 0?void 0:updatedStockInfo.find(u=>u.id===compatibleUnit.unit);const isAvailable=unitStockInfo?unitStockInfo.is_available:false;const availableQty=unitStockInfo?unitStockInfo.available_quantity:0;// Use unit info from stock availability if available, otherwise fallback to compatible unit\nconst unitName=(unitStockInfo===null||unitStockInfo===void 0?void 0:unitStockInfo.name)||compatibleUnit.unit.name;const unitSymbol=(unitStockInfo===null||unitStockInfo===void 0?void 0:unitStockInfo.symbol)||compatibleUnit.unit.symbol;return/*#__PURE__*/_jsxs(\"option\",{value:compatibleUnit.unit,disabled:!isAvailable,children:[unitName,\" (\",unitSymbol,\") - $\",(unitStockInfo===null||unitStockInfo===void 0?void 0:(_unitStockInfo$price=unitStockInfo.price)===null||_unitStockInfo$price===void 0?void 0:_unitStockInfo$price.toFixed(2))||'N/A',!isAvailable?' - OUT OF STOCK':\" - \".concat(availableQty,\" available\")]},compatibleUnit.unit);})]})]}),(!product.compatible_units||product.compatible_units.length<=1)&&/*#__PURE__*/_jsx(Button,{variant:\"primary\",size:\"small\",onClick:()=>addToCart(product),disabled:(()=>{// Check if any unit has available stock\nif(!stockAvailability[product.id]){return true;// Disable if stock data not loaded\n}// For single unit products, check base stock\nreturn product.stock_quantity<=0;})(),className:\"add-to-cart-btn\",children:(()=>{if(!stockAvailability[product.id]){return'Loading...';}return product.stock_quantity<=0?'Out of Stock':'Add to Cart';})()}),product.available_units&&product.available_units.length>1&&/*#__PURE__*/_jsx(\"div\",{className:\"unit-instruction\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Click card or select unit to add to cart\"})})]})},product.id);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pos-cart\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"cart-header\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Shopping Cart\"}),cart.length>0&&/*#__PURE__*/_jsx(Button,{variant:\"outline\",size:\"small\",onClick:clearCart,children:\"Clear Cart\"})]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsx(\"div\",{className:\"cart-items\",children:cart.length===0?/*#__PURE__*/_jsx(\"p\",{className:\"empty-cart\",children:\"Cart is empty\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"cart-table-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"header-product\",children:\"Product\"}),/*#__PURE__*/_jsx(\"div\",{className:\"header-unit\",children:\"Unit\"}),/*#__PURE__*/_jsx(\"div\",{className:\"header-price\",children:\"Price\"}),/*#__PURE__*/_jsx(\"div\",{className:\"header-quantity\",children:\"Qty\"}),/*#__PURE__*/_jsx(\"div\",{className:\"header-total\",children:\"Total\"}),/*#__PURE__*/_jsx(\"div\",{className:\"header-actions\",children:\"Actions\"})]}),cart.map(item=>/*#__PURE__*/_jsxs(\"div\",{className:\"cart-item\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"item-product\",children:[/*#__PURE__*/_jsx(\"h4\",{children:item.name}),/*#__PURE__*/_jsxs(\"p\",{className:\"item-sku\",children:[\"SKU: \",item.sku]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"item-unit\",children:item.unit_symbol||'piece'}),/*#__PURE__*/_jsxs(\"div\",{className:\"item-price\",children:[\"$\",parseFloat(item.unit_price).toFixed(2)]}),/*#__PURE__*/_jsx(\"div\",{className:\"item-quantity\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"quantity-controls\",children:[/*#__PURE__*/_jsx(Button,{size:\"small\",variant:\"outline\",onClick:()=>updateQuantity(item.id,item.unit_id,item.quantity-1),children:\"-\"}),editingQuantity===\"\".concat(item.id,\"-\").concat(item.unit_id)?/*#__PURE__*/_jsx(\"div\",{className:\"quantity-edit\",children:/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:tempQuantity,onChange:handleQuantityChange,onKeyPress:e=>handleQuantityKeyPress(e,item),onBlur:()=>handleQuantitySubmit(item),className:\"quantity-input\",min:\"0\",max:item.stock_quantity,autoFocus:true})}):/*#__PURE__*/_jsx(\"span\",{className:\"quantity clickable\",onClick:()=>handleQuantityClick(item),title:\"Click to edit quantity\",children:item.quantity}),/*#__PURE__*/_jsx(Button,{size:\"small\",variant:\"outline\",onClick:()=>updateQuantity(item.id,item.unit_id,item.quantity+1),disabled:(()=>{const updatedStockInfo=getUpdatedStockAvailability(item.id);const unitStockInfo=updatedStockInfo===null||updatedStockInfo===void 0?void 0:updatedStockInfo.find(u=>u.id===item.unit_id);const currentCartQuantity=cart.filter(cartItem=>cartItem.id===item.id&&cartItem.unit_id===item.unit_id).reduce((sum,cartItem)=>sum+cartItem.quantity,0);const maxAllowed=((unitStockInfo===null||unitStockInfo===void 0?void 0:unitStockInfo.available_quantity)||0)+currentCartQuantity;return item.quantity>=maxAllowed;})(),children:\"+\"})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"item-total\",children:[\"$\",(item.quantity*item.unit_price).toFixed(2)]}),/*#__PURE__*/_jsx(\"div\",{className:\"item-actions\",children:/*#__PURE__*/_jsx(Button,{size:\"small\",variant:\"danger\",onClick:()=>removeFromCart(item.id,item.unit_id),title:\"Remove item\",children:\"\\xD7\"})})]},\"\".concat(item.id,\"-\").concat(item.unit_id)))]})}),cart.length>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"cart-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"summary-row\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Total Amount:\"}),/*#__PURE__*/_jsxs(\"span\",{children:[\"$\",calculateSubtotal().toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-row cost-breakdown\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Cost (excl. tax):\"}),/*#__PURE__*/_jsxs(\"span\",{children:[\"$\",calculateCost().toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-row tax-breakdown\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Tax included:\"}),/*#__PURE__*/_jsxs(\"span\",{children:[\"$\",calculateTax().toFixed(2)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"summary-row total\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Total:\"}),/*#__PURE__*/_jsxs(\"span\",{children:[\"$\",calculateSubtotal().toFixed(2)]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"customer-info\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Customer Information\"}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Customer Name (Optional)\",value:customerInfo.name,onChange:e=>setCustomerInfo(_objectSpread(_objectSpread({},customerInfo),{},{name:e.target.value}))})}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{type:\"tel\",placeholder:\"Phone Number (Optional)\",value:customerInfo.phone,onChange:e=>setCustomerInfo(_objectSpread(_objectSpread({},customerInfo),{},{phone:e.target.value}))})}),/*#__PURE__*/_jsx(\"div\",{className:\"form-group\",children:/*#__PURE__*/_jsx(\"input\",{type:\"email\",placeholder:\"Email (Optional)\",value:customerInfo.email,onChange:e=>setCustomerInfo(_objectSpread(_objectSpread({},customerInfo),{},{email:e.target.value}))})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"payment-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Payment Method\"}),/*#__PURE__*/_jsx(\"div\",{className:\"payment-methods\",children:['cash','card','mobile_money','bank_transfer'].map(method=>/*#__PURE__*/_jsxs(\"label\",{className:\"payment-method\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"payment\",value:method,checked:paymentMethod===method,onChange:e=>setPaymentMethod(e.target.value)}),/*#__PURE__*/_jsx(\"span\",{children:method.replace('_',' ').toUpperCase()})]},method))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"checkout-actions\",children:[/*#__PURE__*/_jsx(PrintButton,{data:{sale_number:\"TEMP-\".concat(Date.now()),customer_name:'Walk-in Customer',created_at:new Date().toISOString(),status:'pending',total_amount:calculateSubtotal(),items:cart.map(item=>{var _item$unit;return{product_name:item.name,product_sku:item.sku,quantity:item.quantity,unit_name:((_item$unit=item.unit)===null||_item$unit===void 0?void 0:_item$unit.name)||'piece',unit_price:item.price,total_price:item.price*item.quantity};})},title:\"Sale Receipt\",type:\"sale\",printText:\"Print Receipt\",validateText:\"Complete & Print\",showValidateOption:true,onValidate:handleCheckout,disabled:cart.length===0,className:\"print-receipt-btn\"}),/*#__PURE__*/_jsx(Button,{onClick:handleCheckout,loading:processing,className:\"checkout-button\",size:\"large\",children:\"Complete Sale\"})]})]})]})]})]});};export default PointOfSale;","map":{"version":3,"names":["React","useState","useEffect","useAuth","api","Button","PrintButton","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","PointOfSale","user","products","setProducts","categories","setCategories","cart","setCart","customerInfo","setCustomerInfo","name","phone","email","paymentMethod","setPaymentMethod","loading","setLoading","processing","setProcessing","error","setError","stockAvailability","setStockAvailability","filters","setFilters","category","search","editingQuantity","setEditingQuantity","tempQuantity","setTempQuantity","selectedUnits","setSelectedUnits","fetchProducts","fetchCategories","length","fetchBulkStockAvailability","defaultUnits","forEach","product","compatible_units","baseUnit","find","u","unit","is_base_unit","is_default","id","productIds","map","response","post","product_ids","stockData","Object","values","data","productStock","product_id","available_units","console","log","err","fetchStockAvailability","refreshStockAvailability","getUpdatedStockAvailability","productId","baseStockInfo","totalPiecesInCart","filter","item","reduce","total","unitInfo","unit_id","conversion_factor","quantity","totalBaseStock","available_quantity","remainingPieces","Math","max","availableQuantity","isAvailable","floor","_objectSpread","is_available","filterParams","arguments","undefined","params","URLSearchParams","append","url","concat","toString","get","results","prev","addToCart","selectedUnit","base_unit","symbol","updatedStockInfo","unitStockInfo","existingItem","unit_name","unit_symbol","unit_price","price","updateQuantity","unitId","currentCartQuantity","sum","maxAllowed","removeFromCart","calculateSubtotal","calculateTax","totalTax","tax_rate","itemTax","calculateCost","totalCost","itemCost","handleCheckout","saleData","customer_name","customer_phone","customer_email","payment_method","items","saleId","saleNumber","sale_number","alert","completeError","_completeError$respon","_completeError$respon2","message","_err$response","_err$response$data","detail","clearCart","handleFilterChange","filterType","value","newFilters","clearFilters","clearedFilters","handleQuantityClick","handleQuantityChange","e","target","test","handleQuantitySubmit","newQuantity","parseInt","isNaN","cartItem","handleQuantityCancel","handleQuantityKeyPress","key","handleUnitSelection","handleProductCardClick","stock_quantity","selectedUnitId","selectedCompatibleUnit","className","children","username","onChange","type","placeholder","variant","size","onClick","_product$compatible_u","sku","parseFloat","toFixed","compatibleUnit","unitName","Boolean","stopPropagation","_unitStockInfo$price","availableQty","unitSymbol","disabled","onKeyPress","onBlur","min","autoFocus","title","method","checked","replace","toUpperCase","Date","now","created_at","toISOString","status","total_amount","_item$unit","product_name","product_sku","total_price","printText","validateText","showValidateOption","onValidate"],"sources":["/home/el-ifran/WareHouse_Manager/beverage_management_system/src/pages/PointOfSale.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport api from '../services/api';\nimport Button from '../components/Button';\nimport PrintButton from '../components/PrintButton';\nimport './PointOfSale.css';\n\nconst PointOfSale = () => {\n  const { user } = useAuth();\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [customerInfo, setCustomerInfo] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [paymentMethod, setPaymentMethod] = useState('cash');\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [stockAvailability, setStockAvailability] = useState({});\n  const [filters, setFilters] = useState({\n    category: '',\n    search: ''\n  });\n  const [editingQuantity, setEditingQuantity] = useState(null);\n  const [tempQuantity, setTempQuantity] = useState('');\n  const [selectedUnits, setSelectedUnits] = useState({}); // Track selected unit for each product\n\n  useEffect(() => {\n    fetchProducts();\n    fetchCategories();\n  }, []);\n\n  useEffect(() => {\n    // Fetch stock availability for ALL products in bulk to improve performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n    \n    // Set default selected units (base unit) for products with multiple compatible units\n    const defaultUnits = {};\n    products.forEach(product => {\n      if (product.compatible_units && product.compatible_units.length > 1) {\n        // Find the base unit (is_base_unit: true) or default unit (is_default: true)\n        const baseUnit = product.compatible_units.find(u => u.unit.is_base_unit || u.is_default);\n        if (baseUnit) {\n          defaultUnits[product.id] = baseUnit.unit;\n        }\n      }\n    });\n    setSelectedUnits(defaultUnits);\n  }, [products]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchBulkStockAvailability = async () => {\n    try {\n      const productIds = products.map(product => product.id);\n      const response = await api.post('/products/bulk-stock-availability/', {\n        product_ids: productIds\n      });\n      \n      // Convert the response to the format expected by the existing code\n      const stockData = {};\n      Object.values(response.data).forEach(productStock => {\n        stockData[productStock.product_id] = productStock.available_units;\n      });\n      \n      console.log('Bulk stock availability response:', response.data);\n      console.log('Processed stock data:', stockData);\n      \n      setStockAvailability(stockData);\n    } catch (err) {\n      console.error('Bulk stock availability error:', err);\n      // Fallback to individual calls if bulk fails\n      products.forEach(product => {\n        fetchStockAvailability(product.id);\n      });\n    }\n  };\n\n  const refreshStockAvailability = () => {\n    // Use bulk fetch for better performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n  };\n\n\n  const getUpdatedStockAvailability = (productId) => {\n    // Get the base stock availability for this product\n    const baseStockInfo = stockAvailability[productId];\n    if (!baseStockInfo) {\n      return null;\n    }\n\n    // Calculate total pieces already in cart for this product (convert all units to pieces)\n    const totalPiecesInCart = cart\n      .filter(item => item.id === productId)\n      .reduce((total, item) => {\n        // Find the unit info to get conversion factor\n        const unitInfo = baseStockInfo.find(u => u.id === item.unit_id);\n        if (unitInfo && unitInfo.conversion_factor) {\n          // Convert to pieces: if 1 carton = 20 pieces, then quantity * 20\n          return total + (item.quantity * unitInfo.conversion_factor);\n        } else if (unitInfo && unitInfo.is_base_unit) {\n          // If it's the base unit (pieces), no conversion needed\n          return total + item.quantity;\n        }\n        return total;\n      }, 0);\n\n    // Calculate remaining pieces in base stock\n    const baseUnit = baseStockInfo.find(u => u.is_base_unit);\n    const totalBaseStock = baseUnit ? baseUnit.available_quantity : 0;\n    const remainingPieces = Math.max(0, totalBaseStock - totalPiecesInCart);\n\n\n    // Update each unit's available quantity based on remaining pieces\n    return baseStockInfo.map(unit => {\n      let availableQuantity = 0;\n      let isAvailable = false;\n\n      if (unit.is_base_unit) {\n        // For base unit (pieces), use remaining pieces directly\n        availableQuantity = remainingPieces;\n        isAvailable = remainingPieces > 0;\n      } else if (unit.conversion_factor) {\n        // For other units, calculate how many can be made from remaining pieces\n        // If 1 carton = 20 pieces, then remainingPieces / 20 = available cartons\n        availableQuantity = Math.floor(remainingPieces / unit.conversion_factor);\n        isAvailable = availableQuantity > 0;\n      }\n\n      return {\n        ...unit,\n        available_quantity: availableQuantity,\n        is_available: isAvailable\n      };\n    });\n  };\n\n  const fetchProducts = async (filterParams = {}) => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n      \n      // Always filter for active products\n      params.append('is_active', 'true');\n      \n      // Add filters to params\n      if (filterParams.category) params.append('category', filterParams.category);\n      if (filterParams.search) params.append('search', filterParams.search);\n      \n      const url = `/products/${params.toString() ? '?' + params.toString() : ''}`;\n      const response = await api.get(url);\n      setProducts(response.data.results || response.data);\n    } catch (err) {\n      setError('Failed to load products');\n      console.error('Products error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCategories = async () => {\n    try {\n      const response = await api.get('/products/categories/');\n      setCategories(response.data.results || response.data);\n    } catch (err) {\n      console.error('Categories error:', err);\n    }\n  };\n\n  const fetchStockAvailability = async (productId) => {\n    try {\n      const response = await api.get(`/products/${productId}/stock-availability/`);\n      setStockAvailability(prev => ({\n        ...prev,\n        [productId]: response.data.available_units\n      }));\n    } catch (err) {\n      console.error('Stock availability error:', err);\n    }\n  };\n\n  const addToCart = (product, selectedUnit = null) => {\n    // Use the first compatible unit if none selected\n    const unit = selectedUnit || (product.compatible_units && product.compatible_units[0]) || { id: product.base_unit, name: 'Piece', symbol: 'piece' };\n    \n    \n    // Check if stock availability data is loaded\n    if (!stockAvailability[product.id]) {\n      setError('Loading stock information... Please try again.');\n      return;\n    }\n    \n    // Check updated stock availability for the selected unit\n    const updatedStockInfo = getUpdatedStockAvailability(product.id);\n    const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n    \n    \n    if (!unitStockInfo) {\n      setError(`Unit ${unit.name} not found in stock information`);\n      return;\n    }\n    \n    if (!unitStockInfo.is_available) {\n      setError(`${unit.name} is out of stock`);\n      return;\n    }\n    \n    // Check if there's enough stock for the selected unit\n    if (unitStockInfo.available_quantity <= 0) {\n      setError(`No ${unit.name} stock left`);\n      return;\n    }\n    \n    const existingItem = cart.find(item => item.id === product.id && item.unit_id === unit.id);\n    if (existingItem) {\n      // Check if adding 1 more would exceed available quantity\n      if (existingItem.quantity + 1 > unitStockInfo.available_quantity) {\n        setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n        return;\n      }\n      setCart(cart.map(item =>\n        item.id === product.id && item.unit_id === unit.id\n          ? { ...item, quantity: item.quantity + 1 }\n          : item\n      ));\n    } else {\n      // Check if adding 1 would exceed available quantity\n      if (1 > unitStockInfo.available_quantity) {\n        setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n        return;\n      }\n      setCart([...cart, {\n        ...product,\n        quantity: 1,\n        unit_id: unit.id,\n        unit_name: unit.name,\n        unit_symbol: unit.symbol,\n        unit_price: unit.price || product.price\n      }]);\n    }\n    setError('');\n  };\n\n  const updateQuantity = (productId, unitId, quantity) => {\n    if (quantity <= 0) {\n      setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId)));\n    } else {\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(productId);\n      const unitStockInfo = updatedStockInfo?.find(u => u.id === unitId);\n      \n      if (!unitStockInfo || !unitStockInfo.is_available) {\n        setError(`Unit is out of stock`);\n        return;\n      }\n      \n      // For updateQuantity, we need to consider the current cart quantity\n      const currentCartQuantity = cart\n        .filter(item => item.id === productId && item.unit_id === unitId)\n        .reduce((sum, item) => sum + item.quantity, 0);\n      \n      // Calculate how much we can add (available + what's already in cart)\n      const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n      \n      if (quantity > maxAllowed) {\n        setError(`Not enough stock available. Max: ${maxAllowed}`);\n        return;\n      }\n      \n      setCart(cart.map(item =>\n        item.id === productId && item.unit_id === unitId\n          ? { ...item, quantity }\n          : item\n      ));\n      setError('');\n    }\n  };\n\n  const removeFromCart = (productId, unitId) => {\n    setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId)));\n  };\n\n  const calculateSubtotal = () => {\n    return cart.reduce((total, item) => total + (item.quantity * item.unit_price), 0);\n  };\n\n  const calculateTax = () => {\n    let totalTax = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: tax = (price × tax_rate) / (100 + tax_rate)\n        const itemTax = (item.quantity * item.unit_price * item.tax_rate) / (100 + item.tax_rate);\n        totalTax += itemTax;\n      }\n    });\n    return totalTax;\n  };\n\n  const calculateCost = () => {\n    let totalCost = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: cost = (price × 100) / (100 + tax_rate)\n        const itemCost = (item.quantity * item.unit_price * 100) / (100 + item.tax_rate);\n        totalCost += itemCost;\n      } else {\n        // No tax, full price is cost\n        totalCost += item.quantity * item.unit_price;\n      }\n    });\n    return totalCost;\n  };\n\n\n  const handleCheckout = async () => {\n    if (cart.length === 0) {\n      setError('Cart is empty');\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n\n    try {\n      const saleData = {\n        customer_name: customerInfo.name,\n        customer_phone: customerInfo.phone,\n        customer_email: customerInfo.email,\n        payment_method: paymentMethod,\n        items: cart.map(item => ({\n          product: item.id,\n          quantity: item.quantity,\n          unit: item.unit_id,\n          unit_price: item.unit_price\n        }))\n      };\n\n      // Create the sale\n      const response = await api.post('/sales/', saleData);\n      const saleId = response.data.id;\n      const saleNumber = response.data.sale_number;\n      \n      try {\n        // Complete the sale\n        await api.post(`/sales/${saleId}/complete/`);\n        \n        // Clear cart and customer info\n        setCart([]);\n        setCustomerInfo({ name: '', phone: '', email: '' });\n        \n        // Refresh product data to update stock quantities\n        await fetchProducts();\n        \n        // Refresh stock availability for all products\n        refreshStockAvailability();\n        \n        alert(`Sale completed successfully! Sale Number: ${saleNumber}`);\n      } catch (completeError) {\n        // Sale was created but completion failed\n        console.error('Sale completion error:', completeError);\n        setError(`Sale created (${saleNumber}) but completion failed: ${completeError.response?.data?.error || completeError.message}`);\n        \n        // Still clear the cart since the sale was created\n        setCart([]);\n        setCustomerInfo({ name: '', phone: '', email: '' });\n        \n        // Refresh data\n        await fetchProducts();\n        refreshStockAvailability();\n      }\n    } catch (err) {\n      setError(err.response?.data?.detail || 'Failed to create sale');\n      console.error('Sale creation error:', err);\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const clearCart = () => {\n    setCart([]);\n    setError('');\n  };\n\n  const handleFilterChange = (filterType, value) => {\n    const newFilters = { ...filters, [filterType]: value };\n    setFilters(newFilters);\n    fetchProducts(newFilters);\n  };\n\n  const clearFilters = () => {\n    const clearedFilters = { category: '', search: '' };\n    setFilters(clearedFilters);\n    fetchProducts(clearedFilters);\n  };\n\n  const handleQuantityClick = (item) => {\n    setEditingQuantity(`${item.id}-${item.unit_id}`);\n    setTempQuantity(item.quantity.toString());\n  };\n\n  const handleQuantityChange = (e) => {\n    const value = e.target.value;\n    // Only allow numbers and empty string\n    if (value === '' || /^\\d+$/.test(value)) {\n      setTempQuantity(value);\n    }\n  };\n\n  const handleQuantitySubmit = (item) => {\n    const newQuantity = parseInt(tempQuantity);\n    \n    if (tempQuantity === '' || isNaN(newQuantity) || newQuantity < 0) {\n      setError('Please enter a valid quantity');\n      setEditingQuantity(null);\n      return;\n    }\n    \n    // Check updated stock availability for the selected unit\n    const updatedStockInfo = getUpdatedStockAvailability(item.id);\n    const unitStockInfo = updatedStockInfo?.find(u => u.id === item.unit_id);\n    \n    if (!unitStockInfo || !unitStockInfo.is_available) {\n      setError(`Unit is out of stock`);\n      setEditingQuantity(null);\n      return;\n    }\n    \n    // For handleQuantitySubmit, we need to consider the current cart quantity\n    const currentCartQuantity = cart\n      .filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id)\n      .reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n    \n    // Calculate how much we can add (available + what's already in cart)\n    const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n    \n    if (newQuantity > maxAllowed) {\n      setError(`Not enough stock available. Max: ${maxAllowed}`);\n      setEditingQuantity(null);\n      return;\n    }\n    \n    if (newQuantity === 0) {\n      // Remove item from cart if quantity is 0\n      removeFromCart(item.id, item.unit_id);\n    } else {\n      updateQuantity(item.id, item.unit_id, newQuantity);\n    }\n    \n    setEditingQuantity(null);\n    setTempQuantity('');\n    setError('');\n  };\n\n  const handleQuantityCancel = () => {\n    setEditingQuantity(null);\n    setTempQuantity('');\n  };\n\n  const handleQuantityKeyPress = (e, item) => {\n    if (e.key === 'Enter') {\n      handleQuantitySubmit(item);\n    } else if (e.key === 'Escape') {\n      handleQuantityCancel();\n    }\n  };\n\n  const handleUnitSelection = (productId, unitId) => {\n    setSelectedUnits(prev => ({\n      ...prev,\n      [productId]: unitId\n    }));\n  };\n\n  const handleProductCardClick = (product) => {\n    // Don't allow clicking on out-of-stock products\n    if (product.stock_quantity <= 0) {\n      return;\n    }\n    \n    if (product.compatible_units && product.compatible_units.length > 1) {\n      // For multi-unit products, add with the currently selected unit\n      const selectedUnitId = selectedUnits[product.id];\n      if (selectedUnitId) {\n        const selectedCompatibleUnit = product.compatible_units.find(u => u.unit === selectedUnitId);\n        if (selectedCompatibleUnit) {\n          // Convert compatible unit to the format expected by addToCart\n          const selectedUnit = {\n            id: selectedCompatibleUnit.unit,\n            name: selectedCompatibleUnit.unit.name,\n            symbol: selectedCompatibleUnit.unit.symbol\n          };\n          addToCart(product, selectedUnit);\n        }\n      }\n    } else {\n      // For single-unit products, add directly\n      addToCart(product);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"pos\">\n        <div className=\"pos-loading\">\n          <div className=\"spinner\"></div>\n          <span>Loading products...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pos\">\n      <div className=\"pos-header\">\n        <h1>Point of Sale</h1>\n        <div className=\"pos-user\">\n          <span>Cashier: {user?.username}</span>\n        </div>\n      </div>\n\n      <div className=\"pos-content\">\n        {/* Product Grid */}\n        <div className=\"pos-products\">\n          <h2>Products</h2>\n          \n          {/* Filters */}\n          <div className=\"pos-filters\">\n            <div className=\"filter-group\">\n              <label>Category:</label>\n              <select \n                value={filters.category} \n                onChange={(e) => handleFilterChange('category', e.target.value)}\n              >\n                <option value=\"\">All Categories</option>\n                {categories.map(category => (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"filter-group\">\n              <label>Search:</label>\n              <input\n                type=\"text\"\n                placeholder=\"Search products...\"\n                value={filters.search}\n                onChange={(e) => handleFilterChange('search', e.target.value)}\n              />\n            </div>\n            <div className=\"filter-group\">\n              <Button variant=\"outline\" size=\"small\" onClick={clearFilters}>\n                Clear\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"products-info\">\n            <p className=\"products-count\">\n              {products.length} product{products.length !== 1 ? 's' : ''} found\n            </p>\n          </div>\n\n          <div className=\"products-grid\">\n            {products.map(product => (\n              <div\n                key={product.id}\n                className={`product-card ${product.stock_quantity <= 0 ? 'out-of-stock' : ''} clickable`}\n                onClick={() => handleProductCardClick(product)}\n              >\n                <div className=\"product-info\">\n                  <h3>{product.name}</h3>\n                  <p className=\"product-sku\">{product.sku}</p>\n                  <p className=\"product-price\">\n                    ${parseFloat(product.price).toFixed(2)}\n                    {product.compatible_units && product.compatible_units.length > 1 && \n                      ` (base unit: ${product.compatible_units.find(u => u.unit.is_base_unit)?.unit.symbol || 'piece'})`\n                    }\n                  </p>\n                  <p className=\"product-stock\">\n                    Stock: {product.stock_quantity} {product.unit}\n                    {stockAvailability[product.id] && product.compatible_units && product.compatible_units.length > 1 && (\n                      <span className=\"stock-details\">\n                        {(() => {\n                          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                          return product.compatible_units.map(compatibleUnit => {\n                            const unitStockInfo = updatedStockInfo?.find(u => u.id === compatibleUnit.unit);\n                            if (!unitStockInfo) return null;\n                            \n                            // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                            const unitName = unitStockInfo?.name || compatibleUnit.unit.name;\n                            \n                            return (\n                              <span key={compatibleUnit.unit} className={`unit-stock ${unitStockInfo.is_available ? 'available' : 'unavailable'}`}>\n                                {unitName}: {unitStockInfo.available_quantity}\n                              </span>\n                            );\n                          }).filter(Boolean);\n                        })()}\n                      </span>\n                    )}\n                  </p>\n                  \n                  {/* Unit Selection - Only show for products with multiple compatible units */}\n                  {product.compatible_units && product.compatible_units.length > 1 && (\n                    <div className=\"unit-selection\">\n                      <label>Unit:</label>\n                      <select \n                        className=\"unit-select\"\n                        value={selectedUnits[product.id] || ''}\n                        onChange={(e) => {\n                          const unitId = parseInt(e.target.value);\n                          handleUnitSelection(product.id, unitId);\n                        }}\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        <option value=\"\">Select Unit</option>\n                        {product.compatible_units.map(compatibleUnit => {\n                          // Use updated stock availability that considers cart contents\n                          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                          const unitStockInfo = updatedStockInfo?.find(u => u.id === compatibleUnit.unit);\n                          const isAvailable = unitStockInfo ? unitStockInfo.is_available : false;\n                          const availableQty = unitStockInfo ? unitStockInfo.available_quantity : 0;\n                          \n                          // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                          const unitName = unitStockInfo?.name || compatibleUnit.unit.name;\n                          const unitSymbol = unitStockInfo?.symbol || compatibleUnit.unit.symbol;\n                          \n                          return (\n                            <option \n                              key={compatibleUnit.unit} \n                              value={compatibleUnit.unit}\n                              disabled={!isAvailable}\n                            >\n                              {unitName} ({unitSymbol}) - ${unitStockInfo?.price?.toFixed(2) || 'N/A'} \n                              {!isAvailable ? ' - OUT OF STOCK' : \n                               ` - ${availableQty} available`}\n                            </option>\n                          );\n                        })}\n                      </select>\n                    </div>\n                  )}\n                  \n                  {/* Add to Cart Button - Only show for single unit products */}\n                  {(!product.compatible_units || product.compatible_units.length <= 1) && (\n                    <Button\n                      variant=\"primary\"\n                      size=\"small\"\n                      onClick={() => addToCart(product)}\n                      disabled={(() => {\n                        // Check if any unit has available stock\n                        if (!stockAvailability[product.id]) {\n                          return true; // Disable if stock data not loaded\n                        }\n                        \n                        // For single unit products, check base stock\n                        return product.stock_quantity <= 0;\n                      })()}\n                      className=\"add-to-cart-btn\"\n                    >\n                      {(() => {\n                        if (!stockAvailability[product.id]) {\n                          return 'Loading...';\n                        }\n                        \n                        return product.stock_quantity <= 0 ? 'Out of Stock' : 'Add to Cart';\n                      })()}\n                    </Button>\n                  )}\n                  \n                  {/* For products with multiple units, show instruction */}\n                  {product.available_units && product.available_units.length > 1 && (\n                    <div className=\"unit-instruction\">\n                      <p>Click card or select unit to add to cart</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Cart and Checkout */}\n        <div className=\"pos-cart\">\n          <div className=\"cart-header\">\n            <h2>Shopping Cart</h2>\n            {cart.length > 0 && (\n              <Button variant=\"outline\" size=\"small\" onClick={clearCart}>\n                Clear Cart\n              </Button>\n            )}\n          </div>\n\n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"cart-items\">\n            {cart.length === 0 ? (\n              <p className=\"empty-cart\">Cart is empty</p>\n            ) : (\n              <>\n                <div className=\"cart-table-header\">\n                  <div className=\"header-product\">Product</div>\n                  <div className=\"header-unit\">Unit</div>\n                  <div className=\"header-price\">Price</div>\n                  <div className=\"header-quantity\">Qty</div>\n                  <div className=\"header-total\">Total</div>\n                  <div className=\"header-actions\">Actions</div>\n                </div>\n                {cart.map(item => (\n                  <div key={`${item.id}-${item.unit_id}`} className=\"cart-item\">\n                    <div className=\"item-product\">\n                      <h4>{item.name}</h4>\n                      <p className=\"item-sku\">SKU: {item.sku}</p>\n                    </div>\n                    <div className=\"item-unit\">\n                      {item.unit_symbol || 'piece'}\n                    </div>\n                    <div className=\"item-price\">\n                      ${parseFloat(item.unit_price).toFixed(2)}\n                    </div>\n                    <div className=\"item-quantity\">\n                      <div className=\"quantity-controls\">\n                        <Button\n                          size=\"small\"\n                          variant=\"outline\"\n                          onClick={() => updateQuantity(item.id, item.unit_id, item.quantity - 1)}\n                        >\n                          -\n                        </Button>\n                        {editingQuantity === `${item.id}-${item.unit_id}` ? (\n                          <div className=\"quantity-edit\">\n                            <input\n                              type=\"number\"\n                              value={tempQuantity}\n                              onChange={handleQuantityChange}\n                              onKeyPress={(e) => handleQuantityKeyPress(e, item)}\n                              onBlur={() => handleQuantitySubmit(item)}\n                              className=\"quantity-input\"\n                              min=\"0\"\n                              max={item.stock_quantity}\n                              autoFocus\n                            />\n                          </div>\n                        ) : (\n                          <span \n                            className=\"quantity clickable\"\n                            onClick={() => handleQuantityClick(item)}\n                            title=\"Click to edit quantity\"\n                          >\n                            {item.quantity}\n                          </span>\n                        )}\n                        <Button\n                          size=\"small\"\n                          variant=\"outline\"\n                          onClick={() => updateQuantity(item.id, item.unit_id, item.quantity + 1)}\n                          disabled={(() => {\n                            const updatedStockInfo = getUpdatedStockAvailability(item.id);\n                            const unitStockInfo = updatedStockInfo?.find(u => u.id === item.unit_id);\n                            const currentCartQuantity = cart\n                              .filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id)\n                              .reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n                            const maxAllowed = (unitStockInfo?.available_quantity || 0) + currentCartQuantity;\n                            return item.quantity >= maxAllowed;\n                          })()}\n                        >\n                          +\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"item-total\">\n                      ${(item.quantity * item.unit_price).toFixed(2)}\n                    </div>\n                    <div className=\"item-actions\">\n                      <Button\n                        size=\"small\"\n                        variant=\"danger\"\n                        onClick={() => removeFromCart(item.id, item.unit_id)}\n                        title=\"Remove item\"\n                      >\n                        ×\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </>\n            )}\n          </div>\n\n          {cart.length > 0 && (\n            <>\n              <div className=\"cart-summary\">\n                <div className=\"summary-row\">\n                  <span>Total Amount:</span>\n                  <span>${calculateSubtotal().toFixed(2)}</span>\n                </div>\n                <div className=\"summary-row cost-breakdown\">\n                  <span>Cost (excl. tax):</span>\n                  <span>${calculateCost().toFixed(2)}</span>\n                </div>\n                <div className=\"summary-row tax-breakdown\">\n                  <span>Tax included:</span>\n                  <span>${calculateTax().toFixed(2)}</span>\n                </div>\n                <div className=\"summary-row total\">\n                  <span>Total:</span>\n                  <span>${calculateSubtotal().toFixed(2)}</span>\n                </div>\n              </div>\n\n              <div className=\"customer-info\">\n                <h3>Customer Information</h3>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Customer Name (Optional)\"\n                    value={customerInfo.name}\n                    onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"tel\"\n                    placeholder=\"Phone Number (Optional)\"\n                    value={customerInfo.phone}\n                    onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"email\"\n                    placeholder=\"Email (Optional)\"\n                    value={customerInfo.email}\n                    onChange={(e) => setCustomerInfo({...customerInfo, email: e.target.value})}\n                  />\n                </div>\n              </div>\n\n              <div className=\"payment-section\">\n                <h3>Payment Method</h3>\n                <div className=\"payment-methods\">\n                  {['cash', 'card', 'mobile_money', 'bank_transfer'].map(method => (\n                    <label key={method} className=\"payment-method\">\n                      <input\n                        type=\"radio\"\n                        name=\"payment\"\n                        value={method}\n                        checked={paymentMethod === method}\n                        onChange={(e) => setPaymentMethod(e.target.value)}\n                      />\n                      <span>{method.replace('_', ' ').toUpperCase()}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"checkout-actions\">\n                <PrintButton\n                  data={{\n                    sale_number: `TEMP-${Date.now()}`,\n                    customer_name: 'Walk-in Customer',\n                    created_at: new Date().toISOString(),\n                    status: 'pending',\n                    total_amount: calculateSubtotal(),\n                    items: cart.map(item => ({\n                      product_name: item.name,\n                      product_sku: item.sku,\n                      quantity: item.quantity,\n                      unit_name: item.unit?.name || 'piece',\n                      unit_price: item.price,\n                      total_price: item.price * item.quantity\n                    }))\n                  }}\n                  title=\"Sale Receipt\"\n                  type=\"sale\"\n                  printText=\"Print Receipt\"\n                  validateText=\"Complete & Print\"\n                  showValidateOption={true}\n                  onValidate={handleCheckout}\n                  disabled={cart.length === 0}\n                  className=\"print-receipt-btn\"\n                />\n                <Button\n                  onClick={handleCheckout}\n                  loading={processing}\n                  className=\"checkout-button\"\n                  size=\"large\"\n                >\n                  Complete Sale\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PointOfSale;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}