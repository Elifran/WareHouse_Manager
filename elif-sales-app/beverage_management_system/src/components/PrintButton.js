import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import Button from './Button';
import { 
  createThermalPrintDocument, 
  detectPrinterType, 
  mobilePrint, 
  generateMobilePrintContent,
  generateXprinterPrintContent,
  downloadReceiptFile,
  generatePDFContent,
  generateESCPOSForReceiptApp,
  isMobileDevice,
  openPrintWindow,
  openPrintPreview
} from '../utils/printUtils';
import './PrintButton.css';

// Helper functions for generating print content optimized for 80mm thermal printers
const generateInventoryContent = (data, t) => {
  let products = data;
  if (!Array.isArray(data)) {
    if (data.results && Array.isArray(data.results)) {
      products = data.results;
    } else if (data.data && Array.isArray(data.data)) {
      products = data.data;
    } else if (data.items && Array.isArray(data.items)) {
      products = data.items;
    } else {
      const numberedKeys = Object.keys(data).filter(key => /^\d+$/.test(key));
      if (numberedKeys.length > 0) {
        products = numberedKeys.map(key => data[key]).filter(item => item && typeof item === 'object');
      } else {
        products = [];
      }
    }
  }

  return `
    <div class="receipt-header">
      <div class="company-name">${t('company.name', '______ANTATSIMO______')}</div>
      <div class="document-title">${t('titles.inventory_summary', 'INVENTORY SUMMARY')}</div>
      <div class="receipt-date">${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">SUMMARY</div>
      <div class="receipt-row">
        <span>Total Products:</span>
        <span>${Array.isArray(products) ? products.length : 0}</span>
      </div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">PRODUCTS</div>
      ${Array.isArray(products) ? products.slice(0, 20).map(item => `
        <div class="product-item">
          <div class="product-name">${(item.name || 'N/A').substring(0, 20)}</div>
          <div class="product-details">
            <span>SKU: ${(item.sku || 'N/A').substring(0, 8)}</span>
            <span>Qty: ${item.stock_quantity || 0}</span>
            <span>${parseFloat(item.price || 0).toFixed(2)} MGA</span>
          </div>
        </div>
      `).join('') : '<div class="no-data">No products found</div>'}
      ${Array.isArray(products) && products.length > 20 ? `
        <div class="truncated-warning">... and ${products.length - 20} more products</div>
      ` : ''}
    </div>
    
    <div class="receipt-footer">
      <div class="footer-text">${t('footer.generated_by', 'Generated by ______ANTATSIMO______ System')}</div>
    </div>
  `;
};

const generatePurchaseOrderContent = (data, t) => {
  return `
    <div class="receipt-header">
      <div class="company-name">${t('company.name', '______ANTATSIMO______')}</div>
      <div class="document-title">PURCHASE ORDER</div>
      <div class="receipt-date">${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">ORDER INFO</div>
      <div class="receipt-row">
        <span>Order No:</span>
        <span>${data.order_number || 'N/A'}</span>
      </div>
      <div class="receipt-row">
        <span>Supplier:</span>
        <span>${(data.supplier?.name || 'N/A').substring(0, 25)}</span>
      </div>
      <div class="receipt-row">
        <span>Date:</span>
        <span>${data.order_date ? new Date(data.order_date).toLocaleDateString() : 'N/A'}</span>
      </div>
      <div class="receipt-row">
        <span>Status:</span>
        <span>${data.status || 'N/A'}</span>
      </div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">ITEMS</div>
      ${data.items ? data.items.map(item => `
        <div class="order-item">
          <div class="item-name">${(item.product?.name || 'N/A').substring(0, 25)}</div>
          <div class="item-details">
            <span>${item.quantity_ordered || 0} x ${parseFloat(item.unit_cost || 0).toFixed(2)}</span>
            <span>${parseFloat((item.quantity_ordered || 0) * (item.unit_cost || 0)).toFixed(2)} MGA</span>
          </div>
        </div>
      `).join('') : '<div class="no-data">No items found</div>'}
    </div>
    
    <div class="receipt-total">
      <div class="total-row">
        <span>TOTAL AMOUNT:</span>
        <span>${parseFloat(data.total_amount || 0).toFixed(2)} MGA</span>
      </div>
    </div>
    
    <div class="receipt-footer">
      <div class="footer-text">End of Purchase Order</div>
    </div>
  `;
};

const generateDeliveryContent = (data, t) => {
  return `
    <div class="receipt-header">
      <div class="company-name">${t('company.name', '______ANTATSIMO______')}</div>
      <div class="document-title">DELIVERY RECEIPT</div>
      <div class="receipt-date">${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">DELIVERY INFO</div>
      <div class="receipt-row">
        <span>Delivery No:</span>
        <span>${data.delivery_number || 'N/A'}</span>
      </div>
      <div class="receipt-row">
        <span>PO Number:</span>
        <span>${data.purchase_order?.order_number || 'N/A'}</span>
      </div>
      <div class="receipt-row">
        <span>Date:</span>
        <span>${data.delivery_date ? new Date(data.delivery_date).toLocaleDateString() : 'N/A'}</span>
      </div>
      <div class="receipt-row">
        <span>Status:</span>
        <span>${data.status || 'N/A'}</span>
      </div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">ITEMS RECEIVED</div>
      ${data.items ? data.items.map(item => `
        <div class="delivery-item">
          <div class="item-name">${(item.product_name || item.product?.name || 'N/A').substring(0, 25)}</div>
          <div class="item-details">
            <span>${item.quantity_received || item.delivered_quantity || 0} x ${parseFloat(item.unit_cost || 0).toFixed(2)}</span>
            <span>${parseFloat((item.quantity_received || item.delivered_quantity || 0) * (item.unit_cost || 0)).toFixed(2)} MGA</span>
          </div>
        </div>
      `).join('') : '<div class="no-data">No items found</div>'}
    </div>
    
    <div class="receipt-total">
      <div class="total-row">
        <span>TOTAL AMOUNT:</span>
        <span>${parseFloat(data.total_amount || 0).toFixed(2)} MGA</span>
      </div>
    </div>
    
    <div class="receipt-footer">
      <div class="footer-text">Delivery completed</div>
    </div>
  `;
};

// const generateSaleContent = (data, t) => {
//   let items = data.items;
//   if (!items) {
//     const numberedKeys = Object.keys(data).filter(key => /^\d+$/.test(key));
//     if (numberedKeys.length > 0) {
//       items = numberedKeys.map(key => data[key]).filter(item => item && typeof item === 'object');
//     }
//   }

//   const paymentStatusText = data.payment_status === 'paid' ? t('payment_status.paid', 'PAID') : 
//                           data.payment_status === 'partial' ? t('payment_status.partial_payment', 'PARTIAL') : 
//                           data.payment_status === 'pending' ? t('payment_status.pending_payment', 'PENDING') : 
//                           t('payment_status.unknown', 'UNKNOWN');

//   return `
//     <div class="receipt-header">
//       <div class="company-name">${t('company.name', '______ANTATSIMO______')}</div>
//       <div class="document-title">SALE RECEIPT</div>
//       <div class="receipt-date">${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>
//     </div>
    
//     <div class="receipt-section">
//       <div class="section-title">SALE INFO</div>
//       <div class="receipt-row">
//         <span>Sale No:</span>
//         <span>${data.sale_number || 'N/A'}</span>
//       </div>
//       <div class="receipt-row">
//         <span>Customer:</span>
//         <span>${(data.customer_name || t('customer.walk_in', 'Walk-in Customer')).substring(0, 25)}</span>
//       </div>
//       ${data.customer_phone ? `
//         <div class="receipt-row">
//           <span>Phone:</span>
//           <span>${data.customer_phone}</span>
//         </div>
//       ` : ''}
//       <div class="receipt-row">
//         <span>Status:</span>
//         <span>${paymentStatusText}</span>
//       </div>
//     </div>
    
//     <div class="receipt-section">
//       <div class="section-title">ITEMS SOLD</div>
//       ${items && Array.isArray(items) ? items.slice(0, 20).map(item => `
//         <div class="sale-item">
//           <div class="item-name">${(item.product_name || 'N/A').substring(0, 25)}</div>
//           <div class="item-details">
//             <span>${item.quantity_display || item.quantity || 0} x ${parseFloat(item.unit_price || 0).toFixed(2)}</span>
//             <span>${parseFloat(item.total_price || 0).toFixed(2)} MGA</span>
//           </div>
//         </div>
//       `).join('') : '<div class="no-data">No items found</div>'}
//     </div>
    
//     <div class="receipt-totals">
//       <div class="total-row">
//         <span>Subtotal:</span>
//         <span>${parseFloat(data.total_amount || 0).toFixed(2)} MGA</span>
//       </div>
//       <div class="total-row">
//         <span>Paid:</span>
//         <span>${parseFloat(data.paid_amount || 0).toFixed(2)} MGA</span>
//       </div>
//       ${data.payment_status === 'partial' ? `
//         <div class="total-row due-amount">
//           <span>Due:</span>
//           <span>${parseFloat(data.remaining_amount || 0).toFixed(2)} MGA</span>
//         </div>
//       ` : ''}
//     </div>
    
//     <div class="receipt-footer">
//       <div class="thank-you">${t('receipt.thank_you', 'Thank you for your business!')}</div>
//       <div class="footer-text">${data.sale_number || ''}</div>
//     </div>
//   `;
// };
const generateSaleContent = (data, t) => {
  let items = data.items;
  if (!items) {
    const numberedKeys = Object.keys(data).filter(key => /^\d+$/.test(key));
    if (numberedKeys.length > 0) {
      items = numberedKeys.map(key => data[key]).filter(item => item && typeof item === 'object');
    }
  }

  const paymentStatusText = data.payment_status === 'paid' ? 'PAID' : 
                          data.payment_status === 'partial' ? 'PARTIAL' : 
                          data.payment_status === 'pending' ? 'PENDING' : 
                          'UNKNOWN';

  return `
    <div class="receipt-header">
        <div class="company-name" style="text-align: center;">________ANTATSIMO_______</div>
        <div class="company-name" style="text-align: center;">${'\u00A0'}</div>
        <div class="document-title" style="text-align: center;">SALE RECEIPT</div>
        <div class="receipt-date" style="text-align: center;">${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>
      </div>
      <div class="receipt-section">
        <div class="no-data">${'\u00A0'}</div>
        <div class="section-title">SALE INFO</div>
        <div class="receipt-row">
          <span>Sale No:</span>
          <span>${data.sale_number || 'N/A'}</span>
        </div>
        <div class="receipt-row">
          <span>Sale Status:</span>
          <span>${data.status || 'N/A'}</span>
        </div>
        <div class="receipt-row">
          <span>Customer:</span>
          <span>${(data.customer_name || 'Walk-in Customer').substring(0, 25)}</span>
        </div>
        ${data.customer_phone ? `
          <div class="receipt-row">
            <span>Phone:</span>
            <span>${data.customer_phone}</span>
          </div>
        ` : ''}
        <div class="receipt-row">
          <span>Peyment Status:</span>
          <span>${paymentStatusText}</span>
        </div>

        <div class="no-data">${'\u00A0'}</div>
        <div class="no-data">==================================================</div>

      </div>
      <div class="receipt-section">
        <div class="section-title">ITEMS SOLD</div>             
        <div class="item-details">
          <span>Info</span>
          <span>
            Qte${'\u00A0'.repeat(16)}Total${'\u00A0'.repeat(2)}
          </span>
        </div>
        ${items && Array.isArray(items) ? items.slice(0, 20).map(item => `
          <div class="sale-item">
            <div class="item-name">${(item.product_name || 'N/A').substring(0, 25)} </div>
            <div class="item-details">
              <span>
                ${`(${item.unit_name})${parseFloat(item.unit_price || 0).toFixed(2)}`.padEnd(22, '\u00A0')}
                ${(item.quantity_display || item.quantity || 0).toString().padEnd(5, '\u00A0')}
                ${parseFloat(item.total_price || 0).toFixed(2).padStart(14, '\u00A0')} MGA
              </span>
            </div>
          </div>
        `).join('') : '<div class="no-data">No items found</div>'}

        <div class="no-data">__________________________________________________</div>
        <div class="no-data">==================================================</</div>

      </div>        
      <div class="receipt-totals">
        <div class="receipt-row">
          <span>Subtotal:</span>
          <span>${parseFloat(data.total_amount || 0).toFixed(2)} MGA</span>
        </div>
        <div class="receipt-row">
          <span>Paid:</span>
          <span>${parseFloat(data.paid_amount || 0).toFixed(2)} MGA</span>
        </div>
        ${data.payment_status === 'partial' ? `
          <div class="receipt-row">
            <span>Due:</span>
            <span>${parseFloat(data.remaining_amount || 0).toFixed(2)} MGA</span>
          </div>
        ` : ''}
        <div class="no-data">__________________________________________________</div>
        <div class="no-data">==================================================</</div>
        <div class="no-data">${'\u00A0'}</div>
      </div>
      <div class="receipt-footer">
        <div class="thank-you">Thank you!</div>
        <div class="footer-text" style="text-align: center;">${data.sale_number || ''}</div>
        <div class="footer-text" style="text-align: center;">Created by : 'N/A'}</div>
        <div class="footer-text" style="text-align: center;">Print id : ${data.print_id || 'N/A'}</div>
      </div>
  `;
};

const generateSalesHistoryContent = (data, t) => {
  let sales = data;
  if (!Array.isArray(data)) {
    if (data.results && Array.isArray(data.results)) {
      sales = data.results;
    } else if (data.data && Array.isArray(data.data)) {
      sales = data.data;
    } else if (data.items && Array.isArray(data.items)) {
      sales = data.items;
    } else {
      const numberedKeys = Object.keys(data).filter(key => /^\d+$/.test(key));
      if (numberedKeys.length > 0) {
        sales = numberedKeys.map(key => data[key]).filter(item => item && typeof item === 'object');
      } else {
        sales = [];
      }
    }
  }

  const totalRevenue = Array.isArray(sales) ? sales.reduce((sum, sale) => sum + parseFloat(sale.total_amount || 0), 0) : 0;

  return `
    <div class="receipt-header">
      <div class="company-name">${t('company.name', '______ANTATSIMO______')}</div>
      <div class="document-title">SALES REPORT</div>
      <div class="receipt-date">${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">SUMMARY</div>
      <div class="receipt-row">
        <span>Total Sales:</span>
        <span>${Array.isArray(sales) ? sales.length : 0}</span>
      </div>
      <div class="receipt-row">
        <span>Total Revenue:</span>
        <span>${totalRevenue.toFixed(2)} MGA</span>
      </div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">RECENT SALES</div>
      ${Array.isArray(sales) ? sales.slice(0, 10).map(sale => `
        <div class="sale-summary">
          <div class="sale-info">
            <span>${sale.sale_number || 'N/A'}</span>
            <span>${parseFloat(sale.total_amount || 0).toFixed(2)} MGA</span>
          </div>
          <div class="sale-details">
            <span>${(sale.customer_name || t('customer.walk_in', 'Walk-in')).substring(0, 15)}</span>
            <span>${sale.created_at ? new Date(sale.created_at).toLocaleDateString() : 'N/A'}</span>
          </div>
        </div>
      `).join('') : '<div class="no-data">No sales data</div>'}
      ${Array.isArray(sales) && sales.length > 10 ? `
        <div class="truncated-warning">... and ${sales.length - 10} more sales</div>
      ` : ''}
    </div>
    
    <div class="receipt-footer">
      <div class="footer-text">Sales report generated</div>
    </div>
  `;
};

const generatePackagingValidationContent = (data, t) => {
  return `
    <div class="receipt-header">
      <div class="company-name">${t('company.name', '______ANTATSIMO______')}</div>
      <div class="document-title">PACKAGING VALIDATION</div>
      <div class="receipt-date">${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">VALIDATION INFO</div>
      <div class="receipt-row">
        <span>Sale No:</span>
        <span>${data.sale_number || 'N/A'}</span>
      </div>
      <div class="receipt-row">
        <span>Status:</span>
        <span>${data.status || 'N/A'}</span>
      </div>
      <div class="receipt-row">
        <span>Customer:</span>
        <span>${(data.customer_name || t('customer.walk_in', 'Walk-in Customer')).substring(0, 25)}</span>
      </div>
      ${data.customer_phone ? `
        <div class="receipt-row">
          <span>Phone:</span>
          <span>${data.customer_phone}</span>
        </div>
      ` : ''}
      <div class="receipt-row">
        <span>Total Items:</span>
        <span>${data.packaging_items ? data.packaging_items.length : 0}</span>
      </div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">PACKAGING ITEMS</div>
      ${data.packaging_items && Array.isArray(data.packaging_items) ? data.packaging_items.slice(0, 15).map(item => `
        <div class="packaging-item">
          <div class="item-name">${(item.product_name || 'N/A').substring(0, 25)}</div>
          <div class="item-details">
            <span>${item.quantity || 0} x ${parseFloat(item.unit_price || 0).toFixed(2)}</span>
            <span>${parseFloat(item.total_price || 0).toFixed(2)} MGA</span>
            <span class="status-${item.status}">${item.status === 'consignation' ? 'PAID' : 
                   item.status === 'exchange' ? 'EXCH' : 
                   item.status === 'due' ? 'DUE' : item.status}</span>
          </div>
        </div>
      `).join('') : '<div class="no-data">No packaging items</div>'}
    </div>
    
    <div class="receipt-total">
      <div class="total-row">
        <span>PACKAGING TOTAL:</span>
        <span>${parseFloat(data.packaging_total || 0).toFixed(2)} MGA</span>
      </div>
    </div>
    
    <div class="receipt-footer">
      <div class="footer-text">Packaging validation completed</div>
    </div>
  `;
};

const generateDefaultContent = (data, t) => {
  return `
    <div class="receipt-header">
      <div class="company-name">${t('company.name', '______ANTATSIMO______')}</div>
      <div class="document-title">DOCUMENT</div>
      <div class="receipt-date">${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>
    </div>
    
    <div class="receipt-section">
      <div class="section-title">CONTENT</div>
      <div class="default-content">
        Document generated successfully
      </div>
    </div>
    
    <div class="receipt-footer">
      <div class="footer-text">Document printed</div>
    </div>
  `;
};

// Export the generatePrintContent function
export const generatePrintContent = (data, title, type, t) => {
  const currentDate = new Date().toLocaleDateString();
  const currentTime = new Date().toLocaleTimeString();
  
  let content = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>${title}</title>
      <meta charset="UTF-8">
      <style>
        /* 80mm Thermal Printer Receipt Styles */
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        
        body {
          font-family: 'Courier New', Courier, monospace;
          font-size: 12px;
          line-height: 1.2;
          color: #000;
          width: 80mm;
          max-width: 80mm;
          margin: 0 auto;
          padding: 3mm;
          background: white;
        }
        
        .receipt-header {
          text-align: center;
          margin-bottom: 8px;
          padding-bottom: 6px;
          border-bottom: 1px dashed #000;
        }
        
        .company-name {
          font-weight: bold;
          font-size: 14px;
          margin-bottom: 2px;
          text-transform: uppercase;
        }
        
        .document-title {
          font-weight: bold;
          font-size: 13px;
          margin-bottom: 3px;
          text-transform: uppercase;
        }
        
        .receipt-date {
          font-size: 11px;
          color: #555;
        }
        
        .receipt-section {
          margin-bottom: 8px;
          padding-bottom: 6px;
          border-bottom: 1px dotted #ccc;
        }
        
        .section-title {
          font-weight: bold;
          font-size: 11px;
          margin-bottom: 4px;
          text-transform: uppercase;
          background: #f0f0f0;
          padding: 2px 4px;
        }
        
        .receipt-row {
          display: flex;
          justify-content: space-between;
          margin-bottom: 3px;
          font-size: 11px;
        }
        
        .product-item,
        .order-item,
        .delivery-item,
        .sale-item,
        .packaging-item,
        .sale-summary {
          margin-bottom: 4px;
          padding: 2px 0;
        }
        
        .product-name,
        .item-name {
          font-weight: bold;
          margin-bottom: 1px;
          word-wrap: break-word;
        }
        
        .product-details,
        .item-details,
        .sale-info {
          display: flex;
          justify-content: space-between;
          font-size: 10px;
          color: #555;
        }
        
        .receipt-totals,
        .receipt-total {
          margin: 8px 0;
          padding-top: 6px;
          border-top: 2px solid #000;
        }
        
        .total-row {
          display: flex;
          justify-content: space-between;
          margin-bottom: 3px;
          font-weight: bold;
        }
        
        .due-amount {
          color: #d00;
        }
        
        .no-data {
          text-align: center;
          color: #888;
          font-style: italic;
          padding: 8px 0;
        }
        
        .truncated-warning {
          text-align: center;
          color: #888;
          font-size: 10px;
          font-style: italic;
          margin-top: 4px;
        }
        
        .thank-you {
          text-align: center;
          font-weight: bold;
          margin: 6px 0;
        }
        
        .receipt-footer {
          text-align: center;
          margin-top: 10px;
          padding-top: 6px;
          border-top: 1px dashed #000;
          font-size: 10px;
          color: #666;
        }
        
        .footer-text {
          margin-bottom: 2px;
        }
        
        .status-consignation { color: #090; }
        .status-exchange { color: #009; }
        .status-due { color: #d00; font-weight: bold; }
        
        /* Print-specific styles */
        @media print {
          body {
            margin: 0;
            padding: 2mm;
            width: 80mm;
          }
          
          .no-print {
            display: none;
          }
          
          /* Ensure proper sizing for thermal paper */
          @page {
            size: 80mm auto;
            margin: 0;
          }
        }
        
        /* Force monospace and proper breaking */
        * {
          font-family: 'Courier New', Courier, monospace !important;
        }
        
        .default-content {
          text-align: center;
          padding: 10px 0;
          color: #666;
        }
      </style>
    </head>
    <body>
  `;

  // Add type-specific content
  switch (type) {
    case 'inventory':
      content += generateInventoryContent(data, t);
      break;
    case 'purchase_order':
      content += generatePurchaseOrderContent(data, t);
      break;
    case 'delivery':
      content += generateDeliveryContent(data, t);
      break;
    case 'sale':
      content += generateSaleContent(data, t);
      break;
    case 'sales_history':
      content += generateSalesHistoryContent(data, t);
      break;
    case 'packaging_validation':
      content += generatePackagingValidationContent(data, t);
      break;
    default:
      content += generateDefaultContent(data, t);
  }

  content += `
    </body>
    </html>
  `;

  return content;
};

const PrintButton = ({ 
  data, 
  title, 
  type = 'default', 
  onValidate = null, 
  validateText = 'Validate & Print',
  printText = 'Print',
  className = '',
  disabled = false,
  showValidateOption = false
}) => {
  const { t } = useTranslation();
  const [isPrinting, setIsPrinting] = useState(false);
  const [showPrintOptions, setShowPrintOptions] = useState(false);

  const handlePrint = async (validateFirst = false, useThermalPrinter = false, useReceiptApp = false, usePreview = false) => {
    // Validate data structure
    if (!data) {
      console.error('No data provided to PrintButton');
      window.alert(t('print.no_data', 'No data available to print.'));
      return;
    }

    if (validateFirst && onValidate) {
      try {
        await onValidate();
      } catch (error) {
        console.error('Validation failed:', error);
        return;
      }
    }

    setIsPrinting(true);
    
    try {
      let printContent;
      const isMobile = isMobileDevice();
      
      // Handle receipt app integration
      if (useReceiptApp) {
        console.log('Attempting to download receipt file...', { data, title });
        const success = downloadReceiptFile(data, title);
        console.log('Download result:', success);
        if (success) {
          window.alert(t('print.pdf_downloaded', 'Receipt PDF downloaded! You can now open it with any PDF viewer or receipt printer app to print directly to your Xprinter.'));
          return;
        } else {
          throw new Error('Failed to download receipt file.');
        }
      }
      
      // Generate appropriate content based on device and printer type
      if (useThermalPrinter || isMobile) {
        // Use Xprinter-optimized content for better compatibility
        printContent = generateXprinterPrintContent(data, title, type, t);
      } else {
        printContent = generatePrintContent(data, title, type, t);
      }
      
      // Handle print preview
      if (usePreview) {
        const previewSuccess = openPrintPreview(printContent, title);
        if (previewSuccess) {
          return;
        } else {
          throw new Error('Failed to open print preview window.');
        }
      }
      
      // Use mobile-friendly printing for mobile devices
      if (isMobile) {
        const success = await mobilePrint(printContent, title);
        if (!success) {
          // If mobile printing fails, offer receipt app option
          const useReceiptApp = window.confirm(t('print.mobile_failed_offer_app', 'Mobile printing failed. Would you like to download a file for receipt printer apps instead?'));
          if (useReceiptApp) {
            const downloadSuccess = downloadReceiptFile(data, title);
            if (downloadSuccess) {
              window.alert(t('print.pdf_downloaded', 'Receipt PDF downloaded! You can now open it with any PDF viewer or receipt printer app to print directly to your Xprinter.'));
              return;
            }
          }
          throw new Error('Mobile printing failed. Please try again or check your printer connection.');
        }
      } else {
        // Desktop printing with enhanced error handling
        // Try print preview first for better visibility
        const previewSuccess = openPrintPreview(printContent, title);
        if (previewSuccess) {
          // Preview opened successfully, user can print from there
          return;
        } else {
          // Fallback to direct print window
          const success = await openPrintWindow(printContent, title);
          if (!success) {
            throw new Error('Failed to open print window. Please check popup blockers and try again.');
          }
        }
      }
      
    } catch (error) {
      console.error('Print error:', error);
      
      // Provide more specific error messages
      let errorMessage = t('print.failed', 'Failed to print. Please try again.');
      
      if (error.message.includes('popup')) {
        errorMessage = t('print.popup_blocked', 'Popup blocked. Please allow popups for this site and try again.');
      } else if (error.message.includes('Mobile printing failed')) {
        errorMessage = t('print.mobile_failed', 'Mobile printing failed. Please check your printer connection and try again.');
      } else if (error.message.includes('window.open')) {
        errorMessage = t('print.window_failed', 'Could not open print window. Please check your browser settings.');
      } else if (error.message.includes('Failed to download')) {
        errorMessage = t('print.download_failed', 'Failed to download receipt file. Please try again.');
      }
      
      window.alert(errorMessage);
    } finally {
      setIsPrinting(false);
      setShowPrintOptions(false);
    }
  };

  if (showValidateOption && onValidate) {
    return (
      <div className={`print-button-container ${className}`}>
        <Button
          variant="outline"
          size="small"
          onClick={() => setShowPrintOptions(!showPrintOptions)}
          disabled={disabled}
        >
          {showPrintOptions ? t('button.hide_options', 'Hide Options') : t('button.show_options', 'Show Options')}
        </Button>
        {showPrintOptions && (
          <div className="print-options">
            <Button
              variant="primary"
              size="small"
              onClick={() => handlePrint(true)}
              disabled={disabled || isPrinting}
            >
              {isPrinting ? t('button.processing', 'Processing...') : validateText}
            </Button>
            <Button
              variant="outline"
              size="small"
              onClick={() => handlePrint(false)}
              disabled={disabled || isPrinting}
            >
              {isPrinting ? t('button.preparing', 'Preparing...') : printText}
            </Button>
            <Button
              variant="secondary"
              size="small"
              onClick={() => handlePrint(false, true)}
              disabled={disabled || isPrinting}
            >
              {isPrinting ? t('button.preparing', 'Preparing...') : t('button.print_thermal', 'Print (Thermal)')}
            </Button>
          </div>
        )}
      </div>
    );
  }

  // Show different options for mobile vs desktop
  const isMobile = isMobileDevice();
  
  if (isMobile) {
    return (
      <div className={`print-button-container ${className}`}>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
          <Button
            variant="primary"
            size="small"
            onClick={() => handlePrint(false, true)}
            disabled={disabled || isPrinting}
          >
            {isPrinting ? t('button.printing', 'Printing...') : t('button.print_receipt', 'Print Receipt')}
          </Button>
          
          <Button
            variant="secondary"
            size="small"
            onClick={() => handlePrint(false, false, true)}
            disabled={disabled || isPrinting}
          >
            {isPrinting ? t('button.downloading', 'Downloading...') : t('button.download_pdf', 'Download PDF')}
          </Button>
          
          <Button
            variant="outline"
            size="small"
            onClick={() => handlePrint(false, false, false, true)}
            disabled={disabled || isPrinting}
          >
            {isPrinting ? t('button.loading', 'Loading...') : t('button.preview', 'Print Preview')}
          </Button>
          
          {showValidateOption && onValidate && (
            <Button
              variant="outline"
              size="small"
              onClick={() => handlePrint(true, true)}
              disabled={disabled || isPrinting}
            >
              {isPrinting ? t('button.processing', 'Processing...') : validateText}
            </Button>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className={`print-button-container ${className}`}>
      <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
        <Button
          variant="outline"
          size="small"
          onClick={() => handlePrint(false, true)}
          disabled={disabled || isPrinting}
        >
          {isPrinting ? t('button.printing', 'Printing...') : printText}
        </Button>
        
        <Button
          variant="secondary"
          size="small"
          onClick={() => handlePrint(false, false, true)}
          disabled={disabled || isPrinting}
        >
          {isPrinting ? t('button.downloading', 'Downloading...') : t('button.download_pdf', 'Download PDF')}
        </Button>
        
        <Button
          variant="outline"
          size="small"
          onClick={() => handlePrint(false, false, false, true)}
          disabled={disabled || isPrinting}
        >
          {isPrinting ? t('button.loading', 'Loading...') : t('button.preview', 'Print Preview')}
        </Button>
      </div>
    </div>
  );
};

export default PrintButton;