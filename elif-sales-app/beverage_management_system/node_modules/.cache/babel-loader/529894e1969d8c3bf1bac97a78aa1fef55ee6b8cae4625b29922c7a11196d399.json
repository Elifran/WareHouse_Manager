{"ast":null,"code":"var _jsxFileName = \"/home/el-ifran/WareHouse_Manager/elif-sales-app/beverage_management_system/src/pages/PointOfSale.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAuth } from '../contexts/AuthContext';\nimport api from '../services/api';\nimport Button from '../components/Button';\nimport { generatePrintContent } from '../components/PrintButton';\nimport './PointOfSale.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PointOfSale = () => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const {\n    user\n  } = useAuth();\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [customerInfo, setCustomerInfo] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [paymentMethod, setPaymentMethod] = useState('cash');\n  const [paymentType, setPaymentType] = useState('full'); // 'full' or 'partial'\n  const [paidAmount, setPaidAmount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [stockAvailability, setStockAvailability] = useState({});\n  const [categoriesLoaded, setCategoriesLoaded] = useState(false);\n  const [categoryUpdating, setCategoryUpdating] = useState(false);\n  const [filters, setFilters] = useState({\n    category: '',\n    search: ''\n  });\n  const [searchInput, setSearchInput] = useState(''); // Separate state for search input\n  const [editingQuantity, setEditingQuantity] = useState(null);\n  const [tempQuantity, setTempQuantity] = useState('');\n  const [selectedUnits, setSelectedUnits] = useState({}); // Track selected unit for each product\n  const searchInputRef = useRef(null); // Ref for search input\n  const filtersRef = useRef(filters); // Ref to store current filters\n  const searchTimeoutRef = useRef(null); // Ref for search timeout\n  const categoriesRef = useRef(categories); // Ref to store current categories\n  const categoriesLoadedRef = useRef(categoriesLoaded); // Ref to store categories loaded state\n\n  // Update refs whenever state changes\n  useEffect(() => {\n    filtersRef.current = filters;\n  }, [filters]);\n  useEffect(() => {\n    categoriesRef.current = categories;\n  }, [categories]);\n  useEffect(() => {\n    categoriesLoadedRef.current = categoriesLoaded;\n  }, [categoriesLoaded]);\n\n  // Function to sync session storage with categories state\n  const syncSessionStorage = useCallback(() => {\n    const sellableStatus = {};\n    categories.forEach(cat => {\n      sellableStatus[cat.id] = cat.is_sellable;\n    });\n    sessionStorage.setItem('sellableCategories', JSON.stringify(sellableStatus));\n  }, [categories]);\n\n  // Sync session storage whenever categories change\n  useEffect(() => {\n    if (categories.length > 0) {\n      syncSessionStorage();\n    }\n  }, [categories, syncSessionStorage]);\n\n  // Handle case where filters are cleared but categories aren't loaded yet\n  useEffect(() => {\n    if (categoriesLoadedRef.current && categoriesRef.current.length > 0 && filtersRef.current.category === '' && filtersRef.current.search === '') {\n      fetchProducts(filtersRef.current);\n    }\n  }, [categoriesLoaded, categories.length, filters]);\n  const [showSellableToggle, setShowSellableToggle] = useState(false); // Show/hide sellable toggle\n  const [priceMode, setPriceMode] = useState('standard'); // 'standard' or 'wholesale'\n  const [saleMode, setSaleMode] = useState('complete'); // 'complete' or 'pending'\n  const [printReceipt, setPrintReceipt] = useState(true); // true or false\n\n  // Function to get the current price based on price mode\n  const getCurrentPrice = product => {\n    if (priceMode === 'wholesale' && product.wholesale_price) {\n      return parseFloat(product.wholesale_price);\n    }\n    return parseFloat(product.price);\n  };\n\n  // Calculate total amount\n  const calculateTotal = () => {\n    const total = cart.reduce((total, item) => {\n      const unitPrice = item.unit_price || 0;\n      return total + unitPrice * item.quantity;\n    }, 0);\n    return total;\n  };\n\n  // Update paid amount when payment type changes\n  useEffect(() => {\n    const total = calculateTotal();\n    if (paymentType === 'full') {\n      setPaidAmount(total);\n    } else if (paymentType === 'partial') {\n      // Only reset to 0 if it's currently set to the full amount\n      if (paidAmount === total) {\n        setPaidAmount(0);\n      }\n    }\n  }, [paymentType, cart]);\n\n  // Function to get the current price for a specific unit\n  const getCurrentUnitPrice = (product, unitStockInfo) => {\n    if (!(unitStockInfo !== null && unitStockInfo !== void 0 && unitStockInfo.price)) return 0;\n\n    // If we're in standard mode, return the standard unit price\n    if (priceMode === 'standard') {\n      return unitStockInfo.price;\n    }\n\n    // If we're in wholesale mode, we need to calculate the wholesale price for this unit\n    if (priceMode === 'wholesale' && product.wholesale_price) {\n      const standardBasePrice = parseFloat(product.price);\n      const wholesaleBasePrice = parseFloat(product.wholesale_price);\n\n      // Handle edge cases\n      if (!standardBasePrice || standardBasePrice <= 0) {\n        return unitStockInfo.price;\n      }\n\n      // Calculate the conversion factor from standard to wholesale\n      const wholesaleConversionFactor = wholesaleBasePrice / standardBasePrice;\n\n      // For wholesale pricing, we need to apply the wholesale conversion factor\n      // to the base unit price, then convert to the selected unit\n      let wholesaleUnitPrice;\n      if (unitStockInfo.is_base_unit) {\n        // If this is the base unit, apply wholesale factor directly\n        wholesaleUnitPrice = standardBasePrice * wholesaleConversionFactor;\n      } else {\n        // If this is not the base unit, we need to:\n        // 1. Get the wholesale base price\n        // 2. Convert it to the selected unit using the same conversion factor as the standard price\n        const standardUnitPrice = unitStockInfo.price;\n        const unitConversionFactor = standardUnitPrice / standardBasePrice;\n        wholesaleUnitPrice = wholesaleBasePrice * unitConversionFactor;\n      }\n\n      // Round to 2 decimal places to avoid floating point precision issues\n      const roundedPrice = Math.round(wholesaleUnitPrice * 100) / 100;\n\n      // Ensure we return a valid number\n      return isNaN(roundedPrice) || roundedPrice < 0 ? unitStockInfo.price : roundedPrice;\n    }\n\n    // Fallback to standard price\n    return unitStockInfo.price;\n  };\n  useEffect(() => {\n    const initializeData = async () => {\n      await fetchCategories();\n      // Don't fetch products here - let the categories useEffect handle it\n    };\n    initializeData();\n  }, []);\n\n  // Re-filter products when categories are loaded (to apply sellable filtering)\n  useEffect(() => {\n    if (categoriesLoaded && categories.length > 0) {\n      fetchProducts(filters); // Re-fetch with current filters to apply sellable filtering\n    }\n  }, [categoriesLoaded]); // Only depend on categoriesLoaded flag\n\n  // Debounced search effect - optimized to prevent focus loss\n  useEffect(() => {\n    // Clear existing timeout\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    // Only set timeout if searchInput is not empty or if it was cleared\n    if (searchInput !== '') {\n      searchTimeoutRef.current = setTimeout(() => {\n        const newFilters = {\n          ...filtersRef.current,\n          search: searchInput\n        };\n        setFilters(newFilters);\n        fetchProducts(newFilters);\n      }, 500);\n    } else if (filtersRef.current.search !== '') {\n      // If search input is cleared, immediately update filters\n      const newFilters = {\n        ...filtersRef.current,\n        search: ''\n      };\n      setFilters(newFilters);\n      fetchProducts(newFilters);\n    }\n\n    // Cleanup function\n    return () => {\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n    };\n  }, [searchInput]); // Only depend on searchInput to prevent re-renders\n\n  useEffect(() => {\n    // Fetch stock availability for ALL products in bulk to improve performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n\n    // Set default selected units (default unit first, then base unit) for products with multiple compatible units\n    const defaultUnits = {};\n    products.forEach(product => {\n      if (product.compatible_units && product.compatible_units.length > 1) {\n        // First try to find the default unit (is_default: true)\n        let selectedUnit = product.compatible_units.find(u => u.is_default);\n\n        // If no default unit, fall back to base unit (is_base_unit: true)\n        if (!selectedUnit) {\n          selectedUnit = product.compatible_units.find(u => u.unit.is_base_unit);\n        }\n\n        // If still no unit found, use the first one\n        if (!selectedUnit) {\n          selectedUnit = product.compatible_units[0];\n        }\n        if (selectedUnit) {\n          var _selectedUnit$unit;\n          defaultUnits[product.id] = ((_selectedUnit$unit = selectedUnit.unit) === null || _selectedUnit$unit === void 0 ? void 0 : _selectedUnit$unit.id) || selectedUnit.unit;\n        }\n      }\n    });\n    setSelectedUnits(defaultUnits);\n  }, [products]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchBulkStockAvailability = async () => {\n    try {\n      const productIds = products.map(product => product.id);\n      const response = await api.post('/api/products/bulk-stock-availability/', {\n        product_ids: productIds\n      });\n\n      // Convert the response to the format expected by the existing code\n      const stockData = {};\n      Object.values(response.data).forEach(productStock => {\n        stockData[productStock.product_id] = productStock.available_units;\n      });\n      setStockAvailability(stockData);\n    } catch (err) {\n      // Fallback to individual calls if bulk fails\n      products.forEach(product => {\n        fetchStockAvailability(product.id);\n      });\n    }\n  };\n  const refreshStockAvailability = () => {\n    // Use bulk fetch for better performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n  };\n  const getUpdatedStockAvailability = productId => {\n    // Get the base stock availability for this product\n    const baseStockInfo = stockAvailability[productId];\n    if (!baseStockInfo) {\n      return null;\n    }\n\n    // Calculate total pieces already in cart for this product (convert all units to pieces)\n    const totalPiecesInCart = cart.filter(item => item.id === productId).reduce((total, item) => {\n      // Find the unit info to get conversion factor\n      const unitInfo = baseStockInfo.find(u => u.id === item.unit_id);\n      if (unitInfo && unitInfo.conversion_factor) {\n        // Convert to pieces: if 1 carton = 20 pieces, then quantity * 20\n        return total + item.quantity * unitInfo.conversion_factor;\n      } else if (unitInfo && unitInfo.is_base_unit) {\n        // If it's the base unit (pieces), no conversion needed\n        return total + item.quantity;\n      }\n      return total;\n    }, 0);\n\n    // Calculate remaining pieces in base stock\n    const baseUnit = baseStockInfo.find(u => u.is_base_unit);\n    const totalBaseStock = baseUnit ? baseUnit.available_quantity : 0;\n    const remainingPieces = Math.max(0, totalBaseStock - totalPiecesInCart);\n\n    // Update each unit's available quantity based on remaining pieces\n    return baseStockInfo.map(unit => {\n      let availableQuantity = 0;\n      let isAvailable = false;\n      if (unit.is_base_unit) {\n        // For base unit (pieces), use remaining pieces directly\n        availableQuantity = remainingPieces;\n        isAvailable = remainingPieces > 0;\n      } else if (unit.conversion_factor) {\n        // For other units, calculate how many can be made from remaining pieces\n        // If 1 carton = 20 pieces, then remainingPieces / 20 = available cartons\n        availableQuantity = Math.floor(remainingPieces / unit.conversion_factor);\n        isAvailable = availableQuantity > 0;\n      }\n      return {\n        ...unit,\n        available_quantity: availableQuantity,\n        is_available: isAvailable\n      };\n    });\n  };\n  const fetchProducts = useCallback(async (filterParams = {}) => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n\n      // Always filter for active products\n      params.append('is_active', 'true');\n\n      // Add filters to params\n      if (filterParams.category) params.append('category', filterParams.category);\n      if (filterParams.search) params.append('search', filterParams.search);\n      const url = `/api/products/${params.toString() ? '?' + params.toString() : ''}`;\n      const response = await api.get(url);\n      const allProducts = response.data.results || response.data;\n\n      // If categories are not loaded yet, show all products but log a warning\n      if (categoriesRef.current.length === 0 || !categoriesLoadedRef.current) {\n        setProducts(allProducts);\n        return;\n      }\n\n      // ALWAYS filter out products from non-sellable categories\n      const sellableProducts = allProducts.filter(product => {\n        let isSellable = false;\n\n        // If product has category_name, find the category in our categories list\n        if (product.category_name) {\n          const category = categoriesRef.current.find(cat => cat.name === product.category_name);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If product has category ID, find the category in our categories list\n        else if (product.category && typeof product.category === 'number') {\n          const category = categoriesRef.current.find(cat => cat.id === product.category);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If product has category object with ID, find the category in our categories list\n        else if (product.category && product.category.id) {\n          const category = categoriesRef.current.find(cat => cat.id === product.category.id);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If no category information, exclude the product (safer approach)\n        else {\n          isSellable = false;\n        }\n        return isSellable;\n      });\n\n      // Additional check: if a specific category is selected, ensure it's sellable\n      if (filterParams.category) {\n        const selectedCategory = categoriesRef.current.find(cat => cat.id === parseInt(filterParams.category));\n        if (selectedCategory && !selectedCategory.is_sellable) {\n          // If selected category is not sellable, return empty array\n          setProducts([]);\n          return;\n        }\n      }\n      setProducts(sellableProducts);\n    } catch (err) {\n      setError('Failed to load products');\n    } finally {\n      setLoading(false);\n    }\n  }, []); // No dependencies to avoid circular references\n\n  const fetchCategories = useCallback(async () => {\n    try {\n      const response = await api.get('/api/products/categories/');\n      let categoriesData = response.data.results || response.data;\n\n      // Load session-based sellable status from sessionStorage\n      const sellableStatus = JSON.parse(sessionStorage.getItem('sellableCategories') || '{}');\n\n      // Apply session-based sellable status\n      categoriesData = categoriesData.map(cat => {\n        const isSellable = sellableStatus.hasOwnProperty(cat.id) ? sellableStatus[cat.id] : cat.is_sellable;\n        return {\n          ...cat,\n          is_sellable: isSellable\n        };\n      });\n      setCategories(categoriesData);\n      setCategoriesLoaded(true);\n    } catch (err) {\n      console.error('Error fetching categories:', err);\n    }\n  }, []); // No dependencies needed for fetchCategories\n\n  const toggleCategorySellable = useCallback(async (categoryId, currentStatus) => {\n    try {\n      setCategoryUpdating(true);\n      const newStatus = !currentStatus;\n\n      // Update session storage\n      const sellableStatus = JSON.parse(sessionStorage.getItem('sellableCategories') || '{}');\n      sellableStatus[categoryId] = newStatus;\n      sessionStorage.setItem('sellableCategories', JSON.stringify(sellableStatus));\n\n      // Update categories state immediately for UI feedback\n      setCategories(prevCategories => prevCategories.map(cat => cat.id === categoryId ? {\n        ...cat,\n        is_sellable: newStatus\n      } : cat));\n\n      // Immediately refetch products to apply the new filter\n      fetchProducts(filters); // Don't await - let it run in background for immediate UI response\n\n      // Reset updating state after a short delay\n      setTimeout(() => setCategoryUpdating(false), 500);\n    } catch (err) {\n      setError('Failed to update category status');\n      console.error('Category toggle error:', err);\n      setCategoryUpdating(false);\n    }\n  }, [categories]); // Only depend on categories\n\n  const resetAllCategoriesToSellable = useCallback(async () => {\n    try {\n      setCategoryUpdating(true);\n\n      // Create a sellable status object with all categories set to true\n      const allSellableStatus = {};\n      categoriesRef.current.forEach(cat => {\n        allSellableStatus[cat.id] = true;\n      });\n\n      // Save to session storage\n      sessionStorage.setItem('sellableCategories', JSON.stringify(allSellableStatus));\n\n      // Update categories state immediately\n      setCategories(prevCategories => prevCategories.map(cat => ({\n        ...cat,\n        is_sellable: true\n      })));\n\n      // Immediately refetch products to apply the new filter\n      fetchProducts(filters); // Don't await - let it run in background for immediate UI response\n\n      setSuccess('All categories have been set to sellable');\n\n      // Reset updating state after a short delay\n      setTimeout(() => setCategoryUpdating(false), 500);\n    } catch (err) {\n      setError('Failed to reset categories');\n      console.error('Category reset error:', err);\n      setCategoryUpdating(false);\n    }\n  }, [categories]); // Only depend on categories\n\n  const fetchStockAvailability = async productId => {\n    try {\n      const response = await api.get(`/api/products/${productId}/stock-availability/`);\n      setStockAvailability(prev => ({\n        ...prev,\n        [productId]: response.data.available_units\n      }));\n    } catch (err) {}\n  };\n  const addToCart = (product, selectedUnit = null) => {\n    // Use the first compatible unit if none selected\n    let unit = selectedUnit;\n    if (!unit && product.compatible_units && product.compatible_units[0]) {\n      var _compatibleUnit$unit, _compatibleUnit$unit2, _compatibleUnit$unit3;\n      const compatibleUnit = product.compatible_units[0];\n      unit = {\n        id: ((_compatibleUnit$unit = compatibleUnit.unit) === null || _compatibleUnit$unit === void 0 ? void 0 : _compatibleUnit$unit.id) || compatibleUnit.unit,\n        name: compatibleUnit.unit_name || ((_compatibleUnit$unit2 = compatibleUnit.unit) === null || _compatibleUnit$unit2 === void 0 ? void 0 : _compatibleUnit$unit2.name) || 'Piece',\n        symbol: compatibleUnit.unit_symbol || ((_compatibleUnit$unit3 = compatibleUnit.unit) === null || _compatibleUnit$unit3 === void 0 ? void 0 : _compatibleUnit$unit3.symbol) || 'piece'\n      };\n    }\n    if (!unit) {\n      var _product$base_unit;\n      unit = {\n        id: ((_product$base_unit = product.base_unit) === null || _product$base_unit === void 0 ? void 0 : _product$base_unit.id) || product.base_unit,\n        name: 'Piece',\n        symbol: 'piece'\n      };\n    }\n\n    // Skip stock validation for pending sales since stock won't be removed until completion\n    if (saleMode === 'complete') {\n      // Check if stock availability data is loaded\n      if (!stockAvailability[product.id]) {\n        setError('Loading stock information... Please try again.');\n        return;\n      }\n\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unit.id);\n      if (!unitStockInfo) {\n        setError(`Unit ${unit.name} not found in stock information`);\n        return;\n      }\n      if (!unitStockInfo.is_available) {\n        setError(`${unit.name} is out of stock`);\n        return;\n      }\n\n      // Check if there's enough stock for the selected unit\n      if (unitStockInfo.available_quantity <= 0) {\n        setError(`No ${unit.name} stock left`);\n        return;\n      }\n    }\n    const existingItem = cart.find(item => item.id === product.id && item.unit_id === unit.id && item.price_mode === priceMode);\n    if (existingItem) {\n      // Check if adding 1 more would exceed available quantity (only for complete sales)\n      if (saleMode === 'complete') {\n        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n        const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unit.id);\n        if (unitStockInfo && existingItem.quantity + 1 > unitStockInfo.available_quantity) {\n          setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n          return;\n        }\n      }\n      setCart(cart.map(item => item.id === product.id && item.unit_id === unit.id && item.price_mode === priceMode ? {\n        ...item,\n        quantity: item.quantity + 1\n      } : item));\n    } else {\n      // Check if adding 1 would exceed available quantity (only for complete sales)\n      if (saleMode === 'complete') {\n        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n        const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unit.id);\n        if (unitStockInfo && 1 > unitStockInfo.available_quantity) {\n          setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n          return;\n        }\n      }\n      // Get unit stock info for price calculation\n      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unit.id);\n      const newCartItem = {\n        ...product,\n        quantity: 1,\n        unit_id: unit.id,\n        unit_name: unit.name,\n        unit_symbol: unit.symbol,\n        unit_price: getCurrentUnitPrice(product, unitStockInfo) || getCurrentPrice(product),\n        price_mode: priceMode\n      };\n      setCart([...cart, newCartItem]);\n    }\n    setError('');\n  };\n  const updateQuantity = (productId, unitId, quantity, priceMode = null) => {\n    if (quantity <= 0) {\n      setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)));\n    } else {\n      // Skip stock validation for pending sales since stock won't be removed until completion\n      if (saleMode === 'complete') {\n        // Check updated stock availability for the selected unit\n        const updatedStockInfo = getUpdatedStockAvailability(productId);\n        const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === unitId);\n        if (!unitStockInfo || !unitStockInfo.is_available) {\n          setError(`Unit is out of stock`);\n          return;\n        }\n\n        // For updateQuantity, we need to consider the current cart quantity\n        const currentCartQuantity = cart.filter(item => item.id === productId && item.unit_id === unitId && item.price_mode === priceMode).reduce((sum, item) => sum + item.quantity, 0);\n\n        // Calculate how much we can add (available + what's already in cart)\n        const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n        if (quantity > maxAllowed) {\n          setError(`Not enough stock available. Max: ${maxAllowed}`);\n          return;\n        }\n      }\n      setCart(cart.map(item => item.id === productId && item.unit_id === unitId && item.price_mode === priceMode ? {\n        ...item,\n        quantity\n      } : item));\n      setError('');\n    }\n  };\n  const removeFromCart = (productId, unitId, priceMode = null) => {\n    setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)));\n  };\n  const calculateSubtotal = () => {\n    return cart.reduce((total, item) => total + item.quantity * item.unit_price, 0);\n  };\n  const calculateTax = () => {\n    let totalTax = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: tax = (price × tax_rate) / (100 + tax_rate)\n        const itemTax = item.quantity * item.unit_price * item.tax_rate / (100 + item.tax_rate);\n        totalTax += itemTax;\n      }\n    });\n    return totalTax;\n  };\n  const calculateCost = () => {\n    let totalCost = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: cost = (price × 100) / (100 + tax_rate)\n        const itemCost = item.quantity * item.unit_price * 100 / (100 + item.tax_rate);\n        totalCost += itemCost;\n      } else {\n        // No tax, full price is cost\n        totalCost += item.quantity * item.unit_price;\n      }\n    });\n    return totalCost;\n  };\n  const autoPrintReceipt = async (saleNumber, saleData, saleStatus = 'completed') => {\n    try {\n      // Create print content for the sale\n      const total = calculateSubtotal();\n      const remaining = total - paidAmount;\n      const printData = {\n        sale_number: saleNumber,\n        customer_name: customerInfo.name || 'Walk-in Customer',\n        customer_phone: customerInfo.phone || '',\n        customer_email: customerInfo.email || '',\n        user_name: (user === null || user === void 0 ? void 0 : user.username) || 'Unknown User',\n        user_id: (user === null || user === void 0 ? void 0 : user.id) || 'unknown',\n        created_at: new Date().toISOString(),\n        print_timestamp: new Date().toISOString(),\n        print_id: `PRINT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        status: saleStatus,\n        total_amount: total,\n        paid_amount: paidAmount,\n        remaining_amount: remaining,\n        payment_status: remaining > 0 ? 'partial' : 'paid',\n        due_date: remaining > 0 ? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString() : null,\n        // 30 days from now\n        items: cart.map(item => {\n          var _item$unit;\n          return {\n            product_name: item.name,\n            product_sku: item.sku,\n            quantity: item.quantity,\n            unit_name: item.unit_name || ((_item$unit = item.unit) === null || _item$unit === void 0 ? void 0 : _item$unit.name) || 'piece',\n            unit_price: item.unit_price,\n            total_price: item.unit_price * item.quantity\n          };\n        })\n      };\n\n      // Generate print content using the same logic as PrintButton\n      const printContent = generatePrintContent(printData, 'Sale Receipt', 'sale', t);\n\n      // Open print window\n      const printWindow = window.open('', '_blank', 'width=800,height=600');\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n\n      // Wait for content to load then print\n      const printAfterLoad = () => {\n        printWindow.focus();\n        printWindow.print();\n        // Close the window after a short delay\n        setTimeout(() => {\n          printWindow.close();\n        }, 1000);\n      };\n\n      // Check if window is already loaded\n      if (printWindow.document.readyState === 'complete') {\n        printAfterLoad();\n      } else {\n        printWindow.onload = printAfterLoad;\n      }\n    } catch (error) {\n      // Don't show error to user as it's not critical\n    }\n  };\n  const handleCheckout = async () => {\n    if (cart.length === 0) {\n      setError(t('pos.cart_empty'));\n      return;\n    }\n    setProcessing(true);\n    setError('');\n\n    // Validate customer name for partial payments\n    if (paymentType === 'partial' && (!customerInfo.name || !customerInfo.name.trim())) {\n      setError('Customer name is required for partial payments');\n      setProcessing(false);\n      return;\n    }\n\n    // Validate paid amount\n    const total = calculateTotal();\n    if (paidAmount > total) {\n      setError('Paid amount cannot exceed the total amount');\n      setProcessing(false);\n      return;\n    }\n    if (paidAmount < 0) {\n      setError('Paid amount cannot be negative');\n      setProcessing(false);\n      return;\n    }\n    try {\n      const saleData = {\n        sale_type: 'sale',\n        customer_name: customerInfo.name,\n        customer_phone: customerInfo.phone,\n        customer_email: customerInfo.email,\n        payment_method: paymentMethod,\n        paid_amount: paidAmount,\n        items: cart.map(item => {\n          // More robust unit ID extraction\n          let unitId = item.unit_id;\n          if (typeof unitId === 'object' && unitId !== null) {\n            unitId = unitId.id || unitId;\n          }\n          return {\n            product: item.id,\n            quantity: parseFloat(item.quantity),\n            unit: parseInt(unitId),\n            unit_price: parseFloat(item.unit_price),\n            price_mode: item.price_mode || 'standard'\n          };\n        })\n      };\n\n      // Create the sale\n      const response = await api.post('/api/sales/', saleData);\n      const saleId = response.data.id;\n      const saleNumber = response.data.sale_number;\n      if (saleMode === 'complete') {\n        // Complete the sale immediately\n        try {\n          await api.post(`/api/sales/${saleId}/complete/`);\n\n          // Auto-print the receipt after successful sale completion (only if printReceipt is true)\n          if (printReceipt) {\n            await autoPrintReceipt(saleNumber, response.data, 'completed');\n          }\n\n          // Clear cart and customer info\n          setCart([]);\n          setCustomerInfo({\n            name: '',\n            phone: '',\n            email: ''\n          });\n\n          // Reset price mode to standard after sale\n          setPriceMode('standard');\n\n          // Wait a moment for the backend to process stock movements\n          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\n\n          // Refresh product data to update stock quantities\n          await fetchProducts();\n\n          // Wait another moment for stock availability to be updated\n          await new Promise(resolve => setTimeout(resolve, 500)); // Wait 0.5 seconds\n\n          // Refresh stock availability for all products\n          refreshStockAvailability();\n          alert(`Sale completed successfully! Sale Number: ${saleNumber}`);\n        } catch (completeError) {\n          var _completeError$respon, _completeError$respon2;\n          // Sale was created but completion failed\n          setError(`Sale created (${saleNumber}) but completion failed: ${((_completeError$respon = completeError.response) === null || _completeError$respon === void 0 ? void 0 : (_completeError$respon2 = _completeError$respon.data) === null || _completeError$respon2 === void 0 ? void 0 : _completeError$respon2.error) || completeError.message}`);\n\n          // Still clear the cart since the sale was created\n          setCart([]);\n          setCustomerInfo({\n            name: '',\n            phone: '',\n            email: ''\n          });\n\n          // Wait for backend to process any completed stock movements\n          await new Promise(resolve => setTimeout(resolve, 1000));\n\n          // Refresh data\n          await fetchProducts();\n          await new Promise(resolve => setTimeout(resolve, 500));\n          refreshStockAvailability();\n        }\n      } else {\n        // Create pending sale (don't complete it)\n\n        // Print receipt for pending sale if requested\n        if (printReceipt) {\n          await autoPrintReceipt(saleNumber, response.data, 'pending');\n        }\n\n        // Clear cart and customer info\n        setCart([]);\n        setCustomerInfo({\n          name: '',\n          phone: '',\n          email: ''\n        });\n\n        // Reset price mode to standard after sale\n        setPriceMode('standard');\n        alert(t('messages.pending_sale_created', {\n          saleNumber\n        }));\n      }\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2, _err$response2$data, _err$response3, _err$response3$data, _err$response4, _err$response4$data;\n      // Handle different types of errors\n      if ((_err$response = err.response) !== null && _err$response !== void 0 && (_err$response$data = _err$response.data) !== null && _err$response$data !== void 0 && _err$response$data.error) {\n        setError(err.response.data.error);\n      } else if ((_err$response2 = err.response) !== null && _err$response2 !== void 0 && (_err$response2$data = _err$response2.data) !== null && _err$response2$data !== void 0 && _err$response2$data.detail) {\n        setError(err.response.data.detail);\n      } else if ((_err$response3 = err.response) !== null && _err$response3 !== void 0 && (_err$response3$data = _err$response3.data) !== null && _err$response3$data !== void 0 && _err$response3$data.customer_name) {\n        setError(err.response.data.customer_name[0]);\n      } else if ((_err$response4 = err.response) !== null && _err$response4 !== void 0 && (_err$response4$data = _err$response4.data) !== null && _err$response4$data !== void 0 && _err$response4$data.paid_amount) {\n        setError(err.response.data.paid_amount[0]);\n      } else {\n        setError('Failed to create sale. Please check the console for details.');\n      }\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const clearCart = () => {\n    setCart([]);\n    setError('');\n  };\n  const handleFilterChange = useCallback((filterType, value) => {\n    if (filterType === 'search') {\n      // For search, update the input state immediately (no API call)\n      setSearchInput(value);\n    } else {\n      // For other filters (like category), update immediately\n      const newFilters = {\n        ...filtersRef.current,\n        [filterType]: value\n      };\n      setFilters(newFilters);\n      fetchProducts(newFilters);\n    }\n  }, []); // No dependencies needed since we use ref\n\n  const clearFilters = useCallback(() => {\n    const clearedFilters = {\n      category: '',\n      search: ''\n    };\n    setFilters(clearedFilters);\n    setSearchInput(''); // Clear the search input state\n\n    // Only fetch products if categories are loaded\n    if (categoriesLoadedRef.current && categoriesRef.current.length > 0) {\n      fetchProducts(clearedFilters);\n    }\n  }, [categoriesLoaded, categories.length]);\n  const handleQuantityClick = item => {\n    setEditingQuantity(`${item.id}-${item.unit_id}`);\n    setTempQuantity(item.quantity.toString());\n  };\n  const handleQuantityChange = e => {\n    const value = e.target.value;\n    // Only allow numbers and empty string\n    if (value === '' || /^\\d+$/.test(value)) {\n      setTempQuantity(value);\n    }\n  };\n  const handleQuantitySubmit = item => {\n    const newQuantity = parseFloat(tempQuantity);\n    if (tempQuantity === '' || isNaN(newQuantity) || newQuantity < 0) {\n      setError('Please enter a valid quantity');\n      setEditingQuantity(null);\n      return;\n    }\n\n    // Skip stock validation for pending sales since stock won't be removed until completion\n    if (saleMode === 'complete') {\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(item.id);\n      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === item.unit_id);\n      if (!unitStockInfo || !unitStockInfo.is_available) {\n        setError(`Unit is out of stock`);\n        setEditingQuantity(null);\n        return;\n      }\n\n      // For handleQuantitySubmit, we need to consider the current cart quantity\n      const currentCartQuantity = cart.filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id && cartItem.price_mode === item.price_mode).reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n\n      // Calculate how much we can add (available + what's already in cart)\n      const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n      if (newQuantity > maxAllowed) {\n        setError(`Not enough stock available. Max: ${maxAllowed}`);\n        setEditingQuantity(null);\n        return;\n      }\n    }\n    if (newQuantity === 0) {\n      // Remove item from cart if quantity is 0\n      removeFromCart(item.id, item.unit_id, item.price_mode);\n    } else {\n      updateQuantity(item.id, item.unit_id, newQuantity, item.price_mode);\n    }\n    setEditingQuantity(null);\n    setTempQuantity('');\n    setError('');\n  };\n  const handleQuantityCancel = () => {\n    setEditingQuantity(null);\n    setTempQuantity('');\n  };\n  const handleQuantityKeyPress = (e, item) => {\n    if (e.key === 'Enter') {\n      handleQuantitySubmit(item);\n    } else if (e.key === 'Escape') {\n      handleQuantityCancel();\n    }\n  };\n  const handleUnitSelection = (productId, unitId) => {\n    setSelectedUnits(prev => ({\n      ...prev,\n      [productId]: unitId\n    }));\n  };\n  const handleProductCardClick = product => {\n    // Don't allow clicking on out-of-stock products (only for complete sales)\n    if (saleMode === 'complete' && product.stock_quantity <= 0) {\n      return;\n    }\n    if (product.compatible_units && product.compatible_units.length > 1) {\n      // For multi-unit products, add with the currently selected unit\n      const selectedUnitId = selectedUnits[product.id];\n      if (selectedUnitId) {\n        const selectedCompatibleUnit = product.compatible_units.find(u => {\n          var _u$unit;\n          return (((_u$unit = u.unit) === null || _u$unit === void 0 ? void 0 : _u$unit.id) || u.unit) === selectedUnitId;\n        });\n        if (selectedCompatibleUnit) {\n          var _selectedCompatibleUn2;\n          // Get the price for this unit from stock availability\n          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n          const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => {\n            var _selectedCompatibleUn;\n            return u.id === (((_selectedCompatibleUn = selectedCompatibleUnit.unit) === null || _selectedCompatibleUn === void 0 ? void 0 : _selectedCompatibleUn.id) || selectedCompatibleUnit.unit);\n          });\n          const unitPrice = getCurrentUnitPrice(product, unitStockInfo) || getCurrentPrice(product);\n\n          // Convert compatible unit to the format expected by addToCart\n          const selectedUnit = {\n            id: ((_selectedCompatibleUn2 = selectedCompatibleUnit.unit) === null || _selectedCompatibleUn2 === void 0 ? void 0 : _selectedCompatibleUn2.id) || selectedCompatibleUnit.unit,\n            name: selectedCompatibleUnit.unit_name,\n            symbol: selectedCompatibleUnit.unit_symbol,\n            price: unitPrice\n          };\n          addToCart(product, selectedUnit);\n        }\n      }\n    } else {\n      // For single-unit products, add directly\n      addToCart(product);\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pos\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pos-loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Loading products...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1012,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pos\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pos-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: t('titles.point_of_sale')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pos-user\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Cashier: \", user === null || user === void 0 ? void 0 : user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1023,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1022,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1020,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pos-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pos-products\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Products\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1030,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"pos-filters\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Category:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1035,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: filters.category,\n              onChange: e => handleFilterChange('category', e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"All Categories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1040,\n                columnNumber: 17\n              }, this), categories.filter(cat => cat.is_sellable).map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: category.id,\n                children: category.name\n              }, category.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1042,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1036,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline\",\n              size: \"small\",\n              onClick: () => setShowSellableToggle(!showSellableToggle),\n              style: {\n                marginTop: '0.5rem'\n              },\n              children: [showSellableToggle ? 'Hide' : 'Manage', \" Categories\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1047,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1034,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Price Mode:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1058,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"price-mode-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `price-mode-btn ${priceMode === 'standard' ? 'active' : ''}`,\n                onClick: () => setPriceMode('standard'),\n                children: \"Standard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1060,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `price-mode-btn ${priceMode === 'wholesale' ? 'active' : ''}`,\n                onClick: () => setPriceMode('wholesale'),\n                children: \"Wholesale\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1067,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1059,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1057,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Sale Mode:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1078,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sale-mode-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `sale-mode-btn ${saleMode === 'complete' ? 'active' : ''}`,\n                onClick: () => setSaleMode('complete'),\n                title: t('alerts.sale_will_be_completed'),\n                children: \"Complete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1080,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `sale-mode-btn ${saleMode === 'pending' ? 'active' : ''}`,\n                onClick: () => setSaleMode('pending'),\n                title: t('alerts.sale_will_be_created_pending'),\n                children: \"Pending\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1088,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1079,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1077,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group print-receipt-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Print Receipt:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sale-mode-toggle print-receipt-toggle\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `sale-mode-btn print-receipt-btn ${printReceipt ? 'active' : ''}`,\n                onClick: () => setPrintReceipt(true),\n                title: t('alerts.print_receipt_after_sale'),\n                children: \"Yes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1102,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                className: `sale-mode-btn print-receipt-btn ${!printReceipt ? 'active' : ''}`,\n                onClick: () => setPrintReceipt(false),\n                title: t('pos.dont_print_receipt'),\n                children: \"No\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1110,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1099,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Search:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              ref: searchInputRef,\n              type: \"text\",\n              placeholder: t('pos.search_products'),\n              value: searchInput,\n              onChange: e => handleFilterChange('search', e.target.value)\n            }, \"search-input\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 1123,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1121,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-group\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outline\",\n              size: \"small\",\n              onClick: clearFilters,\n              children: \"Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1133,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 11\n        }, this), showSellableToggle && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category-management\",\n          style: {\n            marginBottom: '1rem',\n            padding: '1rem',\n            backgroundColor: '#f9fafb',\n            borderRadius: '0.5rem',\n            border: '1px solid #e5e7eb'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              marginBottom: '1rem'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              style: {\n                margin: '0',\n                fontSize: '1rem',\n                fontWeight: '600'\n              },\n              children: [\"Manage Sellable Categories\", categoryUpdating && /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  marginLeft: '0.5rem',\n                  color: '#3b82f6'\n                },\n                children: \"\\u27F3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1156,\n                columnNumber: 40\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: resetAllCategoriesToSellable,\n              disabled: categoryUpdating,\n              style: {\n                padding: '0.5rem 1rem',\n                fontSize: '0.875rem',\n                borderRadius: '0.375rem',\n                border: '1px solid #3b82f6',\n                cursor: categoryUpdating ? 'not-allowed' : 'pointer',\n                backgroundColor: categoryUpdating ? '#9ca3af' : '#3b82f6',\n                color: 'white',\n                fontWeight: '500',\n                opacity: categoryUpdating ? 0.6 : 1\n              },\n              children: \"Reset All to Sellable\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1158,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1148,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'grid',\n              gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\n              gap: '0.5rem'\n            },\n            children: categories.map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                padding: '0.5rem',\n                backgroundColor: 'white',\n                borderRadius: '0.375rem',\n                border: '1px solid #e5e7eb'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: '0.875rem',\n                  fontWeight: '500'\n                },\n                children: category.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1191,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => toggleCategorySellable(category.id, category.is_sellable),\n                style: {\n                  padding: '0.25rem 0.5rem',\n                  fontSize: '0.75rem',\n                  borderRadius: '0.25rem',\n                  border: '1px solid',\n                  cursor: 'pointer',\n                  backgroundColor: category.is_sellable ? '#dcfce7' : '#fee2e2',\n                  borderColor: category.is_sellable ? '#16a34a' : '#dc2626',\n                  color: category.is_sellable ? '#15803d' : '#dc2626'\n                },\n                children: category.is_sellable ? 'Sellable' : 'Not Sellable'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1194,\n                columnNumber: 21\n              }, this)]\n            }, category.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1182,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1176,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"products-info\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"products-count\",\n            children: [products.length, \" product\", products.length !== 1 ? 's' : '', \" found\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1216,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"products-grid\",\n          children: products.map(product => {\n            var _product$compatible_u2;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `product-card ${product.stock_quantity <= 0 && saleMode === 'complete' ? 'out-of-stock' : ''} clickable`,\n              onClick: () => handleProductCardClick(product),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"product-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: product.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1229,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"product-sku\",\n                  children: product.sku\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1230,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"product-price\",\n                  children: [(_product$compatible_u => {\n                    // Find the actual base unit and get its price\n                    const baseUnit = (_product$compatible_u = product.compatible_units) === null || _product$compatible_u === void 0 ? void 0 : _product$compatible_u.find(u => u.unit.is_base_unit);\n                    if (baseUnit && stockAvailability[product.id]) {\n                      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                      const baseUnitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => {\n                        var _baseUnit$unit;\n                        return u.id === (((_baseUnit$unit = baseUnit.unit) === null || _baseUnit$unit === void 0 ? void 0 : _baseUnit$unit.id) || baseUnit.unit);\n                      });\n                      if (baseUnitStockInfo) {\n                        return getCurrentUnitPrice(product, baseUnitStockInfo).toFixed(2);\n                      }\n                    }\n                    // Fallback to the original price\n                    return getCurrentPrice(product).toFixed(2);\n                  })(), \" MGA\", product.compatible_units && product.compatible_units.length > 1 && ` (base unit: ${((_product$compatible_u2 = product.compatible_units.find(u => u.unit.is_base_unit)) === null || _product$compatible_u2 === void 0 ? void 0 : _product$compatible_u2.unit.symbol) || 'piece'})`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1231,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"product-stock\",\n                  children: [\"Stock: \", product.stock_quantity, \" \", product.unit, stockAvailability[product.id] && product.compatible_units && product.compatible_units.length > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stock-details\",\n                    children: (() => {\n                      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                      return product.compatible_units.map(compatibleUnit => {\n                        var _compatibleUnit$unit5, _compatibleUnit$unit6;\n                        const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => {\n                          var _compatibleUnit$unit4;\n                          return u.id === (((_compatibleUnit$unit4 = compatibleUnit.unit) === null || _compatibleUnit$unit4 === void 0 ? void 0 : _compatibleUnit$unit4.id) || compatibleUnit.unit);\n                        });\n                        if (!unitStockInfo) return null;\n\n                        // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                        const unitName = (unitStockInfo === null || unitStockInfo === void 0 ? void 0 : unitStockInfo.name) || ((_compatibleUnit$unit5 = compatibleUnit.unit) === null || _compatibleUnit$unit5 === void 0 ? void 0 : _compatibleUnit$unit5.name) || compatibleUnit.unit_name;\n                        return /*#__PURE__*/_jsxDEV(\"span\", {\n                          className: `unit-stock ${unitStockInfo.is_available ? 'available' : 'unavailable'}`,\n                          children: [unitName, \": \", getCurrentUnitPrice(product, unitStockInfo).toFixed(2), \" MGA (\", unitStockInfo.available_quantity, \" available)\"]\n                        }, ((_compatibleUnit$unit6 = compatibleUnit.unit) === null || _compatibleUnit$unit6 === void 0 ? void 0 : _compatibleUnit$unit6.id) || compatibleUnit.unit, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1263,\n                          columnNumber: 31\n                        }, this);\n                      }).filter(Boolean);\n                    })()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1252,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1249,\n                  columnNumber: 19\n                }, this), product.compatible_units && product.compatible_units.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"unit-selection\",\n                  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                    children: \"Unit:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1276,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                    className: \"unit-select\",\n                    value: selectedUnits[product.id] || '',\n                    onChange: e => {\n                      const unitId = parseInt(e.target.value);\n                      handleUnitSelection(product.id, unitId);\n                    },\n                    onClick: e => e.stopPropagation(),\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"\",\n                      children: \"Select Unit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1286,\n                      columnNumber: 25\n                    }, this), product.compatible_units.map((compatibleUnit, index) => {\n                      var _compatibleUnit$unit8, _compatibleUnit$unit9, _compatibleUnit$unit0, _compatibleUnit$unit1;\n                      // Use updated stock availability that considers cart contents\n                      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => {\n                        var _compatibleUnit$unit7;\n                        return u.id === (((_compatibleUnit$unit7 = compatibleUnit.unit) === null || _compatibleUnit$unit7 === void 0 ? void 0 : _compatibleUnit$unit7.id) || compatibleUnit.unit);\n                      });\n                      const isAvailable = unitStockInfo ? unitStockInfo.is_available : false;\n                      const availableQty = unitStockInfo ? unitStockInfo.available_quantity : 0;\n\n                      // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                      const unitName = (unitStockInfo === null || unitStockInfo === void 0 ? void 0 : unitStockInfo.name) || ((_compatibleUnit$unit8 = compatibleUnit.unit) === null || _compatibleUnit$unit8 === void 0 ? void 0 : _compatibleUnit$unit8.name) || compatibleUnit.unit_name;\n                      const unitSymbol = (unitStockInfo === null || unitStockInfo === void 0 ? void 0 : unitStockInfo.symbol) || ((_compatibleUnit$unit9 = compatibleUnit.unit) === null || _compatibleUnit$unit9 === void 0 ? void 0 : _compatibleUnit$unit9.symbol) || compatibleUnit.unit_symbol;\n                      return /*#__PURE__*/_jsxDEV(\"option\", {\n                        value: ((_compatibleUnit$unit1 = compatibleUnit.unit) === null || _compatibleUnit$unit1 === void 0 ? void 0 : _compatibleUnit$unit1.id) || compatibleUnit.unit,\n                        disabled: saleMode === 'complete' ? !isAvailable : false,\n                        children: [unitName, \" (\", unitSymbol, \") - \", getCurrentUnitPrice(product, unitStockInfo).toFixed(2), \" MGA\", !isAvailable && saleMode === 'complete' ? ' - OUT OF STOCK' : '']\n                      }, ((_compatibleUnit$unit0 = compatibleUnit.unit) === null || _compatibleUnit$unit0 === void 0 ? void 0 : _compatibleUnit$unit0.id) || compatibleUnit.unit, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1300,\n                        columnNumber: 29\n                      }, this);\n                    })]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1277,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1275,\n                  columnNumber: 21\n                }, this), (!product.compatible_units || product.compatible_units.length <= 1) && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  size: \"small\",\n                  onClick: () => addToCart(product),\n                  disabled: (() => {\n                    // Skip stock validation for pending sales since stock won't be removed until completion\n                    if (saleMode === 'pending') {\n                      return false; // Always allow for pending sales\n                    }\n\n                    // Check if any unit has available stock\n                    if (!stockAvailability[product.id]) {\n                      return true; // Disable if stock data not loaded\n                    }\n\n                    // For single unit products, check base stock\n                    return product.stock_quantity <= 0;\n                  })(),\n                  className: \"add-to-cart-btn\",\n                  children: (() => {\n                    if (!stockAvailability[product.id]) {\n                      return 'Loading...';\n                    }\n\n                    // For pending sales, always show \"Add to Cart\" regardless of stock\n                    if (saleMode === 'pending') {\n                      return 'Add to Cart';\n                    }\n                    return product.stock_quantity <= 0 ? 'Out of Stock' : 'Add to Cart';\n                  })()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1316,\n                  columnNumber: 21\n                }, this), product.available_units && product.available_units.length > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"unit-instruction\",\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: \"Click card or select unit to add to cart\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1354,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1353,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1228,\n                columnNumber: 17\n              }, this)\n            }, product.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1223,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1221,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pos-cart\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Shopping Cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1367,\n            columnNumber: 13\n          }, this), cart.length > 0 && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline\",\n            size: \"small\",\n            onClick: clearCart,\n            children: \"Clear Cart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1369,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1366,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1376,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cart-items\",\n          children: cart.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"empty-cart\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Cart is empty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1384,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"empty-cart-hint\",\n              children: \"Add items from the product list to start a sale\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1385,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1383,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cart-table-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-product\",\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1390,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-unit\",\n                children: \"Unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1391,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-price\",\n                children: \"Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1392,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-quantity\",\n                children: \"Qty\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1393,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-total\",\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1394,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"header-actions\",\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1395,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1389,\n              columnNumber: 17\n            }, this), cart.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cart-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-product\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1400,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"item-sku\",\n                  children: [\"SKU: \", item.sku]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1401,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `price-mode-badge ${item.price_mode}`,\n                  children: item.price_mode === 'wholesale' ? 'WS' : 'STD'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1402,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1399,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-unit\",\n                children: item.unit_symbol || 'piece'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1406,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-price\",\n                children: [parseFloat(item.unit_price).toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1409,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-quantity\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"quantity-controls\",\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    size: \"small\",\n                    variant: \"outline\",\n                    onClick: () => updateQuantity(item.id, item.unit_id, item.quantity - 1, item.price_mode),\n                    children: \"-\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1414,\n                    columnNumber: 25\n                  }, this), editingQuantity === `${item.id}-${item.unit_id}` ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"quantity-edit\",\n                    children: /*#__PURE__*/_jsxDEV(\"input\", {\n                      type: \"number\",\n                      value: tempQuantity,\n                      onChange: handleQuantityChange,\n                      onKeyPress: e => handleQuantityKeyPress(e, item),\n                      onBlur: () => handleQuantitySubmit(item),\n                      className: \"quantity-input\",\n                      min: \"0\",\n                      max: item.stock_quantity,\n                      autoFocus: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1423,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1422,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"quantity clickable\",\n                    onClick: () => handleQuantityClick(item),\n                    title: t('alerts.click_to_edit_quantity'),\n                    children: item.quantity\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1436,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(Button, {\n                    size: \"small\",\n                    variant: \"outline\",\n                    onClick: () => updateQuantity(item.id, item.unit_id, item.quantity + 1, item.price_mode),\n                    disabled: (() => {\n                      // Skip stock validation for pending sales since stock won't be removed until completion\n                      if (saleMode === 'pending') {\n                        return false; // Always allow for pending sales\n                      }\n                      const updatedStockInfo = getUpdatedStockAvailability(item.id);\n                      const unitStockInfo = updatedStockInfo === null || updatedStockInfo === void 0 ? void 0 : updatedStockInfo.find(u => u.id === item.unit_id);\n                      const currentCartQuantity = cart.filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id && cartItem.price_mode === item.price_mode).reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n                      const maxAllowed = ((unitStockInfo === null || unitStockInfo === void 0 ? void 0 : unitStockInfo.available_quantity) || 0) + currentCartQuantity;\n                      return item.quantity >= maxAllowed;\n                    })(),\n                    children: \"+\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1444,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1413,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1412,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-total\",\n                children: [(item.quantity * item.unit_price).toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1467,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"item-actions\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"small\",\n                  variant: \"danger\",\n                  onClick: () => removeFromCart(item.id, item.unit_id, item.price_mode),\n                  title: t('alerts.remove_item'),\n                  children: \"\\xD7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1471,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1470,\n                columnNumber: 21\n              }, this)]\n            }, `${item.id}-${item.unit_id}-${item.price_mode}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1398,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1381,\n          columnNumber: 11\n        }, this), cart.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cart-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-row\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total Amount:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1490,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateSubtotal().toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1491,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1489,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-row cost-breakdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Cost (excl. tax):\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1494,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateCost().toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1495,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1493,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-row tax-breakdown\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Tax included:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1498,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateTax().toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1499,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1497,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"summary-row total\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1502,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: [calculateSubtotal().toFixed(2), \" MGA\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1503,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1501,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1488,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"checkout-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"customer-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Customer Information\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1509,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  placeholder: paymentType === 'partial' ? \"Customer Name (Required for Partial Payment)\" : \"Customer Name (Optional)\",\n                  value: customerInfo.name,\n                  onChange: e => setCustomerInfo({\n                    ...customerInfo,\n                    name: e.target.value\n                  }),\n                  className: paymentType === 'partial' && !customerInfo.name ? 'required-field' : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1511,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1510,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"tel\",\n                  placeholder: \"Phone Number (Optional)\",\n                  value: customerInfo.phone,\n                  onChange: e => setCustomerInfo({\n                    ...customerInfo,\n                    phone: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1520,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1519,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"email\",\n                  placeholder: \"Email (Optional)\",\n                  value: customerInfo.email,\n                  onChange: e => setCustomerInfo({\n                    ...customerInfo,\n                    email: e.target.value\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1528,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1527,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1508,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"payment-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Payment Method\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1538,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"payment-methods\",\n                children: ['cash', 'card', 'mobile_money', 'bank_transfer'].map(method => /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"payment-method\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    name: \"payment\",\n                    value: method,\n                    checked: paymentMethod === method,\n                    onChange: e => setPaymentMethod(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1542,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: method.replace('_', ' ').toUpperCase()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1549,\n                    columnNumber: 23\n                  }, this)]\n                }, method, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1541,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1539,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Payment Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1554,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"payment-types\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"payment-type\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    name: \"paymentType\",\n                    value: \"full\",\n                    checked: paymentType === 'full',\n                    onChange: e => setPaymentType(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1557,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Full Payment (100%)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1564,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1556,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"payment-type\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"radio\",\n                    name: \"paymentType\",\n                    value: \"partial\",\n                    checked: paymentType === 'partial',\n                    onChange: e => setPaymentType(e.target.value)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1567,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: \"Partial Payment (0-99.99%)\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1574,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1566,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1555,\n                columnNumber: 17\n              }, this), paymentType === 'partial' && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"Amount to Pay\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1580,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  step: \"0.01\",\n                  min: \"0\",\n                  max: calculateTotal(),\n                  value: paidAmount || 0,\n                  onChange: e => {\n                    const value = parseFloat(e.target.value) || 0;\n                    setPaidAmount(value);\n                  },\n                  placeholder: t('forms.enter_amount_to_pay')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1581,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [\"Total: $\", calculateTotal().toFixed(2), \" | Remaining: $\", (calculateTotal() - (paidAmount || 0)).toFixed(2)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1593,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 1579,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1537,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1507,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"checkout-actions\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleCheckout,\n              loading: processing,\n              className: \"validate-button\",\n              size: \"large\",\n              variant: \"primary\",\n              disabled: cart.length === 0,\n              children: [saleMode === 'complete' ? t('pos.complete_sale') : t('pos.create_pending_sale'), printReceipt && t('pos.print_receipt')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1600,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1599,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1365,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1019,\n    columnNumber: 5\n  }, this);\n};\n_s(PointOfSale, \"w1AijD2vaRpJPqD5q1nr60931Xg=\", false, function () {\n  return [useTranslation, useAuth];\n});\n_c = PointOfSale;\nexport default PointOfSale;\nvar _c;\n$RefreshReg$(_c, \"PointOfSale\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useTranslation","useAuth","api","Button","generatePrintContent","jsxDEV","_jsxDEV","Fragment","_Fragment","PointOfSale","_s","t","user","products","setProducts","categories","setCategories","cart","setCart","customerInfo","setCustomerInfo","name","phone","email","paymentMethod","setPaymentMethod","paymentType","setPaymentType","paidAmount","setPaidAmount","loading","setLoading","processing","setProcessing","error","setError","success","setSuccess","stockAvailability","setStockAvailability","categoriesLoaded","setCategoriesLoaded","categoryUpdating","setCategoryUpdating","filters","setFilters","category","search","searchInput","setSearchInput","editingQuantity","setEditingQuantity","tempQuantity","setTempQuantity","selectedUnits","setSelectedUnits","searchInputRef","filtersRef","searchTimeoutRef","categoriesRef","categoriesLoadedRef","current","syncSessionStorage","sellableStatus","forEach","cat","id","is_sellable","sessionStorage","setItem","JSON","stringify","length","fetchProducts","showSellableToggle","setShowSellableToggle","priceMode","setPriceMode","saleMode","setSaleMode","printReceipt","setPrintReceipt","getCurrentPrice","product","wholesale_price","parseFloat","price","calculateTotal","total","reduce","item","unitPrice","unit_price","quantity","getCurrentUnitPrice","unitStockInfo","standardBasePrice","wholesaleBasePrice","wholesaleConversionFactor","wholesaleUnitPrice","is_base_unit","standardUnitPrice","unitConversionFactor","roundedPrice","Math","round","isNaN","initializeData","fetchCategories","clearTimeout","setTimeout","newFilters","fetchBulkStockAvailability","defaultUnits","compatible_units","selectedUnit","find","u","is_default","unit","_selectedUnit$unit","productIds","map","response","post","product_ids","stockData","Object","values","data","productStock","product_id","available_units","err","fetchStockAvailability","refreshStockAvailability","getUpdatedStockAvailability","productId","baseStockInfo","totalPiecesInCart","filter","unitInfo","unit_id","conversion_factor","baseUnit","totalBaseStock","available_quantity","remainingPieces","max","availableQuantity","isAvailable","floor","is_available","filterParams","params","URLSearchParams","append","url","toString","get","allProducts","results","sellableProducts","isSellable","category_name","selectedCategory","parseInt","categoriesData","parse","getItem","hasOwnProperty","console","toggleCategorySellable","categoryId","currentStatus","newStatus","prevCategories","resetAllCategoriesToSellable","allSellableStatus","prev","addToCart","_compatibleUnit$unit","_compatibleUnit$unit2","_compatibleUnit$unit3","compatibleUnit","unit_name","symbol","unit_symbol","_product$base_unit","base_unit","updatedStockInfo","existingItem","price_mode","newCartItem","updateQuantity","unitId","currentCartQuantity","sum","maxAllowed","removeFromCart","calculateSubtotal","calculateTax","totalTax","tax_rate","itemTax","calculateCost","totalCost","itemCost","autoPrintReceipt","saleNumber","saleData","saleStatus","remaining","printData","sale_number","customer_name","customer_phone","customer_email","user_name","username","user_id","created_at","Date","toISOString","print_timestamp","print_id","now","random","substr","status","total_amount","paid_amount","remaining_amount","payment_status","due_date","toLocaleDateString","items","_item$unit","product_name","product_sku","sku","total_price","printContent","printWindow","window","open","document","write","close","printAfterLoad","focus","print","readyState","onload","handleCheckout","trim","sale_type","payment_method","saleId","Promise","resolve","alert","completeError","_completeError$respon","_completeError$respon2","message","_err$response","_err$response$data","_err$response2","_err$response2$data","_err$response3","_err$response3$data","_err$response4","_err$response4$data","detail","clearCart","handleFilterChange","filterType","value","clearFilters","clearedFilters","handleQuantityClick","handleQuantityChange","e","target","test","handleQuantitySubmit","newQuantity","cartItem","handleQuantityCancel","handleQuantityKeyPress","key","handleUnitSelection","handleProductCardClick","stock_quantity","selectedUnitId","selectedCompatibleUnit","_u$unit","_selectedCompatibleUn2","_selectedCompatibleUn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","variant","size","onClick","style","marginTop","type","title","ref","placeholder","marginBottom","padding","backgroundColor","borderRadius","border","display","justifyContent","alignItems","margin","fontSize","fontWeight","marginLeft","color","disabled","cursor","opacity","gridTemplateColumns","gap","borderColor","_product$compatible_u2","_product$compatible_u","baseUnitStockInfo","_baseUnit$unit","toFixed","_compatibleUnit$unit5","_compatibleUnit$unit6","_compatibleUnit$unit4","unitName","Boolean","stopPropagation","index","_compatibleUnit$unit8","_compatibleUnit$unit9","_compatibleUnit$unit0","_compatibleUnit$unit1","_compatibleUnit$unit7","availableQty","unitSymbol","onKeyPress","onBlur","min","autoFocus","method","checked","replace","toUpperCase","step","_c","$RefreshReg$"],"sources":["/home/el-ifran/WareHouse_Manager/elif-sales-app/beverage_management_system/src/pages/PointOfSale.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useAuth } from '../contexts/AuthContext';\nimport api from '../services/api';\nimport Button from '../components/Button';\nimport { generatePrintContent } from '../components/PrintButton';\nimport './PointOfSale.css';\n\nconst PointOfSale = () => {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [customerInfo, setCustomerInfo] = useState({\n    name: '',\n    phone: '',\n    email: ''\n  });\n  const [paymentMethod, setPaymentMethod] = useState('cash');\n  const [paymentType, setPaymentType] = useState('full'); // 'full' or 'partial'\n  const [paidAmount, setPaidAmount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [stockAvailability, setStockAvailability] = useState({});\n  const [categoriesLoaded, setCategoriesLoaded] = useState(false);\n  const [categoryUpdating, setCategoryUpdating] = useState(false);\n  const [filters, setFilters] = useState({\n    category: '',\n    search: ''\n  });\n  const [searchInput, setSearchInput] = useState(''); // Separate state for search input\n  const [editingQuantity, setEditingQuantity] = useState(null);\n  const [tempQuantity, setTempQuantity] = useState('');\n  const [selectedUnits, setSelectedUnits] = useState({}); // Track selected unit for each product\n  const searchInputRef = useRef(null); // Ref for search input\n  const filtersRef = useRef(filters); // Ref to store current filters\n  const searchTimeoutRef = useRef(null); // Ref for search timeout\n  const categoriesRef = useRef(categories); // Ref to store current categories\n  const categoriesLoadedRef = useRef(categoriesLoaded); // Ref to store categories loaded state\n\n  // Update refs whenever state changes\n  useEffect(() => {\n    filtersRef.current = filters;\n  }, [filters]);\n\n  useEffect(() => {\n    categoriesRef.current = categories;\n  }, [categories]);\n\n  useEffect(() => {\n    categoriesLoadedRef.current = categoriesLoaded;\n  }, [categoriesLoaded]);\n\n  // Function to sync session storage with categories state\n  const syncSessionStorage = useCallback(() => {\n    const sellableStatus = {};\n    categories.forEach(cat => {\n      sellableStatus[cat.id] = cat.is_sellable;\n    });\n    sessionStorage.setItem('sellableCategories', JSON.stringify(sellableStatus));\n  }, [categories]);\n\n  // Sync session storage whenever categories change\n  useEffect(() => {\n    if (categories.length > 0) {\n      syncSessionStorage();\n    }\n  }, [categories, syncSessionStorage]);\n\n  // Handle case where filters are cleared but categories aren't loaded yet\n  useEffect(() => {\n    if (categoriesLoadedRef.current && categoriesRef.current.length > 0 && filtersRef.current.category === '' && filtersRef.current.search === '') {\n      fetchProducts(filtersRef.current);\n    }\n  }, [categoriesLoaded, categories.length, filters]);\n\n  const [showSellableToggle, setShowSellableToggle] = useState(false); // Show/hide sellable toggle\n  const [priceMode, setPriceMode] = useState('standard'); // 'standard' or 'wholesale'\n  const [saleMode, setSaleMode] = useState('complete'); // 'complete' or 'pending'\n  const [printReceipt, setPrintReceipt] = useState(true); // true or false\n\n  // Function to get the current price based on price mode\n  const getCurrentPrice = (product) => {\n    if (priceMode === 'wholesale' && product.wholesale_price) {\n      return parseFloat(product.wholesale_price);\n    }\n    return parseFloat(product.price);\n  };\n\n  // Calculate total amount\n  const calculateTotal = () => {\n    const total = cart.reduce((total, item) => {\n      const unitPrice = item.unit_price || 0;\n      return total + (unitPrice * item.quantity);\n    }, 0);\n    return total;\n  };\n\n  // Update paid amount when payment type changes\n  useEffect(() => {\n    const total = calculateTotal();\n    if (paymentType === 'full') {\n      setPaidAmount(total);\n    } else if (paymentType === 'partial') {\n      // Only reset to 0 if it's currently set to the full amount\n      if (paidAmount === total) {\n        setPaidAmount(0);\n      }\n    }\n  }, [paymentType, cart]);\n\n  // Function to get the current price for a specific unit\n  const getCurrentUnitPrice = (product, unitStockInfo) => {\n    if (!unitStockInfo?.price) return 0;\n    \n    // If we're in standard mode, return the standard unit price\n    if (priceMode === 'standard') {\n      return unitStockInfo.price;\n    }\n    \n    // If we're in wholesale mode, we need to calculate the wholesale price for this unit\n    if (priceMode === 'wholesale' && product.wholesale_price) {\n      const standardBasePrice = parseFloat(product.price);\n      const wholesaleBasePrice = parseFloat(product.wholesale_price);\n      \n      // Handle edge cases\n      if (!standardBasePrice || standardBasePrice <= 0) {\n        return unitStockInfo.price;\n      }\n      \n      // Calculate the conversion factor from standard to wholesale\n      const wholesaleConversionFactor = wholesaleBasePrice / standardBasePrice;\n      \n      // For wholesale pricing, we need to apply the wholesale conversion factor\n      // to the base unit price, then convert to the selected unit\n      let wholesaleUnitPrice;\n      \n      if (unitStockInfo.is_base_unit) {\n        // If this is the base unit, apply wholesale factor directly\n        wholesaleUnitPrice = standardBasePrice * wholesaleConversionFactor;\n      } else {\n        // If this is not the base unit, we need to:\n        // 1. Get the wholesale base price\n        // 2. Convert it to the selected unit using the same conversion factor as the standard price\n        const standardUnitPrice = unitStockInfo.price;\n        const unitConversionFactor = standardUnitPrice / standardBasePrice;\n        wholesaleUnitPrice = wholesaleBasePrice * unitConversionFactor;\n      }\n      \n      // Round to 2 decimal places to avoid floating point precision issues\n      const roundedPrice = Math.round(wholesaleUnitPrice * 100) / 100;\n      \n      // Ensure we return a valid number\n      return isNaN(roundedPrice) || roundedPrice < 0 ? unitStockInfo.price : roundedPrice;\n    }\n    \n    // Fallback to standard price\n    return unitStockInfo.price;\n  };\n\n  useEffect(() => {\n    const initializeData = async () => {\n      await fetchCategories();\n      // Don't fetch products here - let the categories useEffect handle it\n    };\n    initializeData();\n  }, []);\n\n  // Re-filter products when categories are loaded (to apply sellable filtering)\n  useEffect(() => {\n    if (categoriesLoaded && categories.length > 0) {\n      fetchProducts(filters); // Re-fetch with current filters to apply sellable filtering\n    }\n  }, [categoriesLoaded]); // Only depend on categoriesLoaded flag\n\n  // Debounced search effect - optimized to prevent focus loss\n  useEffect(() => {\n    // Clear existing timeout\n    if (searchTimeoutRef.current) {\n      clearTimeout(searchTimeoutRef.current);\n    }\n\n    // Only set timeout if searchInput is not empty or if it was cleared\n    if (searchInput !== '') {\n      searchTimeoutRef.current = setTimeout(() => {\n        const newFilters = { ...filtersRef.current, search: searchInput };\n        setFilters(newFilters);\n        fetchProducts(newFilters);\n      }, 500);\n    } else if (filtersRef.current.search !== '') {\n      // If search input is cleared, immediately update filters\n      const newFilters = { ...filtersRef.current, search: '' };\n      setFilters(newFilters);\n      fetchProducts(newFilters);\n    }\n\n    // Cleanup function\n    return () => {\n      if (searchTimeoutRef.current) {\n        clearTimeout(searchTimeoutRef.current);\n      }\n    };\n  }, [searchInput]); // Only depend on searchInput to prevent re-renders\n\n  useEffect(() => {\n    // Fetch stock availability for ALL products in bulk to improve performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n    \n    // Set default selected units (default unit first, then base unit) for products with multiple compatible units\n    const defaultUnits = {};\n    products.forEach(product => {\n      if (product.compatible_units && product.compatible_units.length > 1) {\n        \n        // First try to find the default unit (is_default: true)\n        let selectedUnit = product.compatible_units.find(u => u.is_default);\n        \n        // If no default unit, fall back to base unit (is_base_unit: true)\n        if (!selectedUnit) {\n          selectedUnit = product.compatible_units.find(u => u.unit.is_base_unit);\n        }\n        \n        // If still no unit found, use the first one\n        if (!selectedUnit) {\n          selectedUnit = product.compatible_units[0];\n        }\n        \n        if (selectedUnit) {\n          defaultUnits[product.id] = selectedUnit.unit?.id || selectedUnit.unit;\n        }\n      }\n    });\n    setSelectedUnits(defaultUnits);\n  }, [products]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const fetchBulkStockAvailability = async () => {\n    try {\n      const productIds = products.map(product => product.id);\n      const response = await api.post('/api/products/bulk-stock-availability/', {\n        product_ids: productIds\n      });\n      \n      // Convert the response to the format expected by the existing code\n      const stockData = {};\n      Object.values(response.data).forEach(productStock => {\n        stockData[productStock.product_id] = productStock.available_units;\n      });\n      \n      \n      \n      setStockAvailability(stockData);\n    } catch (err) {\n      // Fallback to individual calls if bulk fails\n      products.forEach(product => {\n        fetchStockAvailability(product.id);\n      });\n    }\n  };\n\n  const refreshStockAvailability = () => {\n    // Use bulk fetch for better performance\n    if (products.length > 0) {\n      fetchBulkStockAvailability();\n    }\n  };\n\n\n  const getUpdatedStockAvailability = (productId) => {\n    // Get the base stock availability for this product\n    const baseStockInfo = stockAvailability[productId];\n    if (!baseStockInfo) {\n      return null;\n    }\n\n    // Calculate total pieces already in cart for this product (convert all units to pieces)\n    const totalPiecesInCart = cart\n      .filter(item => item.id === productId)\n      .reduce((total, item) => {\n        // Find the unit info to get conversion factor\n        const unitInfo = baseStockInfo.find(u => u.id === item.unit_id);\n        if (unitInfo && unitInfo.conversion_factor) {\n          // Convert to pieces: if 1 carton = 20 pieces, then quantity * 20\n          return total + (item.quantity * unitInfo.conversion_factor);\n        } else if (unitInfo && unitInfo.is_base_unit) {\n          // If it's the base unit (pieces), no conversion needed\n          return total + item.quantity;\n        }\n        return total;\n      }, 0);\n\n    // Calculate remaining pieces in base stock\n    const baseUnit = baseStockInfo.find(u => u.is_base_unit);\n    const totalBaseStock = baseUnit ? baseUnit.available_quantity : 0;\n    const remainingPieces = Math.max(0, totalBaseStock - totalPiecesInCart);\n\n\n    // Update each unit's available quantity based on remaining pieces\n    return baseStockInfo.map(unit => {\n      let availableQuantity = 0;\n      let isAvailable = false;\n\n      if (unit.is_base_unit) {\n        // For base unit (pieces), use remaining pieces directly\n        availableQuantity = remainingPieces;\n        isAvailable = remainingPieces > 0;\n      } else if (unit.conversion_factor) {\n        // For other units, calculate how many can be made from remaining pieces\n        // If 1 carton = 20 pieces, then remainingPieces / 20 = available cartons\n        availableQuantity = Math.floor(remainingPieces / unit.conversion_factor);\n        isAvailable = availableQuantity > 0;\n      }\n\n      return {\n        ...unit,\n        available_quantity: availableQuantity,\n        is_available: isAvailable\n      };\n    });\n  };\n\n  const fetchProducts = useCallback(async (filterParams = {}) => {\n    try {\n      setLoading(true);\n      const params = new URLSearchParams();\n      \n      // Always filter for active products\n      params.append('is_active', 'true');\n      \n      // Add filters to params\n      if (filterParams.category) params.append('category', filterParams.category);\n      if (filterParams.search) params.append('search', filterParams.search);\n      \n      const url = `/api/products/${params.toString() ? '?' + params.toString() : ''}`;\n      const response = await api.get(url);\n      const allProducts = response.data.results || response.data;\n      \n      // If categories are not loaded yet, show all products but log a warning\n      if (categoriesRef.current.length === 0 || !categoriesLoadedRef.current) {\n        setProducts(allProducts);\n        return;\n      }\n      \n      // ALWAYS filter out products from non-sellable categories\n      const sellableProducts = allProducts.filter(product => {\n        let isSellable = false;\n        \n        // If product has category_name, find the category in our categories list\n        if (product.category_name) {\n          const category = categoriesRef.current.find(cat => cat.name === product.category_name);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If product has category ID, find the category in our categories list\n        else if (product.category && typeof product.category === 'number') {\n          const category = categoriesRef.current.find(cat => cat.id === product.category);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If product has category object with ID, find the category in our categories list\n        else if (product.category && product.category.id) {\n          const category = categoriesRef.current.find(cat => cat.id === product.category.id);\n          isSellable = category ? category.is_sellable : false; // Default to false if category not found (safer)\n        }\n        // If no category information, exclude the product (safer approach)\n        else {\n          isSellable = false;\n        }\n        \n        return isSellable;\n      });\n\n      // Additional check: if a specific category is selected, ensure it's sellable\n      if (filterParams.category) {\n        const selectedCategory = categoriesRef.current.find(cat => cat.id === parseInt(filterParams.category));\n        if (selectedCategory && !selectedCategory.is_sellable) {\n          // If selected category is not sellable, return empty array\n          setProducts([]);\n          return;\n        }\n      }\n      \n      setProducts(sellableProducts);\n    } catch (err) {\n      setError('Failed to load products');\n    } finally {\n      setLoading(false);\n    }\n  }, []); // No dependencies to avoid circular references\n\n  const fetchCategories = useCallback(async () => {\n    try {\n      const response = await api.get('/api/products/categories/');\n      let categoriesData = response.data.results || response.data;\n      \n      // Load session-based sellable status from sessionStorage\n      const sellableStatus = JSON.parse(sessionStorage.getItem('sellableCategories') || '{}');\n      \n      \n      // Apply session-based sellable status\n      categoriesData = categoriesData.map(cat => {\n        const isSellable = sellableStatus.hasOwnProperty(cat.id) ? sellableStatus[cat.id] : cat.is_sellable;\n        return {\n          ...cat,\n          is_sellable: isSellable\n        };\n      });\n      \n      setCategories(categoriesData);\n      setCategoriesLoaded(true);\n    } catch (err) {\n      console.error('Error fetching categories:', err);\n    }\n  }, []); // No dependencies needed for fetchCategories\n\n  const toggleCategorySellable = useCallback(async (categoryId, currentStatus) => {\n    try {\n      setCategoryUpdating(true);\n      const newStatus = !currentStatus;\n      \n      // Update session storage\n      const sellableStatus = JSON.parse(sessionStorage.getItem('sellableCategories') || '{}');\n      sellableStatus[categoryId] = newStatus;\n      sessionStorage.setItem('sellableCategories', JSON.stringify(sellableStatus));\n      \n      // Update categories state immediately for UI feedback\n      setCategories(prevCategories => \n        prevCategories.map(cat => \n          cat.id === categoryId ? { ...cat, is_sellable: newStatus } : cat\n        )\n      );\n      \n      // Immediately refetch products to apply the new filter\n      fetchProducts(filters); // Don't await - let it run in background for immediate UI response\n      \n      // Reset updating state after a short delay\n      setTimeout(() => setCategoryUpdating(false), 500);\n    } catch (err) {\n      setError('Failed to update category status');\n      console.error('Category toggle error:', err);\n      setCategoryUpdating(false);\n    }\n  }, [categories]); // Only depend on categories\n\n  const resetAllCategoriesToSellable = useCallback(async () => {\n    try {\n      setCategoryUpdating(true);\n      \n      // Create a sellable status object with all categories set to true\n      const allSellableStatus = {};\n      categoriesRef.current.forEach(cat => {\n        allSellableStatus[cat.id] = true;\n      });\n      \n      // Save to session storage\n      sessionStorage.setItem('sellableCategories', JSON.stringify(allSellableStatus));\n      \n      // Update categories state immediately\n      setCategories(prevCategories => \n        prevCategories.map(cat => ({ ...cat, is_sellable: true }))\n      );\n      \n      // Immediately refetch products to apply the new filter\n      fetchProducts(filters); // Don't await - let it run in background for immediate UI response\n      \n      setSuccess('All categories have been set to sellable');\n      \n      // Reset updating state after a short delay\n      setTimeout(() => setCategoryUpdating(false), 500);\n    } catch (err) {\n      setError('Failed to reset categories');\n      console.error('Category reset error:', err);\n      setCategoryUpdating(false);\n    }\n  }, [categories]); // Only depend on categories\n\n  const fetchStockAvailability = async (productId) => {\n    try {\n      const response = await api.get(`/api/products/${productId}/stock-availability/`);\n      setStockAvailability(prev => ({\n        ...prev,\n        [productId]: response.data.available_units\n      }));\n    } catch (err) {\n    }\n  };\n\n  const addToCart = (product, selectedUnit = null) => {\n    \n    // Use the first compatible unit if none selected\n    let unit = selectedUnit;\n    if (!unit && product.compatible_units && product.compatible_units[0]) {\n      const compatibleUnit = product.compatible_units[0];\n      unit = {\n        id: compatibleUnit.unit?.id || compatibleUnit.unit,\n        name: compatibleUnit.unit_name || compatibleUnit.unit?.name || 'Piece',\n        symbol: compatibleUnit.unit_symbol || compatibleUnit.unit?.symbol || 'piece'\n      };\n    }\n    if (!unit) {\n      unit = { id: product.base_unit?.id || product.base_unit, name: 'Piece', symbol: 'piece' };\n    }\n    \n    // Skip stock validation for pending sales since stock won't be removed until completion\n    if (saleMode === 'complete') {\n      // Check if stock availability data is loaded\n      if (!stockAvailability[product.id]) {\n        setError('Loading stock information... Please try again.');\n        return;\n      }\n\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n      const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n      \n      \n      if (!unitStockInfo) {\n        setError(`Unit ${unit.name} not found in stock information`);\n        return;\n      }\n      \n      if (!unitStockInfo.is_available) {\n        setError(`${unit.name} is out of stock`);\n        return;\n      }\n      \n      // Check if there's enough stock for the selected unit\n      if (unitStockInfo.available_quantity <= 0) {\n        setError(`No ${unit.name} stock left`);\n        return;\n      }\n    }\n    \n    const existingItem = cart.find(item => \n      item.id === product.id && \n      item.unit_id === unit.id && \n      item.price_mode === priceMode\n    );\n    if (existingItem) {\n      // Check if adding 1 more would exceed available quantity (only for complete sales)\n      if (saleMode === 'complete') {\n        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n        const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n        if (unitStockInfo && existingItem.quantity + 1 > unitStockInfo.available_quantity) {\n          setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n          return;\n        }\n      }\n      setCart(cart.map(item =>\n        item.id === product.id && item.unit_id === unit.id && item.price_mode === priceMode\n          ? { ...item, quantity: item.quantity + 1 }\n          : item\n      ));\n    } else {\n      // Check if adding 1 would exceed available quantity (only for complete sales)\n      if (saleMode === 'complete') {\n        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n        const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n        if (unitStockInfo && 1 > unitStockInfo.available_quantity) {\n          setError(`Not enough ${unit.name} available. Only ${unitStockInfo.available_quantity} left.`);\n          return;\n        }\n      }\n      // Get unit stock info for price calculation\n      const updatedStockInfo = getUpdatedStockAvailability(product.id);\n      const unitStockInfo = updatedStockInfo?.find(u => u.id === unit.id);\n      \n      const newCartItem = {\n        ...product,\n        quantity: 1,\n        unit_id: unit.id,\n        unit_name: unit.name,\n        unit_symbol: unit.symbol,\n        unit_price: getCurrentUnitPrice(product, unitStockInfo) || getCurrentPrice(product),\n        price_mode: priceMode\n      };\n      setCart([...cart, newCartItem]);\n    }\n    setError('');\n  };\n\n  const updateQuantity = (productId, unitId, quantity, priceMode = null) => {\n    if (quantity <= 0) {\n      setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)));\n    } else {\n      // Skip stock validation for pending sales since stock won't be removed until completion\n      if (saleMode === 'complete') {\n        // Check updated stock availability for the selected unit\n        const updatedStockInfo = getUpdatedStockAvailability(productId);\n        const unitStockInfo = updatedStockInfo?.find(u => u.id === unitId);\n        \n        if (!unitStockInfo || !unitStockInfo.is_available) {\n          setError(`Unit is out of stock`);\n          return;\n        }\n        \n        // For updateQuantity, we need to consider the current cart quantity\n        const currentCartQuantity = cart\n          .filter(item => item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)\n          .reduce((sum, item) => sum + item.quantity, 0);\n        \n        // Calculate how much we can add (available + what's already in cart)\n        const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n        \n        if (quantity > maxAllowed) {\n          setError(`Not enough stock available. Max: ${maxAllowed}`);\n          return;\n        }\n      }\n      \n      setCart(cart.map(item =>\n        item.id === productId && item.unit_id === unitId && item.price_mode === priceMode\n          ? { ...item, quantity }\n          : item\n      ));\n      setError('');\n    }\n  };\n\n  const removeFromCart = (productId, unitId, priceMode = null) => {\n    setCart(cart.filter(item => !(item.id === productId && item.unit_id === unitId && item.price_mode === priceMode)));\n  };\n\n  const calculateSubtotal = () => {\n    return cart.reduce((total, item) => total + (item.quantity * item.unit_price), 0);\n  };\n\n  const calculateTax = () => {\n    let totalTax = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: tax = (price × tax_rate) / (100 + tax_rate)\n        const itemTax = (item.quantity * item.unit_price * item.tax_rate) / (100 + item.tax_rate);\n        totalTax += itemTax;\n      }\n    });\n    return totalTax;\n  };\n\n  const calculateCost = () => {\n    let totalCost = 0;\n    cart.forEach(item => {\n      if (item.tax_rate && item.tax_rate > 0) {\n        // For tax-inclusive pricing: cost = (price × 100) / (100 + tax_rate)\n        const itemCost = (item.quantity * item.unit_price * 100) / (100 + item.tax_rate);\n        totalCost += itemCost;\n      } else {\n        // No tax, full price is cost\n        totalCost += item.quantity * item.unit_price;\n      }\n    });\n    return totalCost;\n  };\n\n\n  const autoPrintReceipt = async (saleNumber, saleData, saleStatus = 'completed') => {\n    try {\n      // Create print content for the sale\n      const total = calculateSubtotal();\n      const remaining = total - paidAmount;\n      \n      const printData = {\n        sale_number: saleNumber,\n        customer_name: customerInfo.name || 'Walk-in Customer',\n        customer_phone: customerInfo.phone || '',\n        customer_email: customerInfo.email || '',\n        user_name: user?.username || 'Unknown User',\n        user_id: user?.id || 'unknown',\n        created_at: new Date().toISOString(),\n        print_timestamp: new Date().toISOString(),\n        print_id: `PRINT-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        status: saleStatus,\n        total_amount: total,\n        paid_amount: paidAmount,\n        remaining_amount: remaining,\n        payment_status: remaining > 0 ? 'partial' : 'paid',\n        due_date: remaining > 0 ? new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString() : null, // 30 days from now\n        items: cart.map(item => ({\n          product_name: item.name,\n          product_sku: item.sku,\n          quantity: item.quantity,\n          unit_name: item.unit_name || item.unit?.name || 'piece',\n          unit_price: item.unit_price,\n          total_price: item.unit_price * item.quantity\n        }))\n      };\n\n      // Generate print content using the same logic as PrintButton\n      const printContent = generatePrintContent(printData, 'Sale Receipt', 'sale', t);\n      \n      // Open print window\n      const printWindow = window.open('', '_blank', 'width=800,height=600');\n      printWindow.document.write(printContent);\n      printWindow.document.close();\n      \n      // Wait for content to load then print\n      const printAfterLoad = () => {\n        printWindow.focus();\n        printWindow.print();\n        // Close the window after a short delay\n        setTimeout(() => {\n          printWindow.close();\n        }, 1000);\n      };\n      \n      // Check if window is already loaded\n      if (printWindow.document.readyState === 'complete') {\n        printAfterLoad();\n      } else {\n        printWindow.onload = printAfterLoad;\n      }\n      \n    } catch (error) {\n      // Don't show error to user as it's not critical\n    }\n  };\n\n  const handleCheckout = async () => {\n    if (cart.length === 0) {\n      setError(t('pos.cart_empty'));\n      return;\n    }\n\n    setProcessing(true);\n    setError('');\n\n    // Validate customer name for partial payments\n    if (paymentType === 'partial' && (!customerInfo.name || !customerInfo.name.trim())) {\n      setError('Customer name is required for partial payments');\n      setProcessing(false);\n      return;\n    }\n\n    // Validate paid amount\n    const total = calculateTotal();\n    if (paidAmount > total) {\n      setError('Paid amount cannot exceed the total amount');\n      setProcessing(false);\n      return;\n    }\n\n    if (paidAmount < 0) {\n      setError('Paid amount cannot be negative');\n      setProcessing(false);\n      return;\n    }\n\n    try {\n      const saleData = {\n        sale_type: 'sale',\n        customer_name: customerInfo.name,\n        customer_phone: customerInfo.phone,\n        customer_email: customerInfo.email,\n        payment_method: paymentMethod,\n        paid_amount: paidAmount,\n          items: cart.map(item => {\n            // More robust unit ID extraction\n            let unitId = item.unit_id;\n            if (typeof unitId === 'object' && unitId !== null) {\n              unitId = unitId.id || unitId;\n            }\n            \n            return {\n          product: item.id,\n              quantity: parseFloat(item.quantity),\n              unit: parseInt(unitId),\n              unit_price: parseFloat(item.unit_price),\n              price_mode: item.price_mode || 'standard'\n            };\n          })\n        };\n\n\n      // Create the sale\n      const response = await api.post('/api/sales/', saleData);\n      const saleId = response.data.id;\n      const saleNumber = response.data.sale_number;\n      \n      if (saleMode === 'complete') {\n        // Complete the sale immediately\n        try {\n          await api.post(`/api/sales/${saleId}/complete/`);\n          \n          // Auto-print the receipt after successful sale completion (only if printReceipt is true)\n          if (printReceipt) {\n            await autoPrintReceipt(saleNumber, response.data, 'completed');\n          }\n      \n      // Clear cart and customer info\n      setCart([]);\n      setCustomerInfo({ name: '', phone: '', email: '' });\n      \n          // Reset price mode to standard after sale\n          setPriceMode('standard');\n          \n          // Wait a moment for the backend to process stock movements\n          await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second\n          \n          // Refresh product data to update stock quantities\n          await fetchProducts();\n          \n          // Wait another moment for stock availability to be updated\n          await new Promise(resolve => setTimeout(resolve, 500)); // Wait 0.5 seconds\n          \n          // Refresh stock availability for all products\n          refreshStockAvailability();\n          \n          alert(`Sale completed successfully! Sale Number: ${saleNumber}`);\n        } catch (completeError) {\n          // Sale was created but completion failed\n          setError(`Sale created (${saleNumber}) but completion failed: ${completeError.response?.data?.error || completeError.message}`);\n          \n          // Still clear the cart since the sale was created\n          setCart([]);\n          setCustomerInfo({ name: '', phone: '', email: '' });\n          \n          // Wait for backend to process any completed stock movements\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          // Refresh data\n          await fetchProducts();\n          await new Promise(resolve => setTimeout(resolve, 500));\n          refreshStockAvailability();\n        }\n      } else {\n        // Create pending sale (don't complete it)\n        \n        // Print receipt for pending sale if requested\n        if (printReceipt) {\n          await autoPrintReceipt(saleNumber, response.data, 'pending');\n        }\n        \n        // Clear cart and customer info\n        setCart([]);\n        setCustomerInfo({ name: '', phone: '', email: '' });\n        \n        // Reset price mode to standard after sale\n        setPriceMode('standard');\n        \n        alert(t('messages.pending_sale_created', { saleNumber }));\n      }\n    } catch (err) {\n      \n      // Handle different types of errors\n      if (err.response?.data?.error) {\n        setError(err.response.data.error);\n      } else if (err.response?.data?.detail) {\n        setError(err.response.data.detail);\n      } else if (err.response?.data?.customer_name) {\n        setError(err.response.data.customer_name[0]);\n      } else if (err.response?.data?.paid_amount) {\n        setError(err.response.data.paid_amount[0]);\n      } else {\n        setError('Failed to create sale. Please check the console for details.');\n      }\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const clearCart = () => {\n    setCart([]);\n    setError('');\n  };\n\n  const handleFilterChange = useCallback((filterType, value) => {\n    if (filterType === 'search') {\n      // For search, update the input state immediately (no API call)\n      setSearchInput(value);\n    } else {\n      // For other filters (like category), update immediately\n      const newFilters = { ...filtersRef.current, [filterType]: value };\n      setFilters(newFilters);\n      fetchProducts(newFilters);\n    }\n  }, []); // No dependencies needed since we use ref\n\n  const clearFilters = useCallback(() => {\n    const clearedFilters = { category: '', search: '' };\n    setFilters(clearedFilters);\n    setSearchInput(''); // Clear the search input state\n    \n    // Only fetch products if categories are loaded\n    if (categoriesLoadedRef.current && categoriesRef.current.length > 0) {\n      fetchProducts(clearedFilters);\n    }\n  }, [categoriesLoaded, categories.length]);\n\n\n  const handleQuantityClick = (item) => {\n    setEditingQuantity(`${item.id}-${item.unit_id}`);\n    setTempQuantity(item.quantity.toString());\n  };\n\n  const handleQuantityChange = (e) => {\n    const value = e.target.value;\n    // Only allow numbers and empty string\n    if (value === '' || /^\\d+$/.test(value)) {\n      setTempQuantity(value);\n    }\n  };\n\n  const handleQuantitySubmit = (item) => {\n    const newQuantity = parseFloat(tempQuantity);\n    \n    if (tempQuantity === '' || isNaN(newQuantity) || newQuantity < 0) {\n      setError('Please enter a valid quantity');\n      setEditingQuantity(null);\n      return;\n    }\n    \n    // Skip stock validation for pending sales since stock won't be removed until completion\n    if (saleMode === 'complete') {\n      // Check updated stock availability for the selected unit\n      const updatedStockInfo = getUpdatedStockAvailability(item.id);\n      const unitStockInfo = updatedStockInfo?.find(u => u.id === item.unit_id);\n      \n      if (!unitStockInfo || !unitStockInfo.is_available) {\n        setError(`Unit is out of stock`);\n        setEditingQuantity(null);\n        return;\n      }\n      \n      // For handleQuantitySubmit, we need to consider the current cart quantity\n      const currentCartQuantity = cart\n        .filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id && cartItem.price_mode === item.price_mode)\n        .reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n      \n      // Calculate how much we can add (available + what's already in cart)\n      const maxAllowed = unitStockInfo.available_quantity + currentCartQuantity;\n      \n      if (newQuantity > maxAllowed) {\n        setError(`Not enough stock available. Max: ${maxAllowed}`);\n        setEditingQuantity(null);\n        return;\n      }\n    }\n    \n    if (newQuantity === 0) {\n      // Remove item from cart if quantity is 0\n      removeFromCart(item.id, item.unit_id, item.price_mode);\n    } else {\n      updateQuantity(item.id, item.unit_id, newQuantity, item.price_mode);\n    }\n    \n    setEditingQuantity(null);\n    setTempQuantity('');\n    setError('');\n  };\n\n  const handleQuantityCancel = () => {\n    setEditingQuantity(null);\n    setTempQuantity('');\n  };\n\n  const handleQuantityKeyPress = (e, item) => {\n    if (e.key === 'Enter') {\n      handleQuantitySubmit(item);\n    } else if (e.key === 'Escape') {\n      handleQuantityCancel();\n    }\n  };\n\n  const handleUnitSelection = (productId, unitId) => {\n    setSelectedUnits(prev => ({\n      ...prev,\n      [productId]: unitId\n    }));\n  };\n\n  const handleProductCardClick = (product) => {\n    // Don't allow clicking on out-of-stock products (only for complete sales)\n    if (saleMode === 'complete' && product.stock_quantity <= 0) {\n      return;\n    }\n    \n    if (product.compatible_units && product.compatible_units.length > 1) {\n      // For multi-unit products, add with the currently selected unit\n      const selectedUnitId = selectedUnits[product.id];\n      \n      if (selectedUnitId) {\n        const selectedCompatibleUnit = product.compatible_units.find(u => (u.unit?.id || u.unit) === selectedUnitId);\n        \n        if (selectedCompatibleUnit) {\n          // Get the price for this unit from stock availability\n          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n          const unitStockInfo = updatedStockInfo?.find(u => u.id === (selectedCompatibleUnit.unit?.id || selectedCompatibleUnit.unit));\n          const unitPrice = getCurrentUnitPrice(product, unitStockInfo) || getCurrentPrice(product);\n          \n          // Convert compatible unit to the format expected by addToCart\n          const selectedUnit = {\n            id: selectedCompatibleUnit.unit?.id || selectedCompatibleUnit.unit,\n            name: selectedCompatibleUnit.unit_name,\n            symbol: selectedCompatibleUnit.unit_symbol,\n            price: unitPrice\n          };\n          addToCart(product, selectedUnit);\n        }\n      }\n    } else {\n      // For single-unit products, add directly\n      addToCart(product);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"pos\">\n        <div className=\"pos-loading\">\n          <div className=\"spinner\"></div>\n          <span>Loading products...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pos\">\n      <div className=\"pos-header\">\n        <h1>{t('titles.point_of_sale')}</h1>\n        <div className=\"pos-user\">\n          <span>Cashier: {user?.username}</span>\n        </div>\n      </div>\n\n      <div className=\"pos-content\">\n        {/* Product Grid */}\n        <div className=\"pos-products\">\n          <h2>Products</h2>\n          \n          {/* Filters */}\n          <form className=\"pos-filters\">\n            <div className=\"filter-group\">\n              <label>Category:</label>\n              <select \n                value={filters.category} \n                onChange={(e) => handleFilterChange('category', e.target.value)}\n              >\n                <option value=\"\">All Categories</option>\n                {categories.filter(cat => cat.is_sellable).map(category => (\n                  <option key={category.id} value={category.id}>\n                    {category.name}\n                  </option>\n                ))}\n              </select>\n              <Button \n                variant=\"outline\" \n                size=\"small\" \n                onClick={() => setShowSellableToggle(!showSellableToggle)}\n                style={{ marginTop: '0.5rem' }}\n              >\n                {showSellableToggle ? 'Hide' : 'Manage'} Categories\n              </Button>\n            </div>\n            \n            <div className=\"filter-group\">\n              <label>Price Mode:</label>\n              <div className=\"price-mode-toggle\">\n                <button \n                  type=\"button\"\n                  className={`price-mode-btn ${priceMode === 'standard' ? 'active' : ''}`}\n                  onClick={() => setPriceMode('standard')}\n                >\n                  Standard\n                </button>\n                <button \n                  type=\"button\"\n                  className={`price-mode-btn ${priceMode === 'wholesale' ? 'active' : ''}`}\n                  onClick={() => setPriceMode('wholesale')}\n                >\n                  Wholesale\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"filter-group\">\n              <label>Sale Mode:</label>\n              <div className=\"sale-mode-toggle\">\n                <button \n                  type=\"button\"\n                  className={`sale-mode-btn ${saleMode === 'complete' ? 'active' : ''}`}\n                  onClick={() => setSaleMode('complete')}\n                  title={t('alerts.sale_will_be_completed')}\n                >\n                  Complete\n                </button>\n                <button \n                  type=\"button\"\n                  className={`sale-mode-btn ${saleMode === 'pending' ? 'active' : ''}`}\n                  onClick={() => setSaleMode('pending')}\n                  title={t('alerts.sale_will_be_created_pending')}\n                >\n                  Pending\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"filter-group print-receipt-group\">\n              <label>Print Receipt:</label>\n              <div className=\"sale-mode-toggle print-receipt-toggle\">\n                <button \n                  type=\"button\"\n                  className={`sale-mode-btn print-receipt-btn ${printReceipt ? 'active' : ''}`}\n                  onClick={() => setPrintReceipt(true)}\n                  title={t('alerts.print_receipt_after_sale')}\n                >\n                  Yes\n                </button>\n                <button \n                  type=\"button\"\n                  className={`sale-mode-btn print-receipt-btn ${!printReceipt ? 'active' : ''}`}\n                  onClick={() => setPrintReceipt(false)}\n                  title={t('pos.dont_print_receipt')}\n                >\n                  No\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"filter-group\">\n              <label>Search:</label>\n              <input\n                key=\"search-input\"\n                ref={searchInputRef}\n                type=\"text\"\n                placeholder={t('pos.search_products')}\n                value={searchInput}\n                onChange={(e) => handleFilterChange('search', e.target.value)}\n              />\n            </div>\n            <div className=\"filter-group\">\n              <Button variant=\"outline\" size=\"small\" onClick={clearFilters}>\n                Clear\n              </Button>\n            </div>\n          </form>\n\n          {/* Category Management Section */}\n          {showSellableToggle && (\n            <div className=\"category-management\" style={{ \n              marginBottom: '1rem', \n              padding: '1rem', \n              backgroundColor: '#f9fafb', \n              borderRadius: '0.5rem',\n              border: '1px solid #e5e7eb'\n            }}>\n              <div style={{ \n                display: 'flex', \n                justifyContent: 'space-between', \n                alignItems: 'center',\n                marginBottom: '1rem'\n              }}>\n                <h3 style={{ margin: '0', fontSize: '1rem', fontWeight: '600' }}>\n                  Manage Sellable Categories\n                  {categoryUpdating && <span style={{ marginLeft: '0.5rem', color: '#3b82f6' }}>⟳</span>}\n                </h3>\n                <button\n                  onClick={resetAllCategoriesToSellable}\n                  disabled={categoryUpdating}\n                  style={{\n                    padding: '0.5rem 1rem',\n                    fontSize: '0.875rem',\n                    borderRadius: '0.375rem',\n                    border: '1px solid #3b82f6',\n                    cursor: categoryUpdating ? 'not-allowed' : 'pointer',\n                    backgroundColor: categoryUpdating ? '#9ca3af' : '#3b82f6',\n                    color: 'white',\n                    fontWeight: '500',\n                    opacity: categoryUpdating ? 0.6 : 1\n                  }}\n                >\n                  Reset All to Sellable\n                </button>\n              </div>\n              <div style={{ \n                display: 'grid', \n                gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', \n                gap: '0.5rem' \n              }}>\n                {categories.map(category => (\n                  <div key={category.id} style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between',\n                    padding: '0.5rem',\n                    backgroundColor: 'white',\n                    borderRadius: '0.375rem',\n                    border: '1px solid #e5e7eb'\n                  }}>\n                    <span style={{ fontSize: '0.875rem', fontWeight: '500' }}>\n                      {category.name}\n                    </span>\n                    <button\n                      onClick={() => toggleCategorySellable(category.id, category.is_sellable)}\n                      style={{\n                        padding: '0.25rem 0.5rem',\n                        fontSize: '0.75rem',\n                        borderRadius: '0.25rem',\n                        border: '1px solid',\n                        cursor: 'pointer',\n                        backgroundColor: category.is_sellable ? '#dcfce7' : '#fee2e2',\n                        borderColor: category.is_sellable ? '#16a34a' : '#dc2626',\n                        color: category.is_sellable ? '#15803d' : '#dc2626'\n                      }}\n                    >\n                      {category.is_sellable ? 'Sellable' : 'Not Sellable'}\n                    </button>\n          </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          <div className=\"products-info\">\n            <p className=\"products-count\">\n              {products.length} product{products.length !== 1 ? 's' : ''} found\n            </p>\n          </div>\n\n          <div className=\"products-grid\">\n            {products.map(product => (\n              <div\n                key={product.id}\n                className={`product-card ${product.stock_quantity <= 0 && saleMode === 'complete' ? 'out-of-stock' : ''} clickable`}\n                onClick={() => handleProductCardClick(product)}\n              >\n                <div className=\"product-info\">\n                  <h3>{product.name}</h3>\n                  <p className=\"product-sku\">{product.sku}</p>\n                  <p className=\"product-price\">\n                    {(() => {\n                      // Find the actual base unit and get its price\n                      const baseUnit = product.compatible_units?.find(u => u.unit.is_base_unit);\n                      if (baseUnit && stockAvailability[product.id]) {\n                        const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                        const baseUnitStockInfo = updatedStockInfo?.find(u => u.id === (baseUnit.unit?.id || baseUnit.unit));\n                        if (baseUnitStockInfo) {\n                          return getCurrentUnitPrice(product, baseUnitStockInfo).toFixed(2);\n                        }\n                      }\n                      // Fallback to the original price\n                      return getCurrentPrice(product).toFixed(2);\n                    })()} MGA\n                    {product.compatible_units && product.compatible_units.length > 1 && \n                      ` (base unit: ${product.compatible_units.find(u => u.unit.is_base_unit)?.unit.symbol || 'piece'})`\n                    }\n                  </p>\n                  <p className=\"product-stock\">\n                    Stock: {product.stock_quantity} {product.unit}\n                    {stockAvailability[product.id] && product.compatible_units && product.compatible_units.length > 1 && (\n                      <span className=\"stock-details\">\n                        {(() => {\n                          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                          return product.compatible_units.map(compatibleUnit => {\n                            const unitStockInfo = updatedStockInfo?.find(u => u.id === (compatibleUnit.unit?.id || compatibleUnit.unit));\n                            if (!unitStockInfo) return null;\n                            \n                            // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                            const unitName = unitStockInfo?.name || compatibleUnit.unit?.name || compatibleUnit.unit_name;\n                            \n                            return (\n                              <span key={compatibleUnit.unit?.id || compatibleUnit.unit} className={`unit-stock ${unitStockInfo.is_available ? 'available' : 'unavailable'}`}>\n                                {unitName}: {getCurrentUnitPrice(product, unitStockInfo).toFixed(2)} MGA ({unitStockInfo.available_quantity} available)\n                              </span>\n                            );\n                          }).filter(Boolean);\n                        })()}\n                      </span>\n                    )}\n                  </p>\n                  \n                  {/* Unit Selection - Only show for products with multiple compatible units */}\n                  {product.compatible_units && product.compatible_units.length > 1 && (\n                    <div className=\"unit-selection\">\n                      <label>Unit:</label>\n                      <select \n                        className=\"unit-select\"\n                        value={selectedUnits[product.id] || ''}\n                        onChange={(e) => {\n                          const unitId = parseInt(e.target.value);\n                          handleUnitSelection(product.id, unitId);\n                        }}\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        <option value=\"\">Select Unit</option>\n                        {product.compatible_units.map((compatibleUnit, index) => {\n                          // Use updated stock availability that considers cart contents\n                          const updatedStockInfo = getUpdatedStockAvailability(product.id);\n                          const unitStockInfo = updatedStockInfo?.find(u => u.id === (compatibleUnit.unit?.id || compatibleUnit.unit));\n                          const isAvailable = unitStockInfo ? unitStockInfo.is_available : false;\n                          const availableQty = unitStockInfo ? unitStockInfo.available_quantity : 0;\n                          \n                          // Use unit info from stock availability if available, otherwise fallback to compatible unit\n                          const unitName = unitStockInfo?.name || compatibleUnit.unit?.name || compatibleUnit.unit_name;\n                          const unitSymbol = unitStockInfo?.symbol || compatibleUnit.unit?.symbol || compatibleUnit.unit_symbol;\n                          \n                          \n                          return (\n                            <option \n                              key={compatibleUnit.unit?.id || compatibleUnit.unit} \n                              value={compatibleUnit.unit?.id || compatibleUnit.unit}\n                              disabled={saleMode === 'complete' ? !isAvailable : false}\n                            >\n                              {unitName} ({unitSymbol}) - {getCurrentUnitPrice(product, unitStockInfo).toFixed(2)} MGA\n                              {!isAvailable && saleMode === 'complete' ? ' - OUT OF STOCK' : ''}\n                            </option>\n                          );\n                        })}\n                      </select>\n                    </div>\n                  )}\n                  \n                  {/* Add to Cart Button - Only show for single unit products */}\n                  {(!product.compatible_units || product.compatible_units.length <= 1) && (\n                    <Button\n                      variant=\"primary\"\n                      size=\"small\"\n                      onClick={() => addToCart(product)}\n                      disabled={(() => {\n                        // Skip stock validation for pending sales since stock won't be removed until completion\n                        if (saleMode === 'pending') {\n                          return false; // Always allow for pending sales\n                        }\n                        \n                        // Check if any unit has available stock\n                        if (!stockAvailability[product.id]) {\n                          return true; // Disable if stock data not loaded\n                        }\n                        \n                        // For single unit products, check base stock\n                        return product.stock_quantity <= 0;\n                      })()}\n                      className=\"add-to-cart-btn\"\n                    >\n                      {(() => {\n                        if (!stockAvailability[product.id]) {\n                          return 'Loading...';\n                        }\n                        \n                        // For pending sales, always show \"Add to Cart\" regardless of stock\n                        if (saleMode === 'pending') {\n                          return 'Add to Cart';\n                        }\n                        \n                        return product.stock_quantity <= 0 ? 'Out of Stock' : 'Add to Cart';\n                      })()}\n                    </Button>\n                  )}\n                  \n                  {/* For products with multiple units, show instruction */}\n                  {product.available_units && product.available_units.length > 1 && (\n                    <div className=\"unit-instruction\">\n                      <p>Click card or select unit to add to cart</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n\n        {/* Cart and Checkout */}\n        <div className=\"pos-cart\">\n          <div className=\"cart-header\">\n            <h2>Shopping Cart</h2>\n            {cart.length > 0 && (\n              <Button variant=\"outline\" size=\"small\" onClick={clearCart}>\n                Clear Cart\n              </Button>\n            )}\n          </div>\n\n          {error && (\n            <div className=\"error-message\">\n              {error}\n            </div>\n          )}\n\n          <div className=\"cart-items\">\n            {cart.length === 0 ? (\n              <div className=\"empty-cart\">\n                <p>Cart is empty</p>\n                <p className=\"empty-cart-hint\">Add items from the product list to start a sale</p>\n              </div>\n            ) : (\n              <>\n                <div className=\"cart-table-header\">\n                  <div className=\"header-product\">Product</div>\n                  <div className=\"header-unit\">Unit</div>\n                  <div className=\"header-price\">Price</div>\n                  <div className=\"header-quantity\">Qty</div>\n                  <div className=\"header-total\">Total</div>\n                  <div className=\"header-actions\">Actions</div>\n                </div>\n                {cart.map(item => (\n                  <div key={`${item.id}-${item.unit_id}-${item.price_mode}`} className=\"cart-item\">\n                    <div className=\"item-product\">\n                      <h4>{item.name}</h4>\n                      <p className=\"item-sku\">SKU: {item.sku}</p>\n                      <span className={`price-mode-badge ${item.price_mode}`}>\n                        {item.price_mode === 'wholesale' ? 'WS' : 'STD'}\n                      </span>\n                    </div>\n                    <div className=\"item-unit\">\n                      {item.unit_symbol || 'piece'}\n                    </div>\n                    <div className=\"item-price\">\n                      {parseFloat(item.unit_price).toFixed(2)} MGA\n                    </div>\n                    <div className=\"item-quantity\">\n                      <div className=\"quantity-controls\">\n                        <Button\n                          size=\"small\"\n                          variant=\"outline\"\n                          onClick={() => updateQuantity(item.id, item.unit_id, item.quantity - 1, item.price_mode)}\n                        >\n                          -\n                        </Button>\n                        {editingQuantity === `${item.id}-${item.unit_id}` ? (\n                          <div className=\"quantity-edit\">\n                            <input\n                              type=\"number\"\n                              value={tempQuantity}\n                              onChange={handleQuantityChange}\n                              onKeyPress={(e) => handleQuantityKeyPress(e, item)}\n                              onBlur={() => handleQuantitySubmit(item)}\n                              className=\"quantity-input\"\n                              min=\"0\"\n                              max={item.stock_quantity}\n                              autoFocus\n                            />\n                          </div>\n                        ) : (\n                          <span \n                            className=\"quantity clickable\"\n                            onClick={() => handleQuantityClick(item)}\n                            title={t('alerts.click_to_edit_quantity')}\n                          >\n                            {item.quantity}\n                          </span>\n                        )}\n                        <Button\n                          size=\"small\"\n                          variant=\"outline\"\n                          onClick={() => updateQuantity(item.id, item.unit_id, item.quantity + 1, item.price_mode)}\n                          disabled={(() => {\n                            // Skip stock validation for pending sales since stock won't be removed until completion\n                            if (saleMode === 'pending') {\n                              return false; // Always allow for pending sales\n                            }\n                            \n                            const updatedStockInfo = getUpdatedStockAvailability(item.id);\n                            const unitStockInfo = updatedStockInfo?.find(u => u.id === item.unit_id);\n                            const currentCartQuantity = cart\n                              .filter(cartItem => cartItem.id === item.id && cartItem.unit_id === item.unit_id && cartItem.price_mode === item.price_mode)\n                              .reduce((sum, cartItem) => sum + cartItem.quantity, 0);\n                            const maxAllowed = (unitStockInfo?.available_quantity || 0) + currentCartQuantity;\n                            return item.quantity >= maxAllowed;\n                          })()}\n                        >\n                          +\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"item-total\">\n                      {(item.quantity * item.unit_price).toFixed(2)} MGA\n                    </div>\n                    <div className=\"item-actions\">\n                      <Button\n                        size=\"small\"\n                        variant=\"danger\"\n                        onClick={() => removeFromCart(item.id, item.unit_id, item.price_mode)}\n                        title={t('alerts.remove_item')}\n                      >\n                        ×\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </>\n            )}\n          </div>\n\n          {cart.length > 0 && (\n            <>\n              <div className=\"cart-summary\">\n                <div className=\"summary-row\">\n                  <span>Total Amount:</span>\n                  <span>{calculateSubtotal().toFixed(2)} MGA</span>\n                </div>\n                <div className=\"summary-row cost-breakdown\">\n                  <span>Cost (excl. tax):</span>\n                  <span>{calculateCost().toFixed(2)} MGA</span>\n                </div>\n                <div className=\"summary-row tax-breakdown\">\n                  <span>Tax included:</span>\n                  <span>{calculateTax().toFixed(2)} MGA</span>\n                </div>\n                <div className=\"summary-row total\">\n                  <span>Total:</span>\n                  <span>{calculateSubtotal().toFixed(2)} MGA</span>\n                </div>\n              </div>\n\n              <form className=\"checkout-form\">\n              <div className=\"customer-info\">\n                <h3>Customer Information</h3>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    placeholder={paymentType === 'partial' ? \"Customer Name (Required for Partial Payment)\" : \"Customer Name (Optional)\"}\n                    value={customerInfo.name}\n                    onChange={(e) => setCustomerInfo({...customerInfo, name: e.target.value})}\n                    className={paymentType === 'partial' && !customerInfo.name ? 'required-field' : ''}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"tel\"\n                    placeholder=\"Phone Number (Optional)\"\n                    value={customerInfo.phone}\n                    onChange={(e) => setCustomerInfo({...customerInfo, phone: e.target.value})}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"email\"\n                    placeholder=\"Email (Optional)\"\n                    value={customerInfo.email}\n                    onChange={(e) => setCustomerInfo({...customerInfo, email: e.target.value})}\n                  />\n                </div>\n              </div>\n\n              <div className=\"payment-section\">\n                <h3>Payment Method</h3>\n                <div className=\"payment-methods\">\n                  {['cash', 'card', 'mobile_money', 'bank_transfer'].map(method => (\n                    <label key={method} className=\"payment-method\">\n                      <input\n                        type=\"radio\"\n                        name=\"payment\"\n                        value={method}\n                        checked={paymentMethod === method}\n                        onChange={(e) => setPaymentMethod(e.target.value)}\n                      />\n                      <span>{method.replace('_', ' ').toUpperCase()}</span>\n                    </label>\n                  ))}\n                </div>\n                \n                <h3>Payment Type</h3>\n                <div className=\"payment-types\">\n                  <label className=\"payment-type\">\n                    <input\n                      type=\"radio\"\n                      name=\"paymentType\"\n                      value=\"full\"\n                      checked={paymentType === 'full'}\n                      onChange={(e) => setPaymentType(e.target.value)}\n                    />\n                    <span>Full Payment (100%)</span>\n                  </label>\n                  <label className=\"payment-type\">\n                    <input\n                      type=\"radio\"\n                      name=\"paymentType\"\n                      value=\"partial\"\n                      checked={paymentType === 'partial'}\n                      onChange={(e) => setPaymentType(e.target.value)}\n                    />\n                    <span>Partial Payment (0-99.99%)</span>\n                  </label>\n                </div>\n                \n                {paymentType === 'partial' && (\n                  <div className=\"form-group\">\n                    <label>Amount to Pay</label>\n                    <input\n                      type=\"number\"\n                      step=\"0.01\"\n                      min=\"0\"\n                      max={calculateTotal()}\n                      value={paidAmount || 0}\n                      onChange={(e) => {\n                        const value = parseFloat(e.target.value) || 0;\n                        setPaidAmount(value);\n                      }}\n                      placeholder={t('forms.enter_amount_to_pay')}\n                    />\n                    <small>Total: ${calculateTotal().toFixed(2)} | Remaining: ${(calculateTotal() - (paidAmount || 0)).toFixed(2)}</small>\n                  </div>\n                )}\n              </div>\n              </form>\n\n              <div className=\"checkout-actions\">\n                <Button\n                  onClick={handleCheckout}\n                  loading={processing}\n                  className=\"validate-button\"\n                  size=\"large\"\n                  variant=\"primary\"\n                  disabled={cart.length === 0}\n                >\n                  {saleMode === 'complete' ? t('pos.complete_sale') : t('pos.create_pending_sale')}\n                  {printReceipt && t('pos.print_receipt')}\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PointOfSale;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}